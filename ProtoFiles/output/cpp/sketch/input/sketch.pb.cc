// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/sketch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/sketch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace sketch {

namespace {

const ::google::protobuf::Descriptor* SrlSketch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSketch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlObject_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SrlObject_ObjectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SrlShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlStroke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlStroke_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Interpretation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Interpretation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fsketch_2eproto() {
  protobuf_AddDesc_input_2fsketch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/sketch.proto");
  GOOGLE_CHECK(file != NULL);
  SrlSketch_descriptor_ = file->message_type(0);
  static const int SrlSketch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, sketch_),
  };
  SrlSketch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSketch_descriptor_,
      SrlSketch::default_instance_,
      SrlSketch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSketch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSketch));
  SrlObject_descriptor_ = file->message_type(1);
  static const int SrlObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlObject, object_),
  };
  SrlObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlObject_descriptor_,
      SrlObject::default_instance_,
      SrlObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlObject));
  SrlObject_ObjectType_descriptor_ = SrlObject_descriptor_->enum_type(0);
  SrlShape_descriptor_ = file->message_type(2);
  static const int SrlShape_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, isusercreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, interpretations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, subcomponents_),
  };
  SrlShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlShape_descriptor_,
      SrlShape::default_instance_,
      SrlShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlShape));
  SrlStroke_descriptor_ = file->message_type(3);
  static const int SrlStroke_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, points_),
  };
  SrlStroke_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlStroke_descriptor_,
      SrlStroke::default_instance_,
      SrlStroke_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlStroke, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlStroke));
  SrlPoint_descriptor_ = file->message_type(4);
  static const int SrlPoint_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, speed_),
  };
  SrlPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlPoint_descriptor_,
      SrlPoint::default_instance_,
      SrlPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlPoint));
  Interpretation_descriptor_ = file->message_type(5);
  static const int Interpretation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, complexity_),
  };
  Interpretation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Interpretation_descriptor_,
      Interpretation::default_instance_,
      Interpretation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Interpretation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fsketch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSketch_descriptor_, &SrlSketch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlObject_descriptor_, &SrlObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlShape_descriptor_, &SrlShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlStroke_descriptor_, &SrlStroke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlPoint_descriptor_, &SrlPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Interpretation_descriptor_, &Interpretation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fsketch_2eproto() {
  delete SrlSketch::default_instance_;
  delete SrlSketch_reflection_;
  delete SrlObject::default_instance_;
  delete SrlObject_reflection_;
  delete SrlShape::default_instance_;
  delete SrlShape_reflection_;
  delete SrlStroke::default_instance_;
  delete SrlStroke_reflection_;
  delete SrlPoint::default_instance_;
  delete SrlPoint_reflection_;
  delete Interpretation::default_instance_;
  delete Interpretation_reflection_;
}

void protobuf_AddDesc_input_2fsketch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022input/sketch.proto\022\023protobuf.srl.sketc"
    "h\"\210\001\n\tSrlSketch\022\020\n\010courseId\030\001 \001(\004\022\024\n\014ass"
    "ignmentId\030\002 \001(\004\022\021\n\tproblemId\030\003 \001(\004\022\020\n\010do"
    "mainId\030\004 \001(\t\022.\n\006sketch\030\005 \003(\0132\036.protobuf."
    "srl.sketch.SrlObject\"\216\001\n\tSrlObject\0227\n\004ty"
    "pe\030\001 \002(\0162).protobuf.srl.sketch.SrlObject"
    ".ObjectType\022\016\n\006object\030\002 \002(\014\"8\n\nObjectTyp"
    "e\022\t\n\005SHAPE\020\000\022\n\n\006STROKE\020\001\022\t\n\005POINT\020\002\022\010\n\004L"
    "INE\020\003\"\276\001\n\010SrlShape\022\n\n\002id\030\001 \002(\t\022\014\n\004time\030\002"
    " \002(\004\022\014\n\004name\030\003 \001(\t\022\025\n\risUserCreated\030\004 \001("
    "\010\022<\n\017interpretations\030\005 \003(\0132#.protobuf.sr"
    "l.sketch.Interpretation\0225\n\rsubComponents"
    "\030\006 \003(\0132\036.protobuf.srl.sketch.SrlObject\"b"
    "\n\tSrlStroke\022\n\n\002id\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\022\014\n"
    "\004name\030\003 \001(\t\022-\n\006points\030\004 \003(\0132\035.protobuf.s"
    "rl.sketch.SrlPoint\"w\n\010SrlPoint\022\n\n\002id\030\001 \002"
    "(\t\022\014\n\004time\030\002 \002(\004\022\014\n\004name\030\003 \001(\t\022\t\n\001x\030\004 \002("
    "\001\022\t\n\001y\030\005 \002(\001\022\020\n\010pressure\030\006 \001(\001\022\014\n\004size\030\007"
    " \001(\001\022\r\n\005speed\030\010 \001(\001\"F\n\016Interpretation\022\014\n"
    "\004name\030\001 \002(\t\022\022\n\nconfidence\030\002 \002(\001\022\022\n\ncompl"
    "exity\030\003 \001(\001", 811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/sketch.proto", &protobuf_RegisterTypes);
  SrlSketch::default_instance_ = new SrlSketch();
  SrlObject::default_instance_ = new SrlObject();
  SrlShape::default_instance_ = new SrlShape();
  SrlStroke::default_instance_ = new SrlStroke();
  SrlPoint::default_instance_ = new SrlPoint();
  Interpretation::default_instance_ = new Interpretation();
  SrlSketch::default_instance_->InitAsDefaultInstance();
  SrlObject::default_instance_->InitAsDefaultInstance();
  SrlShape::default_instance_->InitAsDefaultInstance();
  SrlStroke::default_instance_->InitAsDefaultInstance();
  SrlPoint::default_instance_->InitAsDefaultInstance();
  Interpretation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fsketch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fsketch_2eproto {
  StaticDescriptorInitializer_input_2fsketch_2eproto() {
    protobuf_AddDesc_input_2fsketch_2eproto();
  }
} static_descriptor_initializer_input_2fsketch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SrlSketch::kCourseIdFieldNumber;
const int SrlSketch::kAssignmentIdFieldNumber;
const int SrlSketch::kProblemIdFieldNumber;
const int SrlSketch::kDomainIdFieldNumber;
const int SrlSketch::kSketchFieldNumber;
#endif  // !_MSC_VER

SrlSketch::SrlSketch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSketch::InitAsDefaultInstance() {
}

SrlSketch::SrlSketch(const SrlSketch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSketch::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = GOOGLE_ULONGLONG(0);
  assignmentid_ = GOOGLE_ULONGLONG(0);
  problemid_ = GOOGLE_ULONGLONG(0);
  domainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSketch::~SrlSketch() {
  SharedDtor();
}

void SrlSketch::SharedDtor() {
  if (domainid_ != &::google::protobuf::internal::kEmptyString) {
    delete domainid_;
  }
  if (this != default_instance_) {
  }
}

void SrlSketch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSketch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSketch_descriptor_;
}

const SrlSketch& SrlSketch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SrlSketch* SrlSketch::default_instance_ = NULL;

SrlSketch* SrlSketch::New() const {
  return new SrlSketch;
}

void SrlSketch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    courseid_ = GOOGLE_ULONGLONG(0);
    assignmentid_ = GOOGLE_ULONGLONG(0);
    problemid_ = GOOGLE_ULONGLONG(0);
    if (has_domainid()) {
      if (domainid_ != &::google::protobuf::internal::kEmptyString) {
        domainid_->clear();
      }
    }
  }
  sketch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSketch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &courseid_)));
          set_has_courseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assignmentId;
        break;
      }

      // optional uint64 assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assignmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignmentid_)));
          set_has_assignmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_problemId;
        break;
      }

      // optional uint64 problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_problemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &problemid_)));
          set_has_problemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_domainId;
        break;
      }

      // optional string domainId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domainId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domainid().data(), this->domainid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sketch;
        break;
      }

      // repeated .protobuf.srl.sketch.SrlObject sketch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sketch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sketch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSketch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->courseid(), output);
  }

  // optional uint64 assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->assignmentid(), output);
  }

  // optional uint64 problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->problemid(), output);
  }

  // optional string domainId = 4;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainid().data(), this->domainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->domainid(), output);
  }

  // repeated .protobuf.srl.sketch.SrlObject sketch = 5;
  for (int i = 0; i < this->sketch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sketch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSketch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 courseId = 1;
  if (has_courseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->courseid(), target);
  }

  // optional uint64 assignmentId = 2;
  if (has_assignmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->assignmentid(), target);
  }

  // optional uint64 problemId = 3;
  if (has_problemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->problemid(), target);
  }

  // optional string domainId = 4;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainid().data(), this->domainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domainid(), target);
  }

  // repeated .protobuf.srl.sketch.SrlObject sketch = 5;
  for (int i = 0; i < this->sketch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sketch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSketch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->courseid());
    }

    // optional uint64 assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignmentid());
    }

    // optional uint64 problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->problemid());
    }

    // optional string domainId = 4;
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainid());
    }

  }
  // repeated .protobuf.srl.sketch.SrlObject sketch = 5;
  total_size += 1 * this->sketch_size();
  for (int i = 0; i < this->sketch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sketch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSketch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSketch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSketch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSketch::MergeFrom(const SrlSketch& from) {
  GOOGLE_CHECK_NE(&from, this);
  sketch_.MergeFrom(from.sketch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSketch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSketch::CopyFrom(const SrlSketch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSketch::IsInitialized() const {

  for (int i = 0; i < sketch_size(); i++) {
    if (!this->sketch(i).IsInitialized()) return false;
  }
  return true;
}

void SrlSketch::Swap(SrlSketch* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(domainid_, other->domainid_);
    sketch_.Swap(&other->sketch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSketch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSketch_descriptor_;
  metadata.reflection = SrlSketch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SrlObject_ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlObject_ObjectType_descriptor_;
}
bool SrlObject_ObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SrlObject_ObjectType SrlObject::SHAPE;
const SrlObject_ObjectType SrlObject::STROKE;
const SrlObject_ObjectType SrlObject::POINT;
const SrlObject_ObjectType SrlObject::LINE;
const SrlObject_ObjectType SrlObject::ObjectType_MIN;
const SrlObject_ObjectType SrlObject::ObjectType_MAX;
const int SrlObject::ObjectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SrlObject::kTypeFieldNumber;
const int SrlObject::kObjectFieldNumber;
#endif  // !_MSC_VER

SrlObject::SrlObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlObject::InitAsDefaultInstance() {
}

SrlObject::SrlObject(const SrlObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlObject::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlObject::~SrlObject() {
  SharedDtor();
}

void SrlObject::SharedDtor() {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    delete object_;
  }
  if (this != default_instance_) {
  }
}

void SrlObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlObject_descriptor_;
}

const SrlObject& SrlObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SrlObject* SrlObject::default_instance_ = NULL;

SrlObject* SrlObject::New() const {
  return new SrlObject;
}

void SrlObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_object()) {
      if (object_ != &::google::protobuf::internal::kEmptyString) {
        object_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.sketch.SrlObject.ObjectType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::sketch::SrlObject_ObjectType_IsValid(value)) {
            set_type(static_cast< ::protobuf::srl::sketch::SrlObject_ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // required bytes object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.sketch.SrlObject.ObjectType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bytes object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.sketch.SrlObject.ObjectType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bytes object = 2;
  if (has_object()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.sketch.SrlObject.ObjectType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bytes object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlObject::MergeFrom(const SrlObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_object()) {
      set_object(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlObject::CopyFrom(const SrlObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SrlObject::Swap(SrlObject* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlObject_descriptor_;
  metadata.reflection = SrlObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlShape::kIdFieldNumber;
const int SrlShape::kTimeFieldNumber;
const int SrlShape::kNameFieldNumber;
const int SrlShape::kIsUserCreatedFieldNumber;
const int SrlShape::kInterpretationsFieldNumber;
const int SrlShape::kSubComponentsFieldNumber;
#endif  // !_MSC_VER

SrlShape::SrlShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlShape::InitAsDefaultInstance() {
}

SrlShape::SrlShape(const SrlShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlShape::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isusercreated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlShape::~SrlShape() {
  SharedDtor();
}

void SrlShape::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SrlShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlShape_descriptor_;
}

const SrlShape& SrlShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SrlShape* SrlShape::default_instance_ = NULL;

SrlShape* SrlShape::New() const {
  return new SrlShape;
}

void SrlShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    isusercreated_ = false;
  }
  interpretations_.Clear();
  subcomponents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isUserCreated;
        break;
      }

      // optional bool isUserCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUserCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusercreated_)));
          set_has_isusercreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_interpretations;
        break;
      }

      // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpretations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interpretations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_interpretations;
        if (input->ExpectTag(50)) goto parse_subComponents;
        break;
      }

      // repeated .protobuf.srl.sketch.SrlObject subComponents = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subComponents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subcomponents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subComponents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional bool isUserCreated = 4;
  if (has_isusercreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isusercreated(), output);
  }

  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  for (int i = 0; i < this->interpretations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->interpretations(i), output);
  }

  // repeated .protobuf.srl.sketch.SrlObject subComponents = 6;
  for (int i = 0; i < this->subcomponents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subcomponents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool isUserCreated = 4;
  if (has_isusercreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isusercreated(), target);
  }

  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  for (int i = 0; i < this->interpretations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->interpretations(i), target);
  }

  // repeated .protobuf.srl.sketch.SrlObject subComponents = 6;
  for (int i = 0; i < this->subcomponents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subcomponents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isUserCreated = 4;
    if (has_isusercreated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  total_size += 1 * this->interpretations_size();
  for (int i = 0; i < this->interpretations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interpretations(i));
  }

  // repeated .protobuf.srl.sketch.SrlObject subComponents = 6;
  total_size += 1 * this->subcomponents_size();
  for (int i = 0; i < this->subcomponents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subcomponents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlShape::MergeFrom(const SrlShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  interpretations_.MergeFrom(from.interpretations_);
  subcomponents_.MergeFrom(from.subcomponents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isusercreated()) {
      set_isusercreated(from.isusercreated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlShape::CopyFrom(const SrlShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < interpretations_size(); i++) {
    if (!this->interpretations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subcomponents_size(); i++) {
    if (!this->subcomponents(i).IsInitialized()) return false;
  }
  return true;
}

void SrlShape::Swap(SrlShape* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(isusercreated_, other->isusercreated_);
    interpretations_.Swap(&other->interpretations_);
    subcomponents_.Swap(&other->subcomponents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlShape_descriptor_;
  metadata.reflection = SrlShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlStroke::kIdFieldNumber;
const int SrlStroke::kTimeFieldNumber;
const int SrlStroke::kNameFieldNumber;
const int SrlStroke::kPointsFieldNumber;
#endif  // !_MSC_VER

SrlStroke::SrlStroke()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlStroke::InitAsDefaultInstance() {
}

SrlStroke::SrlStroke(const SrlStroke& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlStroke::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlStroke::~SrlStroke() {
  SharedDtor();
}

void SrlStroke::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SrlStroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlStroke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlStroke_descriptor_;
}

const SrlStroke& SrlStroke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SrlStroke* SrlStroke::default_instance_ = NULL;

SrlStroke* SrlStroke::New() const {
  return new SrlStroke;
}

void SrlStroke::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlStroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .protobuf.srl.sketch.SrlPoint points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlStroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .protobuf.srl.sketch.SrlPoint points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlStroke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .protobuf.srl.sketch.SrlPoint points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlStroke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .protobuf.srl.sketch.SrlPoint points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlStroke::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlStroke* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlStroke*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlStroke::MergeFrom(const SrlStroke& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlStroke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlStroke::CopyFrom(const SrlStroke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlStroke::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void SrlStroke::Swap(SrlStroke* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlStroke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlStroke_descriptor_;
  metadata.reflection = SrlStroke_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlPoint::kIdFieldNumber;
const int SrlPoint::kTimeFieldNumber;
const int SrlPoint::kNameFieldNumber;
const int SrlPoint::kXFieldNumber;
const int SrlPoint::kYFieldNumber;
const int SrlPoint::kPressureFieldNumber;
const int SrlPoint::kSizeFieldNumber;
const int SrlPoint::kSpeedFieldNumber;
#endif  // !_MSC_VER

SrlPoint::SrlPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlPoint::InitAsDefaultInstance() {
}

SrlPoint::SrlPoint(const SrlPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  pressure_ = 0;
  size_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlPoint::~SrlPoint() {
  SharedDtor();
}

void SrlPoint::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SrlPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlPoint_descriptor_;
}

const SrlPoint& SrlPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SrlPoint* SrlPoint::default_instance_ = NULL;

SrlPoint* SrlPoint::New() const {
  return new SrlPoint;
}

void SrlPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    pressure_ = 0;
    size_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // required double x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // required double y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_pressure;
        break;
      }

      // optional double pressure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_size;
        break;
      }

      // optional double size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_speed;
        break;
      }

      // optional double speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // required double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // optional double pressure = 6;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pressure(), output);
  }

  // optional double size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->size(), output);
  }

  // optional double speed = 8;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // required double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // optional double pressure = 6;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pressure(), target);
  }

  // optional double size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->size(), target);
  }

  // optional double speed = 8;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double pressure = 6;
    if (has_pressure()) {
      total_size += 1 + 8;
    }

    // optional double size = 7;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // optional double speed = 8;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlPoint::MergeFrom(const SrlPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlPoint::CopyFrom(const SrlPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void SrlPoint::Swap(SrlPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(pressure_, other->pressure_);
    std::swap(size_, other->size_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlPoint_descriptor_;
  metadata.reflection = SrlPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Interpretation::kNameFieldNumber;
const int Interpretation::kConfidenceFieldNumber;
const int Interpretation::kComplexityFieldNumber;
#endif  // !_MSC_VER

Interpretation::Interpretation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Interpretation::InitAsDefaultInstance() {
}

Interpretation::Interpretation(const Interpretation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Interpretation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  confidence_ = 0;
  complexity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Interpretation::~Interpretation() {
  SharedDtor();
}

void Interpretation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Interpretation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Interpretation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Interpretation_descriptor_;
}

const Interpretation& Interpretation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

Interpretation* Interpretation::default_instance_ = NULL;

Interpretation* Interpretation::New() const {
  return new Interpretation;
}

void Interpretation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    confidence_ = 0;
    complexity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Interpretation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_confidence;
        break;
      }

      // required double confidence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_complexity;
        break;
      }

      // optional double complexity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complexity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &complexity_)));
          set_has_complexity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Interpretation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double confidence = 2;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // optional double complexity = 3;
  if (has_complexity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->complexity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Interpretation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double confidence = 2;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // optional double complexity = 3;
  if (has_complexity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->complexity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Interpretation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double confidence = 2;
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional double complexity = 3;
    if (has_complexity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Interpretation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Interpretation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Interpretation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Interpretation::MergeFrom(const Interpretation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_complexity()) {
      set_complexity(from.complexity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Interpretation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interpretation::CopyFrom(const Interpretation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interpretation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Interpretation::Swap(Interpretation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(confidence_, other->confidence_);
    std::swap(complexity_, other->complexity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Interpretation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Interpretation_descriptor_;
  metadata.reflection = Interpretation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sketch
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
