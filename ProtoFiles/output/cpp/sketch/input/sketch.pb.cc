// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/sketch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/sketch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace sketch {

namespace {

const ::google::protobuf::Descriptor* SRL_Sketch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Sketch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Shape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Shape_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Stroke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Stroke_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Interpretation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Interpretation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fsketch_2eproto() {
  protobuf_AddDesc_input_2fsketch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/sketch.proto");
  GOOGLE_CHECK(file != NULL);
  SRL_Sketch_descriptor_ = file->message_type(0);
  static const int SRL_Sketch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, sketch_),
  };
  SRL_Sketch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Sketch_descriptor_,
      SRL_Sketch::default_instance_,
      SRL_Sketch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Sketch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Sketch));
  SRL_Shape_descriptor_ = file->message_type(1);
  static const int SRL_Shape_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, isusercreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, interpretations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, strokes_),
  };
  SRL_Shape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Shape_descriptor_,
      SRL_Shape::default_instance_,
      SRL_Shape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Shape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Shape));
  SRL_Stroke_descriptor_ = file->message_type(2);
  static const int SRL_Stroke_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, points_),
  };
  SRL_Stroke_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Stroke_descriptor_,
      SRL_Stroke::default_instance_,
      SRL_Stroke_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Stroke, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Stroke));
  SRL_Point_descriptor_ = file->message_type(3);
  static const int SRL_Point_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, speed_),
  };
  SRL_Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Point_descriptor_,
      SRL_Point::default_instance_,
      SRL_Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Point));
  Interpretation_descriptor_ = file->message_type(4);
  static const int Interpretation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, complexity_),
  };
  Interpretation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Interpretation_descriptor_,
      Interpretation::default_instance_,
      Interpretation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Interpretation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Interpretation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fsketch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Sketch_descriptor_, &SRL_Sketch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Shape_descriptor_, &SRL_Shape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Stroke_descriptor_, &SRL_Stroke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Point_descriptor_, &SRL_Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Interpretation_descriptor_, &Interpretation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fsketch_2eproto() {
  delete SRL_Sketch::default_instance_;
  delete SRL_Sketch_reflection_;
  delete SRL_Shape::default_instance_;
  delete SRL_Shape_reflection_;
  delete SRL_Stroke::default_instance_;
  delete SRL_Stroke_reflection_;
  delete SRL_Point::default_instance_;
  delete SRL_Point_reflection_;
  delete Interpretation::default_instance_;
  delete Interpretation_reflection_;
}

void protobuf_AddDesc_input_2fsketch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022input/sketch.proto\022\023protobuf.srl.sketc"
    "h\"\211\001\n\nSRL_Sketch\022\020\n\010courseId\030\001 \001(\004\022\024\n\014as"
    "signmentId\030\002 \001(\004\022\021\n\tproblemId\030\003 \001(\004\022\020\n\010d"
    "omainId\030\004 \001(\t\022.\n\006sketch\030\005 \003(\0132\036.protobuf"
    ".srl.sketch.SRL_Shape\"\353\001\n\tSRL_Shape\022\n\n\002i"
    "d\030\001 \002(\t\022\014\n\004time\030\002 \002(\004\022\014\n\004name\030\003 \001(\t\022\025\n\ri"
    "sUserCreated\030\004 \001(\010\022<\n\017interpretations\030\005 "
    "\003(\0132#.protobuf.srl.sketch.Interpretation"
    "\022/\n\007objects\030\006 \003(\0132\036.protobuf.srl.sketch."
    "SRL_Shape\0220\n\007strokes\030\007 \003(\0132\037.protobuf.sr"
    "l.sketch.SRL_Stroke\"d\n\nSRL_Stroke\022\n\n\002id\030"
    "\001 \002(\t\022\014\n\004time\030\002 \002(\004\022\014\n\004name\030\003 \001(\t\022.\n\006poi"
    "nts\030\004 \003(\0132\036.protobuf.srl.sketch.SRL_Poin"
    "t\"x\n\tSRL_Point\022\n\n\002id\030\001 \002(\t\022\014\n\004time\030\002 \002(\004"
    "\022\014\n\004name\030\003 \001(\t\022\t\n\001x\030\004 \002(\001\022\t\n\001y\030\005 \002(\001\022\020\n\010"
    "pressure\030\006 \001(\001\022\014\n\004size\030\007 \001(\001\022\r\n\005speed\030\010 "
    "\001(\001\"F\n\016Interpretation\022\014\n\004name\030\001 \002(\t\022\022\n\nc"
    "onfidence\030\002 \002(\001\022\022\n\ncomplexity\030\003 \001(\001", 715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/sketch.proto", &protobuf_RegisterTypes);
  SRL_Sketch::default_instance_ = new SRL_Sketch();
  SRL_Shape::default_instance_ = new SRL_Shape();
  SRL_Stroke::default_instance_ = new SRL_Stroke();
  SRL_Point::default_instance_ = new SRL_Point();
  Interpretation::default_instance_ = new Interpretation();
  SRL_Sketch::default_instance_->InitAsDefaultInstance();
  SRL_Shape::default_instance_->InitAsDefaultInstance();
  SRL_Stroke::default_instance_->InitAsDefaultInstance();
  SRL_Point::default_instance_->InitAsDefaultInstance();
  Interpretation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fsketch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fsketch_2eproto {
  StaticDescriptorInitializer_input_2fsketch_2eproto() {
    protobuf_AddDesc_input_2fsketch_2eproto();
  }
} static_descriptor_initializer_input_2fsketch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SRL_Sketch::kCourseIdFieldNumber;
const int SRL_Sketch::kAssignmentIdFieldNumber;
const int SRL_Sketch::kProblemIdFieldNumber;
const int SRL_Sketch::kDomainIdFieldNumber;
const int SRL_Sketch::kSketchFieldNumber;
#endif  // !_MSC_VER

SRL_Sketch::SRL_Sketch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Sketch::InitAsDefaultInstance() {
}

SRL_Sketch::SRL_Sketch(const SRL_Sketch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Sketch::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = GOOGLE_ULONGLONG(0);
  assignmentid_ = GOOGLE_ULONGLONG(0);
  problemid_ = GOOGLE_ULONGLONG(0);
  domainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Sketch::~SRL_Sketch() {
  SharedDtor();
}

void SRL_Sketch::SharedDtor() {
  if (domainid_ != &::google::protobuf::internal::kEmptyString) {
    delete domainid_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Sketch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Sketch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Sketch_descriptor_;
}

const SRL_Sketch& SRL_Sketch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SRL_Sketch* SRL_Sketch::default_instance_ = NULL;

SRL_Sketch* SRL_Sketch::New() const {
  return new SRL_Sketch;
}

void SRL_Sketch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    courseid_ = GOOGLE_ULONGLONG(0);
    assignmentid_ = GOOGLE_ULONGLONG(0);
    problemid_ = GOOGLE_ULONGLONG(0);
    if (has_domainid()) {
      if (domainid_ != &::google::protobuf::internal::kEmptyString) {
        domainid_->clear();
      }
    }
  }
  sketch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Sketch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &courseid_)));
          set_has_courseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assignmentId;
        break;
      }

      // optional uint64 assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assignmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignmentid_)));
          set_has_assignmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_problemId;
        break;
      }

      // optional uint64 problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_problemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &problemid_)));
          set_has_problemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_domainId;
        break;
      }

      // optional string domainId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domainId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domainid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domainid().data(), this->domainid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sketch;
        break;
      }

      // repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sketch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sketch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Sketch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->courseid(), output);
  }

  // optional uint64 assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->assignmentid(), output);
  }

  // optional uint64 problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->problemid(), output);
  }

  // optional string domainId = 4;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainid().data(), this->domainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->domainid(), output);
  }

  // repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
  for (int i = 0; i < this->sketch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sketch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Sketch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 courseId = 1;
  if (has_courseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->courseid(), target);
  }

  // optional uint64 assignmentId = 2;
  if (has_assignmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->assignmentid(), target);
  }

  // optional uint64 problemId = 3;
  if (has_problemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->problemid(), target);
  }

  // optional string domainId = 4;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domainid().data(), this->domainid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domainid(), target);
  }

  // repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
  for (int i = 0; i < this->sketch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sketch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Sketch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->courseid());
    }

    // optional uint64 assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignmentid());
    }

    // optional uint64 problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->problemid());
    }

    // optional string domainId = 4;
    if (has_domainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domainid());
    }

  }
  // repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
  total_size += 1 * this->sketch_size();
  for (int i = 0; i < this->sketch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sketch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Sketch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Sketch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Sketch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Sketch::MergeFrom(const SRL_Sketch& from) {
  GOOGLE_CHECK_NE(&from, this);
  sketch_.MergeFrom(from.sketch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Sketch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Sketch::CopyFrom(const SRL_Sketch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Sketch::IsInitialized() const {

  for (int i = 0; i < sketch_size(); i++) {
    if (!this->sketch(i).IsInitialized()) return false;
  }
  return true;
}

void SRL_Sketch::Swap(SRL_Sketch* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(domainid_, other->domainid_);
    sketch_.Swap(&other->sketch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Sketch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Sketch_descriptor_;
  metadata.reflection = SRL_Sketch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Shape::kIdFieldNumber;
const int SRL_Shape::kTimeFieldNumber;
const int SRL_Shape::kNameFieldNumber;
const int SRL_Shape::kIsUserCreatedFieldNumber;
const int SRL_Shape::kInterpretationsFieldNumber;
const int SRL_Shape::kObjectsFieldNumber;
const int SRL_Shape::kStrokesFieldNumber;
#endif  // !_MSC_VER

SRL_Shape::SRL_Shape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Shape::InitAsDefaultInstance() {
}

SRL_Shape::SRL_Shape(const SRL_Shape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Shape::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isusercreated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Shape::~SRL_Shape() {
  SharedDtor();
}

void SRL_Shape::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Shape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Shape_descriptor_;
}

const SRL_Shape& SRL_Shape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SRL_Shape* SRL_Shape::default_instance_ = NULL;

SRL_Shape* SRL_Shape::New() const {
  return new SRL_Shape;
}

void SRL_Shape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    isusercreated_ = false;
  }
  interpretations_.Clear();
  objects_.Clear();
  strokes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isUserCreated;
        break;
      }

      // optional bool isUserCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUserCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusercreated_)));
          set_has_isusercreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_interpretations;
        break;
      }

      // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpretations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interpretations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_interpretations;
        if (input->ExpectTag(50)) goto parse_objects;
        break;
      }

      // repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_objects;
        if (input->ExpectTag(58)) goto parse_strokes;
        break;
      }

      // repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strokes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strokes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strokes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional bool isUserCreated = 4;
  if (has_isusercreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isusercreated(), output);
  }

  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  for (int i = 0; i < this->interpretations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->interpretations(i), output);
  }

  // repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->objects(i), output);
  }

  // repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
  for (int i = 0; i < this->strokes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->strokes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Shape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool isUserCreated = 4;
  if (has_isusercreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isusercreated(), target);
  }

  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  for (int i = 0; i < this->interpretations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->interpretations(i), target);
  }

  // repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->objects(i), target);
  }

  // repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
  for (int i = 0; i < this->strokes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->strokes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Shape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool isUserCreated = 4;
    if (has_isusercreated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  total_size += 1 * this->interpretations_size();
  for (int i = 0; i < this->interpretations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interpretations(i));
  }

  // repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
  total_size += 1 * this->strokes_size();
  for (int i = 0; i < this->strokes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strokes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Shape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Shape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Shape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Shape::MergeFrom(const SRL_Shape& from) {
  GOOGLE_CHECK_NE(&from, this);
  interpretations_.MergeFrom(from.interpretations_);
  objects_.MergeFrom(from.objects_);
  strokes_.MergeFrom(from.strokes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isusercreated()) {
      set_isusercreated(from.isusercreated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Shape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Shape::CopyFrom(const SRL_Shape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Shape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < interpretations_size(); i++) {
    if (!this->interpretations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  for (int i = 0; i < strokes_size(); i++) {
    if (!this->strokes(i).IsInitialized()) return false;
  }
  return true;
}

void SRL_Shape::Swap(SRL_Shape* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(isusercreated_, other->isusercreated_);
    interpretations_.Swap(&other->interpretations_);
    objects_.Swap(&other->objects_);
    strokes_.Swap(&other->strokes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Shape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Shape_descriptor_;
  metadata.reflection = SRL_Shape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Stroke::kIdFieldNumber;
const int SRL_Stroke::kTimeFieldNumber;
const int SRL_Stroke::kNameFieldNumber;
const int SRL_Stroke::kPointsFieldNumber;
#endif  // !_MSC_VER

SRL_Stroke::SRL_Stroke()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Stroke::InitAsDefaultInstance() {
}

SRL_Stroke::SRL_Stroke(const SRL_Stroke& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Stroke::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Stroke::~SRL_Stroke() {
  SharedDtor();
}

void SRL_Stroke::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Stroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Stroke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Stroke_descriptor_;
}

const SRL_Stroke& SRL_Stroke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SRL_Stroke* SRL_Stroke::default_instance_ = NULL;

SRL_Stroke* SRL_Stroke::New() const {
  return new SRL_Stroke;
}

void SRL_Stroke::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Stroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .protobuf.srl.sketch.SRL_Point points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Stroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .protobuf.srl.sketch.SRL_Point points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Stroke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .protobuf.srl.sketch.SRL_Point points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Stroke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .protobuf.srl.sketch.SRL_Point points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Stroke::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Stroke* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Stroke*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Stroke::MergeFrom(const SRL_Stroke& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Stroke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Stroke::CopyFrom(const SRL_Stroke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Stroke::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void SRL_Stroke::Swap(SRL_Stroke* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Stroke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Stroke_descriptor_;
  metadata.reflection = SRL_Stroke_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Point::kIdFieldNumber;
const int SRL_Point::kTimeFieldNumber;
const int SRL_Point::kNameFieldNumber;
const int SRL_Point::kXFieldNumber;
const int SRL_Point::kYFieldNumber;
const int SRL_Point::kPressureFieldNumber;
const int SRL_Point::kSizeFieldNumber;
const int SRL_Point::kSpeedFieldNumber;
#endif  // !_MSC_VER

SRL_Point::SRL_Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Point::InitAsDefaultInstance() {
}

SRL_Point::SRL_Point(const SRL_Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Point::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  pressure_ = 0;
  size_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Point::~SRL_Point() {
  SharedDtor();
}

void SRL_Point::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Point_descriptor_;
}

const SRL_Point& SRL_Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

SRL_Point* SRL_Point::default_instance_ = NULL;

SRL_Point* SRL_Point::New() const {
  return new SRL_Point;
}

void SRL_Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    pressure_ = 0;
    size_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_x;
        break;
      }

      // required double x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_y;
        break;
      }

      // required double y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_pressure;
        break;
      }

      // optional double pressure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_size;
        break;
      }

      // optional double size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_speed;
        break;
      }

      // optional double speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required double x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // required double y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // optional double pressure = 6;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pressure(), output);
  }

  // optional double size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->size(), output);
  }

  // optional double speed = 8;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required double x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x(), target);
  }

  // required double y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y(), target);
  }

  // optional double pressure = 6;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pressure(), target);
  }

  // optional double size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->size(), target);
  }

  // optional double speed = 8;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double x = 4;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 5;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double pressure = 6;
    if (has_pressure()) {
      total_size += 1 + 8;
    }

    // optional double size = 7;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // optional double speed = 8;
    if (has_speed()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Point::MergeFrom(const SRL_Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Point::CopyFrom(const SRL_Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void SRL_Point::Swap(SRL_Point* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(pressure_, other->pressure_);
    std::swap(size_, other->size_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Point_descriptor_;
  metadata.reflection = SRL_Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Interpretation::kNameFieldNumber;
const int Interpretation::kConfidenceFieldNumber;
const int Interpretation::kComplexityFieldNumber;
#endif  // !_MSC_VER

Interpretation::Interpretation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Interpretation::InitAsDefaultInstance() {
}

Interpretation::Interpretation(const Interpretation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Interpretation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  confidence_ = 0;
  complexity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Interpretation::~Interpretation() {
  SharedDtor();
}

void Interpretation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Interpretation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Interpretation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Interpretation_descriptor_;
}

const Interpretation& Interpretation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsketch_2eproto();
  return *default_instance_;
}

Interpretation* Interpretation::default_instance_ = NULL;

Interpretation* Interpretation::New() const {
  return new Interpretation;
}

void Interpretation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    confidence_ = 0;
    complexity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Interpretation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_confidence;
        break;
      }

      // required double confidence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_complexity;
        break;
      }

      // optional double complexity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complexity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &complexity_)));
          set_has_complexity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Interpretation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double confidence = 2;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  // optional double complexity = 3;
  if (has_complexity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->complexity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Interpretation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double confidence = 2;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  // optional double complexity = 3;
  if (has_complexity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->complexity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Interpretation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double confidence = 2;
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional double complexity = 3;
    if (has_complexity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Interpretation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Interpretation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Interpretation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Interpretation::MergeFrom(const Interpretation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_complexity()) {
      set_complexity(from.complexity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Interpretation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interpretation::CopyFrom(const Interpretation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interpretation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Interpretation::Swap(Interpretation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(confidence_, other->confidence_);
    std::swap(complexity_, other->complexity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Interpretation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Interpretation_descriptor_;
  metadata.reflection = Interpretation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sketch
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
