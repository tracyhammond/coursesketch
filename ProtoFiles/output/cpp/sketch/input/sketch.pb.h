// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/sketch.proto

#ifndef PROTOBUF_input_2fsketch_2eproto__INCLUDED
#define PROTOBUF_input_2fsketch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace sketch {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fsketch_2eproto();
void protobuf_AssignDesc_input_2fsketch_2eproto();
void protobuf_ShutdownFile_input_2fsketch_2eproto();

class SRL_Sketch;
class SRL_Shape;
class SRL_Stroke;
class SRL_Point;
class Interpretation;

// ===================================================================

class SRL_Sketch : public ::google::protobuf::Message {
 public:
  SRL_Sketch();
  virtual ~SRL_Sketch();

  SRL_Sketch(const SRL_Sketch& from);

  inline SRL_Sketch& operator=(const SRL_Sketch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRL_Sketch& default_instance();

  void Swap(SRL_Sketch* other);

  // implements Message ----------------------------------------------

  SRL_Sketch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRL_Sketch& from);
  void MergeFrom(const SRL_Sketch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 courseId = 1;
  inline bool has_courseid() const;
  inline void clear_courseid();
  static const int kCourseIdFieldNumber = 1;
  inline ::google::protobuf::uint64 courseid() const;
  inline void set_courseid(::google::protobuf::uint64 value);

  // optional uint64 assignmentId = 2;
  inline bool has_assignmentid() const;
  inline void clear_assignmentid();
  static const int kAssignmentIdFieldNumber = 2;
  inline ::google::protobuf::uint64 assignmentid() const;
  inline void set_assignmentid(::google::protobuf::uint64 value);

  // optional uint64 problemId = 3;
  inline bool has_problemid() const;
  inline void clear_problemid();
  static const int kProblemIdFieldNumber = 3;
  inline ::google::protobuf::uint64 problemid() const;
  inline void set_problemid(::google::protobuf::uint64 value);

  // optional string domainId = 4;
  inline bool has_domainid() const;
  inline void clear_domainid();
  static const int kDomainIdFieldNumber = 4;
  inline const ::std::string& domainid() const;
  inline void set_domainid(const ::std::string& value);
  inline void set_domainid(const char* value);
  inline void set_domainid(const char* value, size_t size);
  inline ::std::string* mutable_domainid();
  inline ::std::string* release_domainid();
  inline void set_allocated_domainid(::std::string* domainid);

  // repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
  inline int sketch_size() const;
  inline void clear_sketch();
  static const int kSketchFieldNumber = 5;
  inline const ::protobuf::srl::sketch::SRL_Shape& sketch(int index) const;
  inline ::protobuf::srl::sketch::SRL_Shape* mutable_sketch(int index);
  inline ::protobuf::srl::sketch::SRL_Shape* add_sketch();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >&
      sketch() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >*
      mutable_sketch();

  // @@protoc_insertion_point(class_scope:protobuf.srl.sketch.SRL_Sketch)
 private:
  inline void set_has_courseid();
  inline void clear_has_courseid();
  inline void set_has_assignmentid();
  inline void clear_has_assignmentid();
  inline void set_has_problemid();
  inline void clear_has_problemid();
  inline void set_has_domainid();
  inline void clear_has_domainid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 courseid_;
  ::google::protobuf::uint64 assignmentid_;
  ::google::protobuf::uint64 problemid_;
  ::std::string* domainid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape > sketch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsketch_2eproto();
  friend void protobuf_AssignDesc_input_2fsketch_2eproto();
  friend void protobuf_ShutdownFile_input_2fsketch_2eproto();

  void InitAsDefaultInstance();
  static SRL_Sketch* default_instance_;
};
// -------------------------------------------------------------------

class SRL_Shape : public ::google::protobuf::Message {
 public:
  SRL_Shape();
  virtual ~SRL_Shape();

  SRL_Shape(const SRL_Shape& from);

  inline SRL_Shape& operator=(const SRL_Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRL_Shape& default_instance();

  void Swap(SRL_Shape* other);

  // implements Message ----------------------------------------------

  SRL_Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRL_Shape& from);
  void MergeFrom(const SRL_Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isUserCreated = 4;
  inline bool has_isusercreated() const;
  inline void clear_isusercreated();
  static const int kIsUserCreatedFieldNumber = 4;
  inline bool isusercreated() const;
  inline void set_isusercreated(bool value);

  // repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
  inline int interpretations_size() const;
  inline void clear_interpretations();
  static const int kInterpretationsFieldNumber = 5;
  inline const ::protobuf::srl::sketch::Interpretation& interpretations(int index) const;
  inline ::protobuf::srl::sketch::Interpretation* mutable_interpretations(int index);
  inline ::protobuf::srl::sketch::Interpretation* add_interpretations();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::Interpretation >&
      interpretations() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::Interpretation >*
      mutable_interpretations();

  // repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 6;
  inline const ::protobuf::srl::sketch::SRL_Shape& objects(int index) const;
  inline ::protobuf::srl::sketch::SRL_Shape* mutable_objects(int index);
  inline ::protobuf::srl::sketch::SRL_Shape* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >*
      mutable_objects();

  // repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
  inline int strokes_size() const;
  inline void clear_strokes();
  static const int kStrokesFieldNumber = 7;
  inline const ::protobuf::srl::sketch::SRL_Stroke& strokes(int index) const;
  inline ::protobuf::srl::sketch::SRL_Stroke* mutable_strokes(int index);
  inline ::protobuf::srl::sketch::SRL_Stroke* add_strokes();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Stroke >&
      strokes() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Stroke >*
      mutable_strokes();

  // @@protoc_insertion_point(class_scope:protobuf.srl.sketch.SRL_Shape)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isusercreated();
  inline void clear_has_isusercreated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 time_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::Interpretation > interpretations_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape > objects_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Stroke > strokes_;
  bool isusercreated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsketch_2eproto();
  friend void protobuf_AssignDesc_input_2fsketch_2eproto();
  friend void protobuf_ShutdownFile_input_2fsketch_2eproto();

  void InitAsDefaultInstance();
  static SRL_Shape* default_instance_;
};
// -------------------------------------------------------------------

class SRL_Stroke : public ::google::protobuf::Message {
 public:
  SRL_Stroke();
  virtual ~SRL_Stroke();

  SRL_Stroke(const SRL_Stroke& from);

  inline SRL_Stroke& operator=(const SRL_Stroke& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRL_Stroke& default_instance();

  void Swap(SRL_Stroke* other);

  // implements Message ----------------------------------------------

  SRL_Stroke* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRL_Stroke& from);
  void MergeFrom(const SRL_Stroke& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .protobuf.srl.sketch.SRL_Point points = 4;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 4;
  inline const ::protobuf::srl::sketch::SRL_Point& points(int index) const;
  inline ::protobuf::srl::sketch::SRL_Point* mutable_points(int index);
  inline ::protobuf::srl::sketch::SRL_Point* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Point >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Point >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:protobuf.srl.sketch.SRL_Stroke)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 time_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Point > points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsketch_2eproto();
  friend void protobuf_AssignDesc_input_2fsketch_2eproto();
  friend void protobuf_ShutdownFile_input_2fsketch_2eproto();

  void InitAsDefaultInstance();
  static SRL_Stroke* default_instance_;
};
// -------------------------------------------------------------------

class SRL_Point : public ::google::protobuf::Message {
 public:
  SRL_Point();
  virtual ~SRL_Point();

  SRL_Point(const SRL_Point& from);

  inline SRL_Point& operator=(const SRL_Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRL_Point& default_instance();

  void Swap(SRL_Point* other);

  // implements Message ----------------------------------------------

  SRL_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRL_Point& from);
  void MergeFrom(const SRL_Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline double y() const;
  inline void set_y(double value);

  // optional double pressure = 6;
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 6;
  inline double pressure() const;
  inline void set_pressure(double value);

  // optional double size = 7;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 7;
  inline double size() const;
  inline void set_size(double value);

  // optional double speed = 8;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 8;
  inline double speed() const;
  inline void set_speed(double value);

  // @@protoc_insertion_point(class_scope:protobuf.srl.sketch.SRL_Point)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 time_;
  ::std::string* name_;
  double x_;
  double y_;
  double pressure_;
  double size_;
  double speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsketch_2eproto();
  friend void protobuf_AssignDesc_input_2fsketch_2eproto();
  friend void protobuf_ShutdownFile_input_2fsketch_2eproto();

  void InitAsDefaultInstance();
  static SRL_Point* default_instance_;
};
// -------------------------------------------------------------------

class Interpretation : public ::google::protobuf::Message {
 public:
  Interpretation();
  virtual ~Interpretation();

  Interpretation(const Interpretation& from);

  inline Interpretation& operator=(const Interpretation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Interpretation& default_instance();

  void Swap(Interpretation* other);

  // implements Message ----------------------------------------------

  Interpretation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Interpretation& from);
  void MergeFrom(const Interpretation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double confidence = 2;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  inline double confidence() const;
  inline void set_confidence(double value);

  // optional double complexity = 3;
  inline bool has_complexity() const;
  inline void clear_complexity();
  static const int kComplexityFieldNumber = 3;
  inline double complexity() const;
  inline void set_complexity(double value);

  // @@protoc_insertion_point(class_scope:protobuf.srl.sketch.Interpretation)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_complexity();
  inline void clear_has_complexity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double confidence_;
  double complexity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsketch_2eproto();
  friend void protobuf_AssignDesc_input_2fsketch_2eproto();
  friend void protobuf_ShutdownFile_input_2fsketch_2eproto();

  void InitAsDefaultInstance();
  static Interpretation* default_instance_;
};
// ===================================================================


// ===================================================================

// SRL_Sketch

// optional uint64 courseId = 1;
inline bool SRL_Sketch::has_courseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRL_Sketch::set_has_courseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRL_Sketch::clear_has_courseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRL_Sketch::clear_courseid() {
  courseid_ = GOOGLE_ULONGLONG(0);
  clear_has_courseid();
}
inline ::google::protobuf::uint64 SRL_Sketch::courseid() const {
  return courseid_;
}
inline void SRL_Sketch::set_courseid(::google::protobuf::uint64 value) {
  set_has_courseid();
  courseid_ = value;
}

// optional uint64 assignmentId = 2;
inline bool SRL_Sketch::has_assignmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRL_Sketch::set_has_assignmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRL_Sketch::clear_has_assignmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRL_Sketch::clear_assignmentid() {
  assignmentid_ = GOOGLE_ULONGLONG(0);
  clear_has_assignmentid();
}
inline ::google::protobuf::uint64 SRL_Sketch::assignmentid() const {
  return assignmentid_;
}
inline void SRL_Sketch::set_assignmentid(::google::protobuf::uint64 value) {
  set_has_assignmentid();
  assignmentid_ = value;
}

// optional uint64 problemId = 3;
inline bool SRL_Sketch::has_problemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRL_Sketch::set_has_problemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRL_Sketch::clear_has_problemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRL_Sketch::clear_problemid() {
  problemid_ = GOOGLE_ULONGLONG(0);
  clear_has_problemid();
}
inline ::google::protobuf::uint64 SRL_Sketch::problemid() const {
  return problemid_;
}
inline void SRL_Sketch::set_problemid(::google::protobuf::uint64 value) {
  set_has_problemid();
  problemid_ = value;
}

// optional string domainId = 4;
inline bool SRL_Sketch::has_domainid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SRL_Sketch::set_has_domainid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SRL_Sketch::clear_has_domainid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SRL_Sketch::clear_domainid() {
  if (domainid_ != &::google::protobuf::internal::kEmptyString) {
    domainid_->clear();
  }
  clear_has_domainid();
}
inline const ::std::string& SRL_Sketch::domainid() const {
  return *domainid_;
}
inline void SRL_Sketch::set_domainid(const ::std::string& value) {
  set_has_domainid();
  if (domainid_ == &::google::protobuf::internal::kEmptyString) {
    domainid_ = new ::std::string;
  }
  domainid_->assign(value);
}
inline void SRL_Sketch::set_domainid(const char* value) {
  set_has_domainid();
  if (domainid_ == &::google::protobuf::internal::kEmptyString) {
    domainid_ = new ::std::string;
  }
  domainid_->assign(value);
}
inline void SRL_Sketch::set_domainid(const char* value, size_t size) {
  set_has_domainid();
  if (domainid_ == &::google::protobuf::internal::kEmptyString) {
    domainid_ = new ::std::string;
  }
  domainid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Sketch::mutable_domainid() {
  set_has_domainid();
  if (domainid_ == &::google::protobuf::internal::kEmptyString) {
    domainid_ = new ::std::string;
  }
  return domainid_;
}
inline ::std::string* SRL_Sketch::release_domainid() {
  clear_has_domainid();
  if (domainid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domainid_;
    domainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Sketch::set_allocated_domainid(::std::string* domainid) {
  if (domainid_ != &::google::protobuf::internal::kEmptyString) {
    delete domainid_;
  }
  if (domainid) {
    set_has_domainid();
    domainid_ = domainid;
  } else {
    clear_has_domainid();
    domainid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protobuf.srl.sketch.SRL_Shape sketch = 5;
inline int SRL_Sketch::sketch_size() const {
  return sketch_.size();
}
inline void SRL_Sketch::clear_sketch() {
  sketch_.Clear();
}
inline const ::protobuf::srl::sketch::SRL_Shape& SRL_Sketch::sketch(int index) const {
  return sketch_.Get(index);
}
inline ::protobuf::srl::sketch::SRL_Shape* SRL_Sketch::mutable_sketch(int index) {
  return sketch_.Mutable(index);
}
inline ::protobuf::srl::sketch::SRL_Shape* SRL_Sketch::add_sketch() {
  return sketch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >&
SRL_Sketch::sketch() const {
  return sketch_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >*
SRL_Sketch::mutable_sketch() {
  return &sketch_;
}

// -------------------------------------------------------------------

// SRL_Shape

// required string id = 1;
inline bool SRL_Shape::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRL_Shape::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRL_Shape::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRL_Shape::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SRL_Shape::id() const {
  return *id_;
}
inline void SRL_Shape::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Shape::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Shape::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Shape::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SRL_Shape::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Shape::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 time = 2;
inline bool SRL_Shape::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRL_Shape::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRL_Shape::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRL_Shape::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SRL_Shape::time() const {
  return time_;
}
inline void SRL_Shape::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional string name = 3;
inline bool SRL_Shape::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRL_Shape::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRL_Shape::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRL_Shape::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SRL_Shape::name() const {
  return *name_;
}
inline void SRL_Shape::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Shape::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Shape::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Shape::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SRL_Shape::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Shape::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isUserCreated = 4;
inline bool SRL_Shape::has_isusercreated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SRL_Shape::set_has_isusercreated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SRL_Shape::clear_has_isusercreated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SRL_Shape::clear_isusercreated() {
  isusercreated_ = false;
  clear_has_isusercreated();
}
inline bool SRL_Shape::isusercreated() const {
  return isusercreated_;
}
inline void SRL_Shape::set_isusercreated(bool value) {
  set_has_isusercreated();
  isusercreated_ = value;
}

// repeated .protobuf.srl.sketch.Interpretation interpretations = 5;
inline int SRL_Shape::interpretations_size() const {
  return interpretations_.size();
}
inline void SRL_Shape::clear_interpretations() {
  interpretations_.Clear();
}
inline const ::protobuf::srl::sketch::Interpretation& SRL_Shape::interpretations(int index) const {
  return interpretations_.Get(index);
}
inline ::protobuf::srl::sketch::Interpretation* SRL_Shape::mutable_interpretations(int index) {
  return interpretations_.Mutable(index);
}
inline ::protobuf::srl::sketch::Interpretation* SRL_Shape::add_interpretations() {
  return interpretations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::Interpretation >&
SRL_Shape::interpretations() const {
  return interpretations_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::Interpretation >*
SRL_Shape::mutable_interpretations() {
  return &interpretations_;
}

// repeated .protobuf.srl.sketch.SRL_Shape objects = 6;
inline int SRL_Shape::objects_size() const {
  return objects_.size();
}
inline void SRL_Shape::clear_objects() {
  objects_.Clear();
}
inline const ::protobuf::srl::sketch::SRL_Shape& SRL_Shape::objects(int index) const {
  return objects_.Get(index);
}
inline ::protobuf::srl::sketch::SRL_Shape* SRL_Shape::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::protobuf::srl::sketch::SRL_Shape* SRL_Shape::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >&
SRL_Shape::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Shape >*
SRL_Shape::mutable_objects() {
  return &objects_;
}

// repeated .protobuf.srl.sketch.SRL_Stroke strokes = 7;
inline int SRL_Shape::strokes_size() const {
  return strokes_.size();
}
inline void SRL_Shape::clear_strokes() {
  strokes_.Clear();
}
inline const ::protobuf::srl::sketch::SRL_Stroke& SRL_Shape::strokes(int index) const {
  return strokes_.Get(index);
}
inline ::protobuf::srl::sketch::SRL_Stroke* SRL_Shape::mutable_strokes(int index) {
  return strokes_.Mutable(index);
}
inline ::protobuf::srl::sketch::SRL_Stroke* SRL_Shape::add_strokes() {
  return strokes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Stroke >&
SRL_Shape::strokes() const {
  return strokes_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Stroke >*
SRL_Shape::mutable_strokes() {
  return &strokes_;
}

// -------------------------------------------------------------------

// SRL_Stroke

// required string id = 1;
inline bool SRL_Stroke::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRL_Stroke::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRL_Stroke::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRL_Stroke::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SRL_Stroke::id() const {
  return *id_;
}
inline void SRL_Stroke::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Stroke::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Stroke::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Stroke::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SRL_Stroke::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Stroke::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 time = 2;
inline bool SRL_Stroke::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRL_Stroke::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRL_Stroke::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRL_Stroke::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SRL_Stroke::time() const {
  return time_;
}
inline void SRL_Stroke::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional string name = 3;
inline bool SRL_Stroke::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRL_Stroke::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRL_Stroke::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRL_Stroke::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SRL_Stroke::name() const {
  return *name_;
}
inline void SRL_Stroke::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Stroke::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Stroke::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Stroke::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SRL_Stroke::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Stroke::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protobuf.srl.sketch.SRL_Point points = 4;
inline int SRL_Stroke::points_size() const {
  return points_.size();
}
inline void SRL_Stroke::clear_points() {
  points_.Clear();
}
inline const ::protobuf::srl::sketch::SRL_Point& SRL_Stroke::points(int index) const {
  return points_.Get(index);
}
inline ::protobuf::srl::sketch::SRL_Point* SRL_Stroke::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::protobuf::srl::sketch::SRL_Point* SRL_Stroke::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Point >&
SRL_Stroke::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::sketch::SRL_Point >*
SRL_Stroke::mutable_points() {
  return &points_;
}

// -------------------------------------------------------------------

// SRL_Point

// required string id = 1;
inline bool SRL_Point::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRL_Point::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRL_Point::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRL_Point::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SRL_Point::id() const {
  return *id_;
}
inline void SRL_Point::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Point::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SRL_Point::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Point::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SRL_Point::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Point::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 time = 2;
inline bool SRL_Point::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRL_Point::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRL_Point::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRL_Point::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SRL_Point::time() const {
  return time_;
}
inline void SRL_Point::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional string name = 3;
inline bool SRL_Point::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRL_Point::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRL_Point::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRL_Point::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SRL_Point::name() const {
  return *name_;
}
inline void SRL_Point::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Point::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRL_Point::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRL_Point::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SRL_Point::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRL_Point::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double x = 4;
inline bool SRL_Point::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SRL_Point::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SRL_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SRL_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double SRL_Point::x() const {
  return x_;
}
inline void SRL_Point::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 5;
inline bool SRL_Point::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SRL_Point::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SRL_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SRL_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double SRL_Point::y() const {
  return y_;
}
inline void SRL_Point::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double pressure = 6;
inline bool SRL_Point::has_pressure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SRL_Point::set_has_pressure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SRL_Point::clear_has_pressure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SRL_Point::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline double SRL_Point::pressure() const {
  return pressure_;
}
inline void SRL_Point::set_pressure(double value) {
  set_has_pressure();
  pressure_ = value;
}

// optional double size = 7;
inline bool SRL_Point::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SRL_Point::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SRL_Point::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SRL_Point::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline double SRL_Point::size() const {
  return size_;
}
inline void SRL_Point::set_size(double value) {
  set_has_size();
  size_ = value;
}

// optional double speed = 8;
inline bool SRL_Point::has_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SRL_Point::set_has_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SRL_Point::clear_has_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SRL_Point::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double SRL_Point::speed() const {
  return speed_;
}
inline void SRL_Point::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}

// -------------------------------------------------------------------

// Interpretation

// required string name = 1;
inline bool Interpretation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Interpretation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Interpretation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Interpretation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Interpretation::name() const {
  return *name_;
}
inline void Interpretation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Interpretation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Interpretation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Interpretation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Interpretation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Interpretation::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double confidence = 2;
inline bool Interpretation::has_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Interpretation::set_has_confidence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Interpretation::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Interpretation::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline double Interpretation::confidence() const {
  return confidence_;
}
inline void Interpretation::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
}

// optional double complexity = 3;
inline bool Interpretation::has_complexity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Interpretation::set_has_complexity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Interpretation::clear_has_complexity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Interpretation::clear_complexity() {
  complexity_ = 0;
  clear_has_complexity();
}
inline double Interpretation::complexity() const {
  return complexity_;
}
inline void Interpretation::set_complexity(double value) {
  set_has_complexity();
  complexity_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sketch
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fsketch_2eproto__INCLUDED
