// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/school.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/school.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace school {

namespace {

const ::google::protobuf::Descriptor* SRL_School_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_School_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Course_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Course_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Assignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Assignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* SRL_Problem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SRL_Problem_reflection_ = NULL;
const ::google::protobuf::Descriptor* subproblemInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  subproblemInformation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* subproblemInformation_QuestionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fschool_2eproto() {
  protobuf_AddDesc_input_2fschool_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/school.proto");
  GOOGLE_CHECK(file != NULL);
  SRL_School_descriptor_ = file->message_type(0);
  static const int SRL_School_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_School, courses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_School, assignments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_School, problems_),
  };
  SRL_School_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_School_descriptor_,
      SRL_School::default_instance_,
      SRL_School_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_School, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_School, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_School));
  SRL_Course_descriptor_ = file->message_type(1);
  static const int SRL_Course_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Course, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Course, coursename_),
  };
  SRL_Course_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Course_descriptor_,
      SRL_Course::default_instance_,
      SRL_Course_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Course, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Course, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Course));
  SRL_Assignment_descriptor_ = file->message_type(2);
  static const int SRL_Assignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Assignment, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Assignment, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Assignment, assignmentname_),
  };
  SRL_Assignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Assignment_descriptor_,
      SRL_Assignment::default_instance_,
      SRL_Assignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Assignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Assignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Assignment));
  SRL_Problem_descriptor_ = file->message_type(3);
  static const int SRL_Problem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, problemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, mainproblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, subproblems_),
  };
  SRL_Problem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SRL_Problem_descriptor_,
      SRL_Problem::default_instance_,
      SRL_Problem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SRL_Problem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SRL_Problem));
  subproblemInformation_descriptor_ = file->message_type(4);
  static const int subproblemInformation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, questiontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, questiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, options_),
  };
  subproblemInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      subproblemInformation_descriptor_,
      subproblemInformation::default_instance_,
      subproblemInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(subproblemInformation));
  subproblemInformation_QuestionType_descriptor_ = subproblemInformation_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fschool_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_School_descriptor_, &SRL_School::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Course_descriptor_, &SRL_Course::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Assignment_descriptor_, &SRL_Assignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SRL_Problem_descriptor_, &SRL_Problem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    subproblemInformation_descriptor_, &subproblemInformation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fschool_2eproto() {
  delete SRL_School::default_instance_;
  delete SRL_School_reflection_;
  delete SRL_Course::default_instance_;
  delete SRL_Course_reflection_;
  delete SRL_Assignment::default_instance_;
  delete SRL_Assignment_reflection_;
  delete SRL_Problem::default_instance_;
  delete SRL_Problem_reflection_;
  delete subproblemInformation::default_instance_;
  delete subproblemInformation_reflection_;
}

void protobuf_AddDesc_input_2fschool_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022input/school.proto\022\023protobuf.srl.schoo"
    "l\"\254\001\n\nSRL_School\0220\n\007courses\030\001 \003(\0132\037.prot"
    "obuf.srl.school.SRL_Course\0228\n\013assignment"
    "s\030\002 \003(\0132#.protobuf.srl.school.SRL_Assign"
    "ment\0222\n\010problems\030\003 \003(\0132 .protobuf.srl.sc"
    "hool.SRL_Problem\"2\n\nSRL_Course\022\020\n\010course"
    "Id\030\001 \002(\t\022\022\n\ncourseName\030\002 \001(\t\"P\n\016SRL_Assi"
    "gnment\022\020\n\010courseId\030\001 \002(\004\022\024\n\014assignmentId"
    "\030\002 \002(\t\022\026\n\016assignmentName\030\003 \001(\t\"\337\001\n\013SRL_P"
    "roblem\022\020\n\010courseId\030\001 \002(\004\022\024\n\014assignmentId"
    "\030\002 \002(\004\022\021\n\tproblemId\030\003 \002(\t\022\023\n\013problemName"
    "\030\004 \001(\t\022\?\n\013mainProblem\030\005 \001(\0132*.protobuf.s"
    "rl.school.subproblemInformation\022\?\n\013subPr"
    "oblems\030\006 \003(\0132*.protobuf.srl.school.subpr"
    "oblemInformation\"\340\001\n\025subproblemInformati"
    "on\022\024\n\014questionText\030\001 \001(\t\022U\n\014questionType"
    "\030\002 \001(\01627.protobuf.srl.school.subproblemI"
    "nformation.QuestionType:\006SKETCH\022\017\n\007optio"
    "ns\030\003 \001(\014\"I\n\014QuestionType\022\n\n\006SKETCH\020\001\022\017\n\013"
    "MULT_CHOICE\020\002\022\r\n\tFREE_RESP\020\003\022\r\n\tCHECK_BO"
    "X\020\004", 803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/school.proto", &protobuf_RegisterTypes);
  SRL_School::default_instance_ = new SRL_School();
  SRL_Course::default_instance_ = new SRL_Course();
  SRL_Assignment::default_instance_ = new SRL_Assignment();
  SRL_Problem::default_instance_ = new SRL_Problem();
  subproblemInformation::default_instance_ = new subproblemInformation();
  SRL_School::default_instance_->InitAsDefaultInstance();
  SRL_Course::default_instance_->InitAsDefaultInstance();
  SRL_Assignment::default_instance_->InitAsDefaultInstance();
  SRL_Problem::default_instance_->InitAsDefaultInstance();
  subproblemInformation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fschool_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fschool_2eproto {
  StaticDescriptorInitializer_input_2fschool_2eproto() {
    protobuf_AddDesc_input_2fschool_2eproto();
  }
} static_descriptor_initializer_input_2fschool_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SRL_School::kCoursesFieldNumber;
const int SRL_School::kAssignmentsFieldNumber;
const int SRL_School::kProblemsFieldNumber;
#endif  // !_MSC_VER

SRL_School::SRL_School()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_School::InitAsDefaultInstance() {
}

SRL_School::SRL_School(const SRL_School& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_School::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_School::~SRL_School() {
  SharedDtor();
}

void SRL_School::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SRL_School::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_School::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_School_descriptor_;
}

const SRL_School& SRL_School::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SRL_School* SRL_School::default_instance_ = NULL;

SRL_School* SRL_School::New() const {
  return new SRL_School;
}

void SRL_School::Clear() {
  courses_.Clear();
  assignments_.Clear();
  problems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_School::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.school.SRL_Course courses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_courses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_courses;
        if (input->ExpectTag(18)) goto parse_assignments;
        break;
      }

      // repeated .protobuf.srl.school.SRL_Assignment assignments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignments;
        if (input->ExpectTag(26)) goto parse_problems;
        break;
      }

      // repeated .protobuf.srl.school.SRL_Problem problems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_problems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_School::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.school.SRL_Course courses = 1;
  for (int i = 0; i < this->courses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->courses(i), output);
  }

  // repeated .protobuf.srl.school.SRL_Assignment assignments = 2;
  for (int i = 0; i < this->assignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assignments(i), output);
  }

  // repeated .protobuf.srl.school.SRL_Problem problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->problems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_School::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.school.SRL_Course courses = 1;
  for (int i = 0; i < this->courses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->courses(i), target);
  }

  // repeated .protobuf.srl.school.SRL_Assignment assignments = 2;
  for (int i = 0; i < this->assignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->assignments(i), target);
  }

  // repeated .protobuf.srl.school.SRL_Problem problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->problems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_School::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.school.SRL_Course courses = 1;
  total_size += 1 * this->courses_size();
  for (int i = 0; i < this->courses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->courses(i));
  }

  // repeated .protobuf.srl.school.SRL_Assignment assignments = 2;
  total_size += 1 * this->assignments_size();
  for (int i = 0; i < this->assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assignments(i));
  }

  // repeated .protobuf.srl.school.SRL_Problem problems = 3;
  total_size += 1 * this->problems_size();
  for (int i = 0; i < this->problems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->problems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_School::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_School* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_School*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_School::MergeFrom(const SRL_School& from) {
  GOOGLE_CHECK_NE(&from, this);
  courses_.MergeFrom(from.courses_);
  assignments_.MergeFrom(from.assignments_);
  problems_.MergeFrom(from.problems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_School::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_School::CopyFrom(const SRL_School& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_School::IsInitialized() const {

  for (int i = 0; i < courses_size(); i++) {
    if (!this->courses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < assignments_size(); i++) {
    if (!this->assignments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < problems_size(); i++) {
    if (!this->problems(i).IsInitialized()) return false;
  }
  return true;
}

void SRL_School::Swap(SRL_School* other) {
  if (other != this) {
    courses_.Swap(&other->courses_);
    assignments_.Swap(&other->assignments_);
    problems_.Swap(&other->problems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_School::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_School_descriptor_;
  metadata.reflection = SRL_School_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Course::kCourseIdFieldNumber;
const int SRL_Course::kCourseNameFieldNumber;
#endif  // !_MSC_VER

SRL_Course::SRL_Course()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Course::InitAsDefaultInstance() {
}

SRL_Course::SRL_Course(const SRL_Course& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Course::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coursename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Course::~SRL_Course() {
  SharedDtor();
}

void SRL_Course::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (coursename_ != &::google::protobuf::internal::kEmptyString) {
    delete coursename_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Course::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Course::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Course_descriptor_;
}

const SRL_Course& SRL_Course::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SRL_Course* SRL_Course::default_instance_ = NULL;

SRL_Course* SRL_Course::New() const {
  return new SRL_Course;
}

void SRL_Course::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_coursename()) {
      if (coursename_ != &::google::protobuf::internal::kEmptyString) {
        coursename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Course::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_courseName;
        break;
      }

      // optional string courseName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coursename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coursename().data(), this->coursename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Course::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // optional string courseName = 2;
  if (has_coursename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coursename().data(), this->coursename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->coursename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Course::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // optional string courseName = 2;
  if (has_coursename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coursename().data(), this->coursename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->coursename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Course::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // optional string courseName = 2;
    if (has_coursename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coursename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Course::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Course* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Course*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Course::MergeFrom(const SRL_Course& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_coursename()) {
      set_coursename(from.coursename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Course::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Course::CopyFrom(const SRL_Course& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Course::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SRL_Course::Swap(SRL_Course* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(coursename_, other->coursename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Course::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Course_descriptor_;
  metadata.reflection = SRL_Course_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Assignment::kCourseIdFieldNumber;
const int SRL_Assignment::kAssignmentIdFieldNumber;
const int SRL_Assignment::kAssignmentNameFieldNumber;
#endif  // !_MSC_VER

SRL_Assignment::SRL_Assignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Assignment::InitAsDefaultInstance() {
}

SRL_Assignment::SRL_Assignment(const SRL_Assignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Assignment::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = GOOGLE_ULONGLONG(0);
  assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignmentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Assignment::~SRL_Assignment() {
  SharedDtor();
}

void SRL_Assignment::SharedDtor() {
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (assignmentname_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentname_;
  }
  if (this != default_instance_) {
  }
}

void SRL_Assignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Assignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Assignment_descriptor_;
}

const SRL_Assignment& SRL_Assignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SRL_Assignment* SRL_Assignment::default_instance_ = NULL;

SRL_Assignment* SRL_Assignment::New() const {
  return new SRL_Assignment;
}

void SRL_Assignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    courseid_ = GOOGLE_ULONGLONG(0);
    if (has_assignmentid()) {
      if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
        assignmentid_->clear();
      }
    }
    if (has_assignmentname()) {
      if (assignmentname_ != &::google::protobuf::internal::kEmptyString) {
        assignmentname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Assignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &courseid_)));
          set_has_courseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignmentId;
        break;
      }

      // required string assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid().data(), this->assignmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assignmentName;
        break;
      }

      // optional string assignmentName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentname().data(), this->assignmentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Assignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->courseid(), output);
  }

  // required string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assignmentid(), output);
  }

  // optional string assignmentName = 3;
  if (has_assignmentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentname().data(), this->assignmentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->assignmentname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Assignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 courseId = 1;
  if (has_courseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->courseid(), target);
  }

  // required string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assignmentid(), target);
  }

  // optional string assignmentName = 3;
  if (has_assignmentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentname().data(), this->assignmentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assignmentname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Assignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->courseid());
    }

    // required string assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentid());
    }

    // optional string assignmentName = 3;
    if (has_assignmentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Assignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Assignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Assignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Assignment::MergeFrom(const SRL_Assignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_assignmentname()) {
      set_assignmentname(from.assignmentname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Assignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Assignment::CopyFrom(const SRL_Assignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Assignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SRL_Assignment::Swap(SRL_Assignment* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(assignmentname_, other->assignmentname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Assignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Assignment_descriptor_;
  metadata.reflection = SRL_Assignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SRL_Problem::kCourseIdFieldNumber;
const int SRL_Problem::kAssignmentIdFieldNumber;
const int SRL_Problem::kProblemIdFieldNumber;
const int SRL_Problem::kProblemNameFieldNumber;
const int SRL_Problem::kMainProblemFieldNumber;
const int SRL_Problem::kSubProblemsFieldNumber;
#endif  // !_MSC_VER

SRL_Problem::SRL_Problem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SRL_Problem::InitAsDefaultInstance() {
  mainproblem_ = const_cast< ::protobuf::srl::school::subproblemInformation*>(&::protobuf::srl::school::subproblemInformation::default_instance());
}

SRL_Problem::SRL_Problem(const SRL_Problem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SRL_Problem::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = GOOGLE_ULONGLONG(0);
  assignmentid_ = GOOGLE_ULONGLONG(0);
  problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  problemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainproblem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SRL_Problem::~SRL_Problem() {
  SharedDtor();
}

void SRL_Problem::SharedDtor() {
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    delete problemid_;
  }
  if (problemname_ != &::google::protobuf::internal::kEmptyString) {
    delete problemname_;
  }
  if (this != default_instance_) {
    delete mainproblem_;
  }
}

void SRL_Problem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SRL_Problem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SRL_Problem_descriptor_;
}

const SRL_Problem& SRL_Problem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SRL_Problem* SRL_Problem::default_instance_ = NULL;

SRL_Problem* SRL_Problem::New() const {
  return new SRL_Problem;
}

void SRL_Problem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    courseid_ = GOOGLE_ULONGLONG(0);
    assignmentid_ = GOOGLE_ULONGLONG(0);
    if (has_problemid()) {
      if (problemid_ != &::google::protobuf::internal::kEmptyString) {
        problemid_->clear();
      }
    }
    if (has_problemname()) {
      if (problemname_ != &::google::protobuf::internal::kEmptyString) {
        problemname_->clear();
      }
    }
    if (has_mainproblem()) {
      if (mainproblem_ != NULL) mainproblem_->::protobuf::srl::school::subproblemInformation::Clear();
    }
  }
  subproblems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SRL_Problem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &courseid_)));
          set_has_courseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assignmentId;
        break;
      }

      // required uint64 assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assignmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignmentid_)));
          set_has_assignmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problemId;
        break;
      }

      // required string problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemid().data(), this->problemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_problemName;
        break;
      }

      // optional string problemName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemname().data(), this->problemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mainProblem;
        break;
      }

      // optional .protobuf.srl.school.subproblemInformation mainProblem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainProblem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainproblem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subProblems;
        break;
      }

      // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subProblems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subproblems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subProblems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SRL_Problem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->courseid(), output);
  }

  // required uint64 assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->assignmentid(), output);
  }

  // required string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->problemid(), output);
  }

  // optional string problemName = 4;
  if (has_problemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemname().data(), this->problemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->problemname(), output);
  }

  // optional .protobuf.srl.school.subproblemInformation mainProblem = 5;
  if (has_mainproblem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mainproblem(), output);
  }

  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  for (int i = 0; i < this->subproblems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subproblems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SRL_Problem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 courseId = 1;
  if (has_courseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->courseid(), target);
  }

  // required uint64 assignmentId = 2;
  if (has_assignmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->assignmentid(), target);
  }

  // required string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->problemid(), target);
  }

  // optional string problemName = 4;
  if (has_problemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemname().data(), this->problemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->problemname(), target);
  }

  // optional .protobuf.srl.school.subproblemInformation mainProblem = 5;
  if (has_mainproblem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mainproblem(), target);
  }

  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  for (int i = 0; i < this->subproblems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subproblems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SRL_Problem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->courseid());
    }

    // required uint64 assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignmentid());
    }

    // required string problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problemid());
    }

    // optional string problemName = 4;
    if (has_problemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problemname());
    }

    // optional .protobuf.srl.school.subproblemInformation mainProblem = 5;
    if (has_mainproblem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainproblem());
    }

  }
  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  total_size += 1 * this->subproblems_size();
  for (int i = 0; i < this->subproblems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subproblems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SRL_Problem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SRL_Problem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SRL_Problem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SRL_Problem::MergeFrom(const SRL_Problem& from) {
  GOOGLE_CHECK_NE(&from, this);
  subproblems_.MergeFrom(from.subproblems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_problemname()) {
      set_problemname(from.problemname());
    }
    if (from.has_mainproblem()) {
      mutable_mainproblem()->::protobuf::srl::school::subproblemInformation::MergeFrom(from.mainproblem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SRL_Problem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRL_Problem::CopyFrom(const SRL_Problem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRL_Problem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SRL_Problem::Swap(SRL_Problem* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(problemname_, other->problemname_);
    std::swap(mainproblem_, other->mainproblem_);
    subproblems_.Swap(&other->subproblems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SRL_Problem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SRL_Problem_descriptor_;
  metadata.reflection = SRL_Problem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* subproblemInformation_QuestionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return subproblemInformation_QuestionType_descriptor_;
}
bool subproblemInformation_QuestionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const subproblemInformation_QuestionType subproblemInformation::SKETCH;
const subproblemInformation_QuestionType subproblemInformation::MULT_CHOICE;
const subproblemInformation_QuestionType subproblemInformation::FREE_RESP;
const subproblemInformation_QuestionType subproblemInformation::CHECK_BOX;
const subproblemInformation_QuestionType subproblemInformation::QuestionType_MIN;
const subproblemInformation_QuestionType subproblemInformation::QuestionType_MAX;
const int subproblemInformation::QuestionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int subproblemInformation::kQuestionTextFieldNumber;
const int subproblemInformation::kQuestionTypeFieldNumber;
const int subproblemInformation::kOptionsFieldNumber;
#endif  // !_MSC_VER

subproblemInformation::subproblemInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void subproblemInformation::InitAsDefaultInstance() {
}

subproblemInformation::subproblemInformation(const subproblemInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void subproblemInformation::SharedCtor() {
  _cached_size_ = 0;
  questiontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  questiontype_ = 1;
  options_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

subproblemInformation::~subproblemInformation() {
  SharedDtor();
}

void subproblemInformation::SharedDtor() {
  if (questiontext_ != &::google::protobuf::internal::kEmptyString) {
    delete questiontext_;
  }
  if (options_ != &::google::protobuf::internal::kEmptyString) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void subproblemInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subproblemInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return subproblemInformation_descriptor_;
}

const subproblemInformation& subproblemInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

subproblemInformation* subproblemInformation::default_instance_ = NULL;

subproblemInformation* subproblemInformation::New() const {
  return new subproblemInformation;
}

void subproblemInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questiontext()) {
      if (questiontext_ != &::google::protobuf::internal::kEmptyString) {
        questiontext_->clear();
      }
    }
    questiontype_ = 1;
    if (has_options()) {
      if (options_ != &::google::protobuf::internal::kEmptyString) {
        options_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool subproblemInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string questionText = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_questiontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->questiontext().data(), this->questiontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questionType;
        break;
      }

      // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::subproblemInformation_QuestionType_IsValid(value)) {
            set_questiontype(static_cast< ::protobuf::srl::school::subproblemInformation_QuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // optional bytes options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void subproblemInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string questionText = 1;
  if (has_questiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questiontext().data(), this->questiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->questiontext(), output);
  }

  // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
  if (has_questiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->questiontype(), output);
  }

  // optional bytes options = 3;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* subproblemInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string questionText = 1;
  if (has_questiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questiontext().data(), this->questiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->questiontext(), target);
  }

  // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
  if (has_questiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->questiontype(), target);
  }

  // optional bytes options = 3;
  if (has_options()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int subproblemInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string questionText = 1;
    if (has_questiontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->questiontext());
    }

    // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
    if (has_questiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->questiontype());
    }

    // optional bytes options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subproblemInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const subproblemInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const subproblemInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void subproblemInformation::MergeFrom(const subproblemInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questiontext()) {
      set_questiontext(from.questiontext());
    }
    if (from.has_questiontype()) {
      set_questiontype(from.questiontype());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void subproblemInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subproblemInformation::CopyFrom(const subproblemInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subproblemInformation::IsInitialized() const {

  return true;
}

void subproblemInformation::Swap(subproblemInformation* other) {
  if (other != this) {
    std::swap(questiontext_, other->questiontext_);
    std::swap(questiontype_, other->questiontype_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata subproblemInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = subproblemInformation_descriptor_;
  metadata.reflection = subproblemInformation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace school
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
