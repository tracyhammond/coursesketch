// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/school.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/school.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace school {

namespace {

const ::google::protobuf::Descriptor* SrlSchool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSchool_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlCourse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlCourse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SrlCourse_Accessibility_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SrlAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlAssignment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SrlAssignment_AssignmentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SrlAssignment_LatePolicy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SrlProblem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlProblem_reflection_ = NULL;
const ::google::protobuf::Descriptor* subproblemInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  subproblemInformation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* subproblemInformation_QuestionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* DomainInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DomainInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlSchoolId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSchoolId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlPermission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlPermission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fschool_2eproto() {
  protobuf_AddDesc_input_2fschool_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/school.proto");
  GOOGLE_CHECK(file != NULL);
  SrlSchool_descriptor_ = file->message_type(0);
  static const int SrlSchool_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchool, courses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchool, assignments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchool, problems_),
  };
  SrlSchool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSchool_descriptor_,
      SrlSchool::default_instance_,
      SrlSchool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSchool));
  SrlCourse_descriptor_ = file->message_type(1);
  static const int SrlCourse_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, accesspermission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, semester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, imageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, accessdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, closedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, assignmentid_),
  };
  SrlCourse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlCourse_descriptor_,
      SrlCourse::default_instance_,
      SrlCourse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCourse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlCourse));
  SrlCourse_Accessibility_descriptor_ = SrlCourse_descriptor_->enum_type(0);
  SrlAssignment_descriptor_ = file->message_type(2);
  static const int SrlAssignment_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, latepolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, gradeweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, accessdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, duedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, closedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, imageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, problemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, accesspermission_),
  };
  SrlAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlAssignment_descriptor_,
      SrlAssignment::default_instance_,
      SrlAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlAssignment));
  SrlAssignment_AssignmentType_descriptor_ = SrlAssignment_descriptor_->enum_type(0);
  SrlAssignment_LatePolicy_descriptor_ = SrlAssignment_descriptor_->enum_type(1);
  SrlProblem_descriptor_ = file->message_type(3);
  static const int SrlProblem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, subproblems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, gradeweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, state_),
  };
  SrlProblem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlProblem_descriptor_,
      SrlProblem::default_instance_,
      SrlProblem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlProblem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlProblem));
  subproblemInformation_descriptor_ = file->message_type(4);
  static const int subproblemInformation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, questiontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, questiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, gradeweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, grade_),
  };
  subproblemInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      subproblemInformation_descriptor_,
      subproblemInformation::default_instance_,
      subproblemInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subproblemInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(subproblemInformation));
  subproblemInformation_QuestionType_descriptor_ = subproblemInformation_descriptor_->enum_type(0);
  DateTime_descriptor_ = file->message_type(5);
  static const int DateTime_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, millisecond_),
  };
  DateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateTime_descriptor_,
      DateTime::default_instance_,
      DateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateTime));
  DomainInformation_descriptor_ = file->message_type(6);
  static const int DomainInformation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainInformation, stuff_),
  };
  DomainInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DomainInformation_descriptor_,
      DomainInformation::default_instance_,
      DomainInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DomainInformation));
  State_descriptor_ = file->message_type(7);
  static const int State_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, published_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, accessible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, pastdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, completed_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  SrlUser_descriptor_ = file->message_type(8);
  static const int SrlUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUser, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUser, email_),
  };
  SrlUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlUser_descriptor_,
      SrlUser::default_instance_,
      SrlUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlUser));
  SrlGroup_descriptor_ = file->message_type(9);
  static const int SrlGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlGroup, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlGroup, groupname_),
  };
  SrlGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlGroup_descriptor_,
      SrlGroup::default_instance_,
      SrlGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlGroup));
  SrlSchoolId_descriptor_ = file->message_type(10);
  static const int SrlSchoolId_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchoolId, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchoolId, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchoolId, problemid_),
  };
  SrlSchoolId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSchoolId_descriptor_,
      SrlSchoolId::default_instance_,
      SrlSchoolId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchoolId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSchoolId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSchoolId));
  SrlPermission_descriptor_ = file->message_type(11);
  static const int SrlPermission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPermission, adminpermission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPermission, moderatorpermission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPermission, userpermission_),
  };
  SrlPermission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlPermission_descriptor_,
      SrlPermission::default_instance_,
      SrlPermission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPermission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlPermission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlPermission));
  UserType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fschool_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSchool_descriptor_, &SrlSchool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlCourse_descriptor_, &SrlCourse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlAssignment_descriptor_, &SrlAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlProblem_descriptor_, &SrlProblem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    subproblemInformation_descriptor_, &subproblemInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateTime_descriptor_, &DateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DomainInformation_descriptor_, &DomainInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlUser_descriptor_, &SrlUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlGroup_descriptor_, &SrlGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSchoolId_descriptor_, &SrlSchoolId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlPermission_descriptor_, &SrlPermission::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fschool_2eproto() {
  delete SrlSchool::default_instance_;
  delete SrlSchool_reflection_;
  delete SrlCourse::default_instance_;
  delete SrlCourse_reflection_;
  delete SrlAssignment::default_instance_;
  delete SrlAssignment_reflection_;
  delete SrlProblem::default_instance_;
  delete SrlProblem_reflection_;
  delete subproblemInformation::default_instance_;
  delete subproblemInformation_reflection_;
  delete DateTime::default_instance_;
  delete DateTime_reflection_;
  delete DomainInformation::default_instance_;
  delete DomainInformation_reflection_;
  delete State::default_instance_;
  delete State_reflection_;
  delete SrlUser::default_instance_;
  delete SrlUser_reflection_;
  delete SrlGroup::default_instance_;
  delete SrlGroup_reflection_;
  delete SrlSchoolId::default_instance_;
  delete SrlSchoolId_reflection_;
  delete SrlPermission::default_instance_;
  delete SrlPermission_reflection_;
}

void protobuf_AddDesc_input_2fschool_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022input/school.proto\022\023protobuf.srl.schoo"
    "l\"\250\001\n\tSrlSchool\022/\n\007courses\030\001 \003(\0132\036.proto"
    "buf.srl.school.SrlCourse\0227\n\013assignments\030"
    "\002 \003(\0132\".protobuf.srl.school.SrlAssignmen"
    "t\0221\n\010problems\030\003 \003(\0132\037.protobuf.srl.schoo"
    "l.SrlProblem\"\353\003\n\tSrlCourse\022\n\n\002id\030\001 \002(\t\022\014"
    "\n\004name\030\002 \001(\t\022<\n\020accessPermission\030\003 \001(\0132\""
    ".protobuf.srl.school.SrlPermission\022G\n\006ac"
    "cess\030\004 \001(\0162,.protobuf.srl.school.SrlCour"
    "se.Accessibility:\tPROTECTED\022\023\n\013descripti"
    "on\030\005 \001(\t\022\020\n\010semester\030\006 \001(\t\022\020\n\010imageUrl\030\007"
    " \001(\t\022\r\n\005grade\030\010 \001(\005\0221\n\naccessDate\030\t \001(\0132"
    "\035.protobuf.srl.school.DateTime\0220\n\tcloseD"
    "ate\030\n \001(\0132\035.protobuf.srl.school.DateTime"
    "\022)\n\005state\030\013 \001(\0132\032.protobuf.srl.school.St"
    "ate\022\024\n\014assignmentId\030\014 \003(\t\"O\n\rAccessibili"
    "ty\022\n\n\006PUBLIC\020\001\022\r\n\tPROTECTED\020\002\022\026\n\022PROTECT"
    "ED_NOSEARCH\020\003\022\013\n\007PRIVATE\020\004\"\327\005\n\rSrlAssign"
    "ment\022\020\n\010courseId\030\001 \002(\t\022\n\n\002id\030\002 \002(\t\022\014\n\004na"
    "me\030\003 \001(\t\022I\n\004type\030\004 \001(\01621.protobuf.srl.sc"
    "hool.SrlAssignment.AssignmentType:\010HOMEW"
    "ORK\022\r\n\005other\030\005 \001(\t\022\023\n\013description\030\006 \001(\t\022"
    "\r\n\005links\030\007 \003(\t\022J\n\nlatePolicy\030\010 \001(\0162-.pro"
    "tobuf.srl.school.SrlAssignment.LatePolic"
    "y:\007POLICY1\022\023\n\013gradeWeight\030\t \001(\005\022\r\n\005grade"
    "\030\n \001(\005\0221\n\naccessDate\030\013 \001(\0132\035.protobuf.sr"
    "l.school.DateTime\022.\n\007dueDate\030\014 \001(\0132\035.pro"
    "tobuf.srl.school.DateTime\0220\n\tcloseDate\030\r"
    " \001(\0132\035.protobuf.srl.school.DateTime\022)\n\005s"
    "tate\030\016 \001(\0132\032.protobuf.srl.school.State\022\020"
    "\n\010imageUrl\030\017 \001(\t\022\023\n\013problemList\030\020 \003(\t\022<\n"
    "\020accessPermission\030\021 \001(\0132\".protobuf.srl.s"
    "chool.SrlPermission\"R\n\016AssignmentType\022\014\n"
    "\010HOMEWORK\020\001\022\010\n\004QUIZ\020\002\022\007\n\003LAB\020\003\022\010\n\004EXAM\020\004"
    "\022\n\n\006SURVEY\020\005\022\t\n\005OTHER\020\006\"3\n\nLatePolicy\022\013\n"
    "\007POLICY1\020\001\022\013\n\007POLICY2\020\002\022\013\n\007POLICY3\020\003\"\251\002\n"
    "\nSrlProblem\022\020\n\010courseId\030\001 \002(\t\022\024\n\014assignm"
    "entId\030\002 \002(\t\022\n\n\002id\030\003 \002(\t\022\014\n\004name\030\004 \001(\t\022\023\n"
    "\013description\030\005 \001(\t\022\?\n\013subProblems\030\006 \003(\0132"
    "*.protobuf.srl.school.subproblemInformat"
    "ion\0224\n\004info\030\007 \003(\0132&.protobuf.srl.school."
    "DomainInformation\022\023\n\013gradeWeight\030\010 \001(\005\022\r"
    "\n\005grade\030\t \001(\005\022)\n\005state\030\n \001(\0132\032.protobuf."
    "srl.school.State\"\204\002\n\025subproblemInformati"
    "on\022\024\n\014questionText\030\001 \001(\t\022U\n\014questionType"
    "\030\002 \001(\01627.protobuf.srl.school.subproblemI"
    "nformation.QuestionType:\006SKETCH\022\017\n\007optio"
    "ns\030\003 \001(\014\022\023\n\013gradeWeight\030\004 \001(\005\022\r\n\005grade\030\005"
    " \001(\005\"I\n\014QuestionType\022\n\n\006SKETCH\020\001\022\017\n\013MULT"
    "_CHOICE\020\002\022\r\n\tFREE_RESP\020\003\022\r\n\tCHECK_BOX\020\004\""
    "w\n\010DateTime\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005"
    "\022\013\n\003day\030\003 \001(\005\022\014\n\004hour\030\004 \001(\005\022\016\n\006minute\030\005 "
    "\001(\005\022\016\n\006second\030\006 \001(\005\022\023\n\013millisecond\030\007 \001(\004"
    "\"\"\n\021DomainInformation\022\r\n\005stuff\030\001 \001(\t\"c\n\005"
    "State\022\021\n\tpublished\030\001 \001(\010\022\022\n\naccessible\030\002"
    " \001(\010\022\017\n\007pastDue\030\003 \001(\010\022\017\n\007started\030\004 \001(\010\022\021"
    "\n\tcompleted\030\005 \001(\010\"b\n\007SrlUser\022\020\n\010username"
    "\030\001 \002(\t\0226\n\010userType\030\002 \001(\0162\035.protobuf.srl."
    "school.UserType:\005GUEST\022\r\n\005email\030\003 \001(\t\">\n"
    "\010SrlGroup\022\016\n\006userId\030\001 \003(\t\022\017\n\007groupId\030\002 \002"
    "(\t\022\021\n\tgroupName\030\003 \001(\t\"H\n\013SrlSchoolId\022\020\n\010"
    "courseId\030\001 \001(\t\022\024\n\014assignmentId\030\002 \001(\t\022\021\n\t"
    "problemId\030\003 \001(\t\"]\n\rSrlPermission\022\027\n\017admi"
    "nPermission\030\001 \003(\t\022\033\n\023moderatorPermission"
    "\030\002 \003(\t\022\026\n\016userPermission\030\003 \003(\t*U\n\010UserTy"
    "pe\022\t\n\005ADMIN\020\001\022\016\n\nINSTRUCTOR\020\002\022\026\n\022TEACHIN"
    "G_ASSISTANT\020\003\022\013\n\007STUDENT\020\004\022\t\n\005GUEST\020\005", 2677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/school.proto", &protobuf_RegisterTypes);
  SrlSchool::default_instance_ = new SrlSchool();
  SrlCourse::default_instance_ = new SrlCourse();
  SrlAssignment::default_instance_ = new SrlAssignment();
  SrlProblem::default_instance_ = new SrlProblem();
  subproblemInformation::default_instance_ = new subproblemInformation();
  DateTime::default_instance_ = new DateTime();
  DomainInformation::default_instance_ = new DomainInformation();
  State::default_instance_ = new State();
  SrlUser::default_instance_ = new SrlUser();
  SrlGroup::default_instance_ = new SrlGroup();
  SrlSchoolId::default_instance_ = new SrlSchoolId();
  SrlPermission::default_instance_ = new SrlPermission();
  SrlSchool::default_instance_->InitAsDefaultInstance();
  SrlCourse::default_instance_->InitAsDefaultInstance();
  SrlAssignment::default_instance_->InitAsDefaultInstance();
  SrlProblem::default_instance_->InitAsDefaultInstance();
  subproblemInformation::default_instance_->InitAsDefaultInstance();
  DateTime::default_instance_->InitAsDefaultInstance();
  DomainInformation::default_instance_->InitAsDefaultInstance();
  State::default_instance_->InitAsDefaultInstance();
  SrlUser::default_instance_->InitAsDefaultInstance();
  SrlGroup::default_instance_->InitAsDefaultInstance();
  SrlSchoolId::default_instance_->InitAsDefaultInstance();
  SrlPermission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fschool_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fschool_2eproto {
  StaticDescriptorInitializer_input_2fschool_2eproto() {
    protobuf_AddDesc_input_2fschool_2eproto();
  }
} static_descriptor_initializer_input_2fschool_2eproto_;
const ::google::protobuf::EnumDescriptor* UserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserType_descriptor_;
}
bool UserType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SrlSchool::kCoursesFieldNumber;
const int SrlSchool::kAssignmentsFieldNumber;
const int SrlSchool::kProblemsFieldNumber;
#endif  // !_MSC_VER

SrlSchool::SrlSchool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSchool::InitAsDefaultInstance() {
}

SrlSchool::SrlSchool(const SrlSchool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSchool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSchool::~SrlSchool() {
  SharedDtor();
}

void SrlSchool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrlSchool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSchool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSchool_descriptor_;
}

const SrlSchool& SrlSchool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlSchool* SrlSchool::default_instance_ = NULL;

SrlSchool* SrlSchool::New() const {
  return new SrlSchool;
}

void SrlSchool::Clear() {
  courses_.Clear();
  assignments_.Clear();
  problems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSchool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.school.SrlCourse courses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_courses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_courses;
        if (input->ExpectTag(18)) goto parse_assignments;
        break;
      }

      // repeated .protobuf.srl.school.SrlAssignment assignments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignments;
        if (input->ExpectTag(26)) goto parse_problems;
        break;
      }

      // repeated .protobuf.srl.school.SrlProblem problems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_problems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSchool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.school.SrlCourse courses = 1;
  for (int i = 0; i < this->courses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->courses(i), output);
  }

  // repeated .protobuf.srl.school.SrlAssignment assignments = 2;
  for (int i = 0; i < this->assignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assignments(i), output);
  }

  // repeated .protobuf.srl.school.SrlProblem problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->problems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSchool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.school.SrlCourse courses = 1;
  for (int i = 0; i < this->courses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->courses(i), target);
  }

  // repeated .protobuf.srl.school.SrlAssignment assignments = 2;
  for (int i = 0; i < this->assignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->assignments(i), target);
  }

  // repeated .protobuf.srl.school.SrlProblem problems = 3;
  for (int i = 0; i < this->problems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->problems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSchool::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.school.SrlCourse courses = 1;
  total_size += 1 * this->courses_size();
  for (int i = 0; i < this->courses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->courses(i));
  }

  // repeated .protobuf.srl.school.SrlAssignment assignments = 2;
  total_size += 1 * this->assignments_size();
  for (int i = 0; i < this->assignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assignments(i));
  }

  // repeated .protobuf.srl.school.SrlProblem problems = 3;
  total_size += 1 * this->problems_size();
  for (int i = 0; i < this->problems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->problems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSchool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSchool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSchool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSchool::MergeFrom(const SrlSchool& from) {
  GOOGLE_CHECK_NE(&from, this);
  courses_.MergeFrom(from.courses_);
  assignments_.MergeFrom(from.assignments_);
  problems_.MergeFrom(from.problems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSchool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSchool::CopyFrom(const SrlSchool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSchool::IsInitialized() const {

  for (int i = 0; i < courses_size(); i++) {
    if (!this->courses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < assignments_size(); i++) {
    if (!this->assignments(i).IsInitialized()) return false;
  }
  for (int i = 0; i < problems_size(); i++) {
    if (!this->problems(i).IsInitialized()) return false;
  }
  return true;
}

void SrlSchool::Swap(SrlSchool* other) {
  if (other != this) {
    courses_.Swap(&other->courses_);
    assignments_.Swap(&other->assignments_);
    problems_.Swap(&other->problems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSchool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSchool_descriptor_;
  metadata.reflection = SrlSchool_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SrlCourse_Accessibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlCourse_Accessibility_descriptor_;
}
bool SrlCourse_Accessibility_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SrlCourse_Accessibility SrlCourse::PUBLIC;
const SrlCourse_Accessibility SrlCourse::PROTECTED;
const SrlCourse_Accessibility SrlCourse::PROTECTED_NOSEARCH;
const SrlCourse_Accessibility SrlCourse::PRIVATE;
const SrlCourse_Accessibility SrlCourse::Accessibility_MIN;
const SrlCourse_Accessibility SrlCourse::Accessibility_MAX;
const int SrlCourse::Accessibility_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SrlCourse::kIdFieldNumber;
const int SrlCourse::kNameFieldNumber;
const int SrlCourse::kAccessPermissionFieldNumber;
const int SrlCourse::kAccessFieldNumber;
const int SrlCourse::kDescriptionFieldNumber;
const int SrlCourse::kSemesterFieldNumber;
const int SrlCourse::kImageUrlFieldNumber;
const int SrlCourse::kGradeFieldNumber;
const int SrlCourse::kAccessDateFieldNumber;
const int SrlCourse::kCloseDateFieldNumber;
const int SrlCourse::kStateFieldNumber;
const int SrlCourse::kAssignmentIdFieldNumber;
#endif  // !_MSC_VER

SrlCourse::SrlCourse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlCourse::InitAsDefaultInstance() {
  accesspermission_ = const_cast< ::protobuf::srl::school::SrlPermission*>(&::protobuf::srl::school::SrlPermission::default_instance());
  accessdate_ = const_cast< ::protobuf::srl::school::DateTime*>(&::protobuf::srl::school::DateTime::default_instance());
  closedate_ = const_cast< ::protobuf::srl::school::DateTime*>(&::protobuf::srl::school::DateTime::default_instance());
  state_ = const_cast< ::protobuf::srl::school::State*>(&::protobuf::srl::school::State::default_instance());
}

SrlCourse::SrlCourse(const SrlCourse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlCourse::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesspermission_ = NULL;
  access_ = 2;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  semester_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = 0;
  accessdate_ = NULL;
  closedate_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlCourse::~SrlCourse() {
  SharedDtor();
}

void SrlCourse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (semester_ != &::google::protobuf::internal::kEmptyString) {
    delete semester_;
  }
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (this != default_instance_) {
    delete accesspermission_;
    delete accessdate_;
    delete closedate_;
    delete state_;
  }
}

void SrlCourse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlCourse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlCourse_descriptor_;
}

const SrlCourse& SrlCourse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlCourse* SrlCourse::default_instance_ = NULL;

SrlCourse* SrlCourse::New() const {
  return new SrlCourse;
}

void SrlCourse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_accesspermission()) {
      if (accesspermission_ != NULL) accesspermission_->::protobuf::srl::school::SrlPermission::Clear();
    }
    access_ = 2;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_semester()) {
      if (semester_ != &::google::protobuf::internal::kEmptyString) {
        semester_->clear();
      }
    }
    if (has_imageurl()) {
      if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
        imageurl_->clear();
      }
    }
    grade_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_accessdate()) {
      if (accessdate_ != NULL) accessdate_->::protobuf::srl::school::DateTime::Clear();
    }
    if (has_closedate()) {
      if (closedate_ != NULL) closedate_->::protobuf::srl::school::DateTime::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::protobuf::srl::school::State::Clear();
    }
  }
  assignmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlCourse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accessPermission;
        break;
      }

      // optional .protobuf.srl.school.SrlPermission accessPermission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessPermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accesspermission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_access;
        break;
      }

      // optional .protobuf.srl.school.SrlCourse.Accessibility access = 4 [default = PROTECTED];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::SrlCourse_Accessibility_IsValid(value)) {
            set_access(static_cast< ::protobuf::srl::school::SrlCourse_Accessibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_semester;
        break;
      }

      // optional string semester = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_semester:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semester()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->semester().data(), this->semester().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_imageUrl;
        break;
      }

      // optional string imageUrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageurl().data(), this->imageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }

      // optional int32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_accessDate;
        break;
      }

      // optional .protobuf.srl.school.DateTime accessDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accessdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_closeDate;
        break;
      }

      // optional .protobuf.srl.school.DateTime closeDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closedate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_state;
        break;
      }

      // optional .protobuf.srl.school.State state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_assignmentId;
        break;
      }

      // repeated string assignmentId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid(this->assignmentid_size() - 1).data(),
            this->assignmentid(this->assignmentid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_assignmentId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlCourse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .protobuf.srl.school.SrlPermission accessPermission = 3;
  if (has_accesspermission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accesspermission(), output);
  }

  // optional .protobuf.srl.school.SrlCourse.Accessibility access = 4 [default = PROTECTED];
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->access(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }

  // optional string semester = 6;
  if (has_semester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->semester().data(), this->semester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->semester(), output);
  }

  // optional string imageUrl = 7;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->imageurl(), output);
  }

  // optional int32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grade(), output);
  }

  // optional .protobuf.srl.school.DateTime accessDate = 9;
  if (has_accessdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->accessdate(), output);
  }

  // optional .protobuf.srl.school.DateTime closeDate = 10;
  if (has_closedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->closedate(), output);
  }

  // optional .protobuf.srl.school.State state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->state(), output);
  }

  // repeated string assignmentId = 12;
  for (int i = 0; i < this->assignmentid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->assignmentid(i).data(), this->assignmentid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->assignmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlCourse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .protobuf.srl.school.SrlPermission accessPermission = 3;
  if (has_accesspermission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accesspermission(), target);
  }

  // optional .protobuf.srl.school.SrlCourse.Accessibility access = 4 [default = PROTECTED];
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->access(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string semester = 6;
  if (has_semester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->semester().data(), this->semester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->semester(), target);
  }

  // optional string imageUrl = 7;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->imageurl(), target);
  }

  // optional int32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grade(), target);
  }

  // optional .protobuf.srl.school.DateTime accessDate = 9;
  if (has_accessdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->accessdate(), target);
  }

  // optional .protobuf.srl.school.DateTime closeDate = 10;
  if (has_closedate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->closedate(), target);
  }

  // optional .protobuf.srl.school.State state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->state(), target);
  }

  // repeated string assignmentId = 12;
  for (int i = 0; i < this->assignmentid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid(i).data(), this->assignmentid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->assignmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlCourse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protobuf.srl.school.SrlPermission accessPermission = 3;
    if (has_accesspermission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accesspermission());
    }

    // optional .protobuf.srl.school.SrlCourse.Accessibility access = 4 [default = PROTECTED];
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string semester = 6;
    if (has_semester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->semester());
    }

    // optional string imageUrl = 7;
    if (has_imageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageurl());
    }

    // optional int32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protobuf.srl.school.DateTime accessDate = 9;
    if (has_accessdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accessdate());
    }

    // optional .protobuf.srl.school.DateTime closeDate = 10;
    if (has_closedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closedate());
    }

    // optional .protobuf.srl.school.State state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  // repeated string assignmentId = 12;
  total_size += 1 * this->assignmentid_size();
  for (int i = 0; i < this->assignmentid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->assignmentid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlCourse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlCourse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlCourse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlCourse::MergeFrom(const SrlCourse& from) {
  GOOGLE_CHECK_NE(&from, this);
  assignmentid_.MergeFrom(from.assignmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accesspermission()) {
      mutable_accesspermission()->::protobuf::srl::school::SrlPermission::MergeFrom(from.accesspermission());
    }
    if (from.has_access()) {
      set_access(from.access());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_semester()) {
      set_semester(from.semester());
    }
    if (from.has_imageurl()) {
      set_imageurl(from.imageurl());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accessdate()) {
      mutable_accessdate()->::protobuf::srl::school::DateTime::MergeFrom(from.accessdate());
    }
    if (from.has_closedate()) {
      mutable_closedate()->::protobuf::srl::school::DateTime::MergeFrom(from.closedate());
    }
    if (from.has_state()) {
      mutable_state()->::protobuf::srl::school::State::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlCourse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlCourse::CopyFrom(const SrlCourse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlCourse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SrlCourse::Swap(SrlCourse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(accesspermission_, other->accesspermission_);
    std::swap(access_, other->access_);
    std::swap(description_, other->description_);
    std::swap(semester_, other->semester_);
    std::swap(imageurl_, other->imageurl_);
    std::swap(grade_, other->grade_);
    std::swap(accessdate_, other->accessdate_);
    std::swap(closedate_, other->closedate_);
    std::swap(state_, other->state_);
    assignmentid_.Swap(&other->assignmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlCourse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlCourse_descriptor_;
  metadata.reflection = SrlCourse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SrlAssignment_AssignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlAssignment_AssignmentType_descriptor_;
}
bool SrlAssignment_AssignmentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SrlAssignment_AssignmentType SrlAssignment::HOMEWORK;
const SrlAssignment_AssignmentType SrlAssignment::QUIZ;
const SrlAssignment_AssignmentType SrlAssignment::LAB;
const SrlAssignment_AssignmentType SrlAssignment::EXAM;
const SrlAssignment_AssignmentType SrlAssignment::SURVEY;
const SrlAssignment_AssignmentType SrlAssignment::OTHER;
const SrlAssignment_AssignmentType SrlAssignment::AssignmentType_MIN;
const SrlAssignment_AssignmentType SrlAssignment::AssignmentType_MAX;
const int SrlAssignment::AssignmentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SrlAssignment_LatePolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlAssignment_LatePolicy_descriptor_;
}
bool SrlAssignment_LatePolicy_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SrlAssignment_LatePolicy SrlAssignment::POLICY1;
const SrlAssignment_LatePolicy SrlAssignment::POLICY2;
const SrlAssignment_LatePolicy SrlAssignment::POLICY3;
const SrlAssignment_LatePolicy SrlAssignment::LatePolicy_MIN;
const SrlAssignment_LatePolicy SrlAssignment::LatePolicy_MAX;
const int SrlAssignment::LatePolicy_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SrlAssignment::kCourseIdFieldNumber;
const int SrlAssignment::kIdFieldNumber;
const int SrlAssignment::kNameFieldNumber;
const int SrlAssignment::kTypeFieldNumber;
const int SrlAssignment::kOtherFieldNumber;
const int SrlAssignment::kDescriptionFieldNumber;
const int SrlAssignment::kLinksFieldNumber;
const int SrlAssignment::kLatePolicyFieldNumber;
const int SrlAssignment::kGradeWeightFieldNumber;
const int SrlAssignment::kGradeFieldNumber;
const int SrlAssignment::kAccessDateFieldNumber;
const int SrlAssignment::kDueDateFieldNumber;
const int SrlAssignment::kCloseDateFieldNumber;
const int SrlAssignment::kStateFieldNumber;
const int SrlAssignment::kImageUrlFieldNumber;
const int SrlAssignment::kProblemListFieldNumber;
const int SrlAssignment::kAccessPermissionFieldNumber;
#endif  // !_MSC_VER

SrlAssignment::SrlAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlAssignment::InitAsDefaultInstance() {
  accessdate_ = const_cast< ::protobuf::srl::school::DateTime*>(&::protobuf::srl::school::DateTime::default_instance());
  duedate_ = const_cast< ::protobuf::srl::school::DateTime*>(&::protobuf::srl::school::DateTime::default_instance());
  closedate_ = const_cast< ::protobuf::srl::school::DateTime*>(&::protobuf::srl::school::DateTime::default_instance());
  state_ = const_cast< ::protobuf::srl::school::State*>(&::protobuf::srl::school::State::default_instance());
  accesspermission_ = const_cast< ::protobuf::srl::school::SrlPermission*>(&::protobuf::srl::school::SrlPermission::default_instance());
}

SrlAssignment::SrlAssignment(const SrlAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlAssignment::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  other_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latepolicy_ = 1;
  gradeweight_ = 0;
  grade_ = 0;
  accessdate_ = NULL;
  duedate_ = NULL;
  closedate_ = NULL;
  state_ = NULL;
  imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accesspermission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlAssignment::~SrlAssignment() {
  SharedDtor();
}

void SrlAssignment::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (other_ != &::google::protobuf::internal::kEmptyString) {
    delete other_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (this != default_instance_) {
    delete accessdate_;
    delete duedate_;
    delete closedate_;
    delete state_;
    delete accesspermission_;
  }
}

void SrlAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlAssignment_descriptor_;
}

const SrlAssignment& SrlAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlAssignment* SrlAssignment::default_instance_ = NULL;

SrlAssignment* SrlAssignment::New() const {
  return new SrlAssignment;
}

void SrlAssignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_other()) {
      if (other_ != &::google::protobuf::internal::kEmptyString) {
        other_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    latepolicy_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gradeweight_ = 0;
    grade_ = 0;
    if (has_accessdate()) {
      if (accessdate_ != NULL) accessdate_->::protobuf::srl::school::DateTime::Clear();
    }
    if (has_duedate()) {
      if (duedate_ != NULL) duedate_->::protobuf::srl::school::DateTime::Clear();
    }
    if (has_closedate()) {
      if (closedate_ != NULL) closedate_->::protobuf::srl::school::DateTime::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::protobuf::srl::school::State::Clear();
    }
    if (has_imageurl()) {
      if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
        imageurl_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_accesspermission()) {
      if (accesspermission_ != NULL) accesspermission_->::protobuf::srl::school::SrlPermission::Clear();
    }
  }
  links_.Clear();
  problemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .protobuf.srl.school.SrlAssignment.AssignmentType type = 4 [default = HOMEWORK];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::SrlAssignment_AssignmentType_IsValid(value)) {
            set_type(static_cast< ::protobuf::srl::school::SrlAssignment_AssignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_other;
        break;
      }

      // optional string other = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other().data(), this->other().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_links;
        break;
      }

      // repeated string links = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_links()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->links(this->links_size() - 1).data(),
            this->links(this->links_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_links;
        if (input->ExpectTag(64)) goto parse_latePolicy;
        break;
      }

      // optional .protobuf.srl.school.SrlAssignment.LatePolicy latePolicy = 8 [default = POLICY1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latePolicy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::SrlAssignment_LatePolicy_IsValid(value)) {
            set_latepolicy(static_cast< ::protobuf::srl::school::SrlAssignment_LatePolicy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gradeWeight;
        break;
      }

      // optional int32 gradeWeight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gradeWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gradeweight_)));
          set_has_gradeweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_grade;
        break;
      }

      // optional int32 grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_accessDate;
        break;
      }

      // optional .protobuf.srl.school.DateTime accessDate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accessdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dueDate;
        break;
      }

      // optional .protobuf.srl.school.DateTime dueDate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dueDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duedate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_closeDate;
        break;
      }

      // optional .protobuf.srl.school.DateTime closeDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closedate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_state;
        break;
      }

      // optional .protobuf.srl.school.State state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_imageUrl;
        break;
      }

      // optional string imageUrl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageurl().data(), this->imageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_problemList;
        break;
      }

      // repeated string problemList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_problemlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemlist(this->problemlist_size() - 1).data(),
            this->problemlist(this->problemlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_problemList;
        if (input->ExpectTag(138)) goto parse_accessPermission;
        break;
      }

      // optional .protobuf.srl.school.SrlPermission accessPermission = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessPermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accesspermission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional .protobuf.srl.school.SrlAssignment.AssignmentType type = 4 [default = HOMEWORK];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string other = 5;
  if (has_other()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->other(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->description(), output);
  }

  // repeated string links = 7;
  for (int i = 0; i < this->links_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->links(i).data(), this->links(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->links(i), output);
  }

  // optional .protobuf.srl.school.SrlAssignment.LatePolicy latePolicy = 8 [default = POLICY1];
  if (has_latepolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->latepolicy(), output);
  }

  // optional int32 gradeWeight = 9;
  if (has_gradeweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gradeweight(), output);
  }

  // optional int32 grade = 10;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grade(), output);
  }

  // optional .protobuf.srl.school.DateTime accessDate = 11;
  if (has_accessdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->accessdate(), output);
  }

  // optional .protobuf.srl.school.DateTime dueDate = 12;
  if (has_duedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->duedate(), output);
  }

  // optional .protobuf.srl.school.DateTime closeDate = 13;
  if (has_closedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->closedate(), output);
  }

  // optional .protobuf.srl.school.State state = 14;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->state(), output);
  }

  // optional string imageUrl = 15;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->imageurl(), output);
  }

  // repeated string problemList = 16;
  for (int i = 0; i < this->problemlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->problemlist(i).data(), this->problemlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->problemlist(i), output);
  }

  // optional .protobuf.srl.school.SrlPermission accessPermission = 17;
  if (has_accesspermission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->accesspermission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .protobuf.srl.school.SrlAssignment.AssignmentType type = 4 [default = HOMEWORK];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string other = 5;
  if (has_other()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other().data(), this->other().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->other(), target);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // repeated string links = 7;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->links(i).data(), this->links(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->links(i), target);
  }

  // optional .protobuf.srl.school.SrlAssignment.LatePolicy latePolicy = 8 [default = POLICY1];
  if (has_latepolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->latepolicy(), target);
  }

  // optional int32 gradeWeight = 9;
  if (has_gradeweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gradeweight(), target);
  }

  // optional int32 grade = 10;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grade(), target);
  }

  // optional .protobuf.srl.school.DateTime accessDate = 11;
  if (has_accessdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->accessdate(), target);
  }

  // optional .protobuf.srl.school.DateTime dueDate = 12;
  if (has_duedate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->duedate(), target);
  }

  // optional .protobuf.srl.school.DateTime closeDate = 13;
  if (has_closedate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->closedate(), target);
  }

  // optional .protobuf.srl.school.State state = 14;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->state(), target);
  }

  // optional string imageUrl = 15;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->imageurl(), target);
  }

  // repeated string problemList = 16;
  for (int i = 0; i < this->problemlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemlist(i).data(), this->problemlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->problemlist(i), target);
  }

  // optional .protobuf.srl.school.SrlPermission accessPermission = 17;
  if (has_accesspermission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->accesspermission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protobuf.srl.school.SrlAssignment.AssignmentType type = 4 [default = HOMEWORK];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string other = 5;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .protobuf.srl.school.SrlAssignment.LatePolicy latePolicy = 8 [default = POLICY1];
    if (has_latepolicy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->latepolicy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gradeWeight = 9;
    if (has_gradeweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gradeweight());
    }

    // optional int32 grade = 10;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .protobuf.srl.school.DateTime accessDate = 11;
    if (has_accessdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accessdate());
    }

    // optional .protobuf.srl.school.DateTime dueDate = 12;
    if (has_duedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duedate());
    }

    // optional .protobuf.srl.school.DateTime closeDate = 13;
    if (has_closedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closedate());
    }

    // optional .protobuf.srl.school.State state = 14;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional string imageUrl = 15;
    if (has_imageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageurl());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .protobuf.srl.school.SrlPermission accessPermission = 17;
    if (has_accesspermission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accesspermission());
    }

  }
  // repeated string links = 7;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->links(i));
  }

  // repeated string problemList = 16;
  total_size += 2 * this->problemlist_size();
  for (int i = 0; i < this->problemlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->problemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlAssignment::MergeFrom(const SrlAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  problemlist_.MergeFrom(from.problemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_latepolicy()) {
      set_latepolicy(from.latepolicy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gradeweight()) {
      set_gradeweight(from.gradeweight());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_accessdate()) {
      mutable_accessdate()->::protobuf::srl::school::DateTime::MergeFrom(from.accessdate());
    }
    if (from.has_duedate()) {
      mutable_duedate()->::protobuf::srl::school::DateTime::MergeFrom(from.duedate());
    }
    if (from.has_closedate()) {
      mutable_closedate()->::protobuf::srl::school::DateTime::MergeFrom(from.closedate());
    }
    if (from.has_state()) {
      mutable_state()->::protobuf::srl::school::State::MergeFrom(from.state());
    }
    if (from.has_imageurl()) {
      set_imageurl(from.imageurl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_accesspermission()) {
      mutable_accesspermission()->::protobuf::srl::school::SrlPermission::MergeFrom(from.accesspermission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlAssignment::CopyFrom(const SrlAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlAssignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SrlAssignment::Swap(SrlAssignment* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(other_, other->other_);
    std::swap(description_, other->description_);
    links_.Swap(&other->links_);
    std::swap(latepolicy_, other->latepolicy_);
    std::swap(gradeweight_, other->gradeweight_);
    std::swap(grade_, other->grade_);
    std::swap(accessdate_, other->accessdate_);
    std::swap(duedate_, other->duedate_);
    std::swap(closedate_, other->closedate_);
    std::swap(state_, other->state_);
    std::swap(imageurl_, other->imageurl_);
    problemlist_.Swap(&other->problemlist_);
    std::swap(accesspermission_, other->accesspermission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlAssignment_descriptor_;
  metadata.reflection = SrlAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlProblem::kCourseIdFieldNumber;
const int SrlProblem::kAssignmentIdFieldNumber;
const int SrlProblem::kIdFieldNumber;
const int SrlProblem::kNameFieldNumber;
const int SrlProblem::kDescriptionFieldNumber;
const int SrlProblem::kSubProblemsFieldNumber;
const int SrlProblem::kInfoFieldNumber;
const int SrlProblem::kGradeWeightFieldNumber;
const int SrlProblem::kGradeFieldNumber;
const int SrlProblem::kStateFieldNumber;
#endif  // !_MSC_VER

SrlProblem::SrlProblem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlProblem::InitAsDefaultInstance() {
  state_ = const_cast< ::protobuf::srl::school::State*>(&::protobuf::srl::school::State::default_instance());
}

SrlProblem::SrlProblem(const SrlProblem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlProblem::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gradeweight_ = 0;
  grade_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlProblem::~SrlProblem() {
  SharedDtor();
}

void SrlProblem::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete state_;
  }
}

void SrlProblem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlProblem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlProblem_descriptor_;
}

const SrlProblem& SrlProblem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlProblem* SrlProblem::default_instance_ = NULL;

SrlProblem* SrlProblem::New() const {
  return new SrlProblem;
}

void SrlProblem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_assignmentid()) {
      if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
        assignmentid_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    gradeweight_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    grade_ = 0;
    if (has_state()) {
      if (state_ != NULL) state_->::protobuf::srl::school::State::Clear();
    }
  }
  subproblems_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlProblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignmentId;
        break;
      }

      // required string assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid().data(), this->assignmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // required string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subProblems;
        break;
      }

      // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subProblems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subproblems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_subProblems;
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // repeated .protobuf.srl.school.DomainInformation info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        if (input->ExpectTag(64)) goto parse_gradeWeight;
        break;
      }

      // optional int32 gradeWeight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gradeWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gradeweight_)));
          set_has_gradeweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_grade;
        break;
      }

      // optional int32 grade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_state;
        break;
      }

      // optional .protobuf.srl.school.State state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlProblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // required string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assignmentid(), output);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->description(), output);
  }

  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  for (int i = 0; i < this->subproblems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subproblems(i), output);
  }

  // repeated .protobuf.srl.school.DomainInformation info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info(i), output);
  }

  // optional int32 gradeWeight = 8;
  if (has_gradeweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gradeweight(), output);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grade(), output);
  }

  // optional .protobuf.srl.school.State state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlProblem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // required string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assignmentid(), target);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  for (int i = 0; i < this->subproblems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subproblems(i), target);
  }

  // repeated .protobuf.srl.school.DomainInformation info = 7;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info(i), target);
  }

  // optional int32 gradeWeight = 8;
  if (has_gradeweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gradeweight(), target);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grade(), target);
  }

  // optional .protobuf.srl.school.State state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlProblem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // required string assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentid());
    }

    // required string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 gradeWeight = 8;
    if (has_gradeweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gradeweight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grade = 9;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .protobuf.srl.school.State state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  // repeated .protobuf.srl.school.subproblemInformation subProblems = 6;
  total_size += 1 * this->subproblems_size();
  for (int i = 0; i < this->subproblems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subproblems(i));
  }

  // repeated .protobuf.srl.school.DomainInformation info = 7;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlProblem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlProblem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlProblem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlProblem::MergeFrom(const SrlProblem& from) {
  GOOGLE_CHECK_NE(&from, this);
  subproblems_.MergeFrom(from.subproblems_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_gradeweight()) {
      set_gradeweight(from.gradeweight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_state()) {
      mutable_state()->::protobuf::srl::school::State::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlProblem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlProblem::CopyFrom(const SrlProblem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlProblem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SrlProblem::Swap(SrlProblem* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    subproblems_.Swap(&other->subproblems_);
    info_.Swap(&other->info_);
    std::swap(gradeweight_, other->gradeweight_);
    std::swap(grade_, other->grade_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlProblem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlProblem_descriptor_;
  metadata.reflection = SrlProblem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* subproblemInformation_QuestionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return subproblemInformation_QuestionType_descriptor_;
}
bool subproblemInformation_QuestionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const subproblemInformation_QuestionType subproblemInformation::SKETCH;
const subproblemInformation_QuestionType subproblemInformation::MULT_CHOICE;
const subproblemInformation_QuestionType subproblemInformation::FREE_RESP;
const subproblemInformation_QuestionType subproblemInformation::CHECK_BOX;
const subproblemInformation_QuestionType subproblemInformation::QuestionType_MIN;
const subproblemInformation_QuestionType subproblemInformation::QuestionType_MAX;
const int subproblemInformation::QuestionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int subproblemInformation::kQuestionTextFieldNumber;
const int subproblemInformation::kQuestionTypeFieldNumber;
const int subproblemInformation::kOptionsFieldNumber;
const int subproblemInformation::kGradeWeightFieldNumber;
const int subproblemInformation::kGradeFieldNumber;
#endif  // !_MSC_VER

subproblemInformation::subproblemInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void subproblemInformation::InitAsDefaultInstance() {
}

subproblemInformation::subproblemInformation(const subproblemInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void subproblemInformation::SharedCtor() {
  _cached_size_ = 0;
  questiontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  questiontype_ = 1;
  options_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gradeweight_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

subproblemInformation::~subproblemInformation() {
  SharedDtor();
}

void subproblemInformation::SharedDtor() {
  if (questiontext_ != &::google::protobuf::internal::kEmptyString) {
    delete questiontext_;
  }
  if (options_ != &::google::protobuf::internal::kEmptyString) {
    delete options_;
  }
  if (this != default_instance_) {
  }
}

void subproblemInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subproblemInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return subproblemInformation_descriptor_;
}

const subproblemInformation& subproblemInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

subproblemInformation* subproblemInformation::default_instance_ = NULL;

subproblemInformation* subproblemInformation::New() const {
  return new subproblemInformation;
}

void subproblemInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_questiontext()) {
      if (questiontext_ != &::google::protobuf::internal::kEmptyString) {
        questiontext_->clear();
      }
    }
    questiontype_ = 1;
    if (has_options()) {
      if (options_ != &::google::protobuf::internal::kEmptyString) {
        options_->clear();
      }
    }
    gradeweight_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool subproblemInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string questionText = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_questiontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->questiontext().data(), this->questiontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questionType;
        break;
      }

      // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::subproblemInformation_QuestionType_IsValid(value)) {
            set_questiontype(static_cast< ::protobuf::srl::school::subproblemInformation_QuestionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // optional bytes options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gradeWeight;
        break;
      }

      // optional int32 gradeWeight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gradeWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gradeweight_)));
          set_has_gradeweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }

      // optional int32 grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void subproblemInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string questionText = 1;
  if (has_questiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questiontext().data(), this->questiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->questiontext(), output);
  }

  // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
  if (has_questiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->questiontype(), output);
  }

  // optional bytes options = 3;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->options(), output);
  }

  // optional int32 gradeWeight = 4;
  if (has_gradeweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gradeweight(), output);
  }

  // optional int32 grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* subproblemInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string questionText = 1;
  if (has_questiontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->questiontext().data(), this->questiontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->questiontext(), target);
  }

  // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
  if (has_questiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->questiontype(), target);
  }

  // optional bytes options = 3;
  if (has_options()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->options(), target);
  }

  // optional int32 gradeWeight = 4;
  if (has_gradeweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gradeweight(), target);
  }

  // optional int32 grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int subproblemInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string questionText = 1;
    if (has_questiontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->questiontext());
    }

    // optional .protobuf.srl.school.subproblemInformation.QuestionType questionType = 2 [default = SKETCH];
    if (has_questiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->questiontype());
    }

    // optional bytes options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->options());
    }

    // optional int32 gradeWeight = 4;
    if (has_gradeweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gradeweight());
    }

    // optional int32 grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subproblemInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const subproblemInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const subproblemInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void subproblemInformation::MergeFrom(const subproblemInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questiontext()) {
      set_questiontext(from.questiontext());
    }
    if (from.has_questiontype()) {
      set_questiontype(from.questiontype());
    }
    if (from.has_options()) {
      set_options(from.options());
    }
    if (from.has_gradeweight()) {
      set_gradeweight(from.gradeweight());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void subproblemInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subproblemInformation::CopyFrom(const subproblemInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subproblemInformation::IsInitialized() const {

  return true;
}

void subproblemInformation::Swap(subproblemInformation* other) {
  if (other != this) {
    std::swap(questiontext_, other->questiontext_);
    std::swap(questiontype_, other->questiontype_);
    std::swap(options_, other->options_);
    std::swap(gradeweight_, other->gradeweight_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata subproblemInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = subproblemInformation_descriptor_;
  metadata.reflection = subproblemInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DateTime::kYearFieldNumber;
const int DateTime::kMonthFieldNumber;
const int DateTime::kDayFieldNumber;
const int DateTime::kHourFieldNumber;
const int DateTime::kMinuteFieldNumber;
const int DateTime::kSecondFieldNumber;
const int DateTime::kMillisecondFieldNumber;
#endif  // !_MSC_VER

DateTime::DateTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DateTime::InitAsDefaultInstance() {
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DateTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hour_ = 0;
  minute_ = 0;
  second_ = 0;
  millisecond_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime::~DateTime() {
  SharedDtor();
}

void DateTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTime_descriptor_;
}

const DateTime& DateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New() const {
  return new DateTime;
}

void DateTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0;
    month_ = 0;
    day_ = 0;
    hour_ = 0;
    minute_ = 0;
    second_ = 0;
    millisecond_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional int32 day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hour;
        break;
      }

      // optional int32 hour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minute;
        break;
      }

      // optional int32 minute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_second;
        break;
      }

      // optional int32 second = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_millisecond;
        break;
      }

      // optional uint64 millisecond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millisecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &millisecond_)));
          set_has_millisecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 hour = 4;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // optional int32 minute = 5;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minute(), output);
  }

  // optional int32 second = 6;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  // optional uint64 millisecond = 7;
  if (has_millisecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->millisecond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 hour = 4;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // optional int32 minute = 5;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minute(), target);
  }

  // optional int32 second = 6;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  // optional uint64 millisecond = 7;
  if (has_millisecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->millisecond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DateTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 minute = 5;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }

    // optional int32 second = 6;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // optional uint64 millisecond = 7;
    if (has_millisecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->millisecond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_millisecond()) {
      set_millisecond(from.millisecond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {

  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(second_, other->second_);
    std::swap(millisecond_, other->millisecond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateTime_descriptor_;
  metadata.reflection = DateTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DomainInformation::kStuffFieldNumber;
#endif  // !_MSC_VER

DomainInformation::DomainInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DomainInformation::InitAsDefaultInstance() {
}

DomainInformation::DomainInformation(const DomainInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DomainInformation::SharedCtor() {
  _cached_size_ = 0;
  stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DomainInformation::~DomainInformation() {
  SharedDtor();
}

void DomainInformation::SharedDtor() {
  if (stuff_ != &::google::protobuf::internal::kEmptyString) {
    delete stuff_;
  }
  if (this != default_instance_) {
  }
}

void DomainInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DomainInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DomainInformation_descriptor_;
}

const DomainInformation& DomainInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

DomainInformation* DomainInformation::default_instance_ = NULL;

DomainInformation* DomainInformation::New() const {
  return new DomainInformation;
}

void DomainInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stuff()) {
      if (stuff_ != &::google::protobuf::internal::kEmptyString) {
        stuff_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DomainInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stuff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stuff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stuff().data(), this->stuff().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DomainInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stuff = 1;
  if (has_stuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stuff().data(), this->stuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stuff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DomainInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stuff = 1;
  if (has_stuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stuff().data(), this->stuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stuff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DomainInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stuff = 1;
    if (has_stuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stuff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomainInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DomainInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DomainInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DomainInformation::MergeFrom(const DomainInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stuff()) {
      set_stuff(from.stuff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DomainInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainInformation::CopyFrom(const DomainInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainInformation::IsInitialized() const {

  return true;
}

void DomainInformation::Swap(DomainInformation* other) {
  if (other != this) {
    std::swap(stuff_, other->stuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DomainInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DomainInformation_descriptor_;
  metadata.reflection = DomainInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int State::kPublishedFieldNumber;
const int State::kAccessibleFieldNumber;
const int State::kPastDueFieldNumber;
const int State::kStartedFieldNumber;
const int State::kCompletedFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  published_ = false;
  accessible_ = false;
  pastdue_ = false;
  started_ = false;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_ = false;
    accessible_ = false;
    pastdue_ = false;
    started_ = false;
    completed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool published = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &published_)));
          set_has_published();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accessible;
        break;
      }

      // optional bool accessible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accessible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accessible_)));
          set_has_accessible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pastDue;
        break;
      }

      // optional bool pastDue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pastDue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pastdue_)));
          set_has_pastdue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_started;
        break;
      }

      // optional bool started = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_started:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &started_)));
          set_has_started();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_completed;
        break;
      }

      // optional bool completed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool published = 1;
  if (has_published()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->published(), output);
  }

  // optional bool accessible = 2;
  if (has_accessible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accessible(), output);
  }

  // optional bool pastDue = 3;
  if (has_pastdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pastdue(), output);
  }

  // optional bool started = 4;
  if (has_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->started(), output);
  }

  // optional bool completed = 5;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool published = 1;
  if (has_published()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->published(), target);
  }

  // optional bool accessible = 2;
  if (has_accessible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accessible(), target);
  }

  // optional bool pastDue = 3;
  if (has_pastdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pastdue(), target);
  }

  // optional bool started = 4;
  if (has_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->started(), target);
  }

  // optional bool completed = 5;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool published = 1;
    if (has_published()) {
      total_size += 1 + 1;
    }

    // optional bool accessible = 2;
    if (has_accessible()) {
      total_size += 1 + 1;
    }

    // optional bool pastDue = 3;
    if (has_pastdue()) {
      total_size += 1 + 1;
    }

    // optional bool started = 4;
    if (has_started()) {
      total_size += 1 + 1;
    }

    // optional bool completed = 5;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published()) {
      set_published(from.published());
    }
    if (from.has_accessible()) {
      set_accessible(from.accessible());
    }
    if (from.has_pastdue()) {
      set_pastdue(from.pastdue());
    }
    if (from.has_started()) {
      set_started(from.started());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {

  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(published_, other->published_);
    std::swap(accessible_, other->accessible_);
    std::swap(pastdue_, other->pastdue_);
    std::swap(started_, other->started_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlUser::kUsernameFieldNumber;
const int SrlUser::kUserTypeFieldNumber;
const int SrlUser::kEmailFieldNumber;
#endif  // !_MSC_VER

SrlUser::SrlUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlUser::InitAsDefaultInstance() {
}

SrlUser::SrlUser(const SrlUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlUser::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usertype_ = 5;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlUser::~SrlUser() {
  SharedDtor();
}

void SrlUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void SrlUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlUser_descriptor_;
}

const SrlUser& SrlUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlUser* SrlUser::default_instance_ = NULL;

SrlUser* SrlUser::New() const {
  return new SrlUser;
}

void SrlUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    usertype_ = 5;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userType;
        break;
      }

      // optional .protobuf.srl.school.UserType userType = 2 [default = GUEST];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::school::UserType_IsValid(value)) {
            set_usertype(static_cast< ::protobuf::srl::school::UserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional .protobuf.srl.school.UserType userType = 2 [default = GUEST];
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->usertype(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional .protobuf.srl.school.UserType userType = 2 [default = GUEST];
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->usertype(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional .protobuf.srl.school.UserType userType = 2 [default = GUEST];
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usertype());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlUser::MergeFrom(const SrlUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlUser::CopyFrom(const SrlUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SrlUser::Swap(SrlUser* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(usertype_, other->usertype_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlUser_descriptor_;
  metadata.reflection = SrlUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlGroup::kUserIdFieldNumber;
const int SrlGroup::kGroupIdFieldNumber;
const int SrlGroup::kGroupNameFieldNumber;
#endif  // !_MSC_VER

SrlGroup::SrlGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlGroup::InitAsDefaultInstance() {
}

SrlGroup::SrlGroup(const SrlGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlGroup::~SrlGroup() {
  SharedDtor();
}

void SrlGroup::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void SrlGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlGroup_descriptor_;
}

const SrlGroup& SrlGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlGroup* SrlGroup::default_instance_ = NULL;

SrlGroup* SrlGroup::New() const {
  return new SrlGroup;
}

void SrlGroup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  userid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid(this->userid_size() - 1).data(),
            this->userid(this->userid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userId;
        if (input->ExpectTag(18)) goto parse_groupId;
        break;
      }

      // required string groupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groupName;
        break;
      }

      // optional string groupName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string userId = 1;
  for (int i = 0; i < this->userid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userid(i).data(), this->userid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(i), output);
  }

  // required string groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupid(), output);
  }

  // optional string groupName = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->groupname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string userId = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid(i).data(), this->userid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->userid(i), target);
  }

  // required string groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // optional string groupName = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional string groupName = 3;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated string userId = 1;
  total_size += 1 * this->userid_size();
  for (int i = 0; i < this->userid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlGroup::MergeFrom(const SrlGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlGroup::CopyFrom(const SrlGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void SrlGroup::Swap(SrlGroup* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlGroup_descriptor_;
  metadata.reflection = SrlGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlSchoolId::kCourseIdFieldNumber;
const int SrlSchoolId::kAssignmentIdFieldNumber;
const int SrlSchoolId::kProblemIdFieldNumber;
#endif  // !_MSC_VER

SrlSchoolId::SrlSchoolId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSchoolId::InitAsDefaultInstance() {
}

SrlSchoolId::SrlSchoolId(const SrlSchoolId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSchoolId::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSchoolId::~SrlSchoolId() {
  SharedDtor();
}

void SrlSchoolId::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    delete problemid_;
  }
  if (this != default_instance_) {
  }
}

void SrlSchoolId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSchoolId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSchoolId_descriptor_;
}

const SrlSchoolId& SrlSchoolId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlSchoolId* SrlSchoolId::default_instance_ = NULL;

SrlSchoolId* SrlSchoolId::New() const {
  return new SrlSchoolId;
}

void SrlSchoolId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_assignmentid()) {
      if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
        assignmentid_->clear();
      }
    }
    if (has_problemid()) {
      if (problemid_ != &::google::protobuf::internal::kEmptyString) {
        problemid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSchoolId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignmentId;
        break;
      }

      // optional string assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid().data(), this->assignmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problemId;
        break;
      }

      // optional string problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemid().data(), this->problemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSchoolId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assignmentid(), output);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->problemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSchoolId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assignmentid(), target);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->problemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSchoolId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // optional string assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentid());
    }

    // optional string problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSchoolId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSchoolId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSchoolId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSchoolId::MergeFrom(const SrlSchoolId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSchoolId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSchoolId::CopyFrom(const SrlSchoolId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSchoolId::IsInitialized() const {

  return true;
}

void SrlSchoolId::Swap(SrlSchoolId* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSchoolId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSchoolId_descriptor_;
  metadata.reflection = SrlSchoolId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlPermission::kAdminPermissionFieldNumber;
const int SrlPermission::kModeratorPermissionFieldNumber;
const int SrlPermission::kUserPermissionFieldNumber;
#endif  // !_MSC_VER

SrlPermission::SrlPermission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlPermission::InitAsDefaultInstance() {
}

SrlPermission::SrlPermission(const SrlPermission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlPermission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlPermission::~SrlPermission() {
  SharedDtor();
}

void SrlPermission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrlPermission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlPermission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlPermission_descriptor_;
}

const SrlPermission& SrlPermission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fschool_2eproto();
  return *default_instance_;
}

SrlPermission* SrlPermission::default_instance_ = NULL;

SrlPermission* SrlPermission::New() const {
  return new SrlPermission;
}

void SrlPermission::Clear() {
  adminpermission_.Clear();
  moderatorpermission_.Clear();
  userpermission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlPermission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string adminPermission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adminPermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_adminpermission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adminpermission(this->adminpermission_size() - 1).data(),
            this->adminpermission(this->adminpermission_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_adminPermission;
        if (input->ExpectTag(18)) goto parse_moderatorPermission;
        break;
      }

      // repeated string moderatorPermission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moderatorPermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_moderatorpermission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->moderatorpermission(this->moderatorpermission_size() - 1).data(),
            this->moderatorpermission(this->moderatorpermission_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_moderatorPermission;
        if (input->ExpectTag(26)) goto parse_userPermission;
        break;
      }

      // repeated string userPermission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userpermission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpermission(this->userpermission_size() - 1).data(),
            this->userpermission(this->userpermission_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userPermission;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlPermission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string adminPermission = 1;
  for (int i = 0; i < this->adminpermission_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->adminpermission(i).data(), this->adminpermission(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->adminpermission(i), output);
  }

  // repeated string moderatorPermission = 2;
  for (int i = 0; i < this->moderatorpermission_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->moderatorpermission(i).data(), this->moderatorpermission(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->moderatorpermission(i), output);
  }

  // repeated string userPermission = 3;
  for (int i = 0; i < this->userpermission_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userpermission(i).data(), this->userpermission(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userpermission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlPermission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string adminPermission = 1;
  for (int i = 0; i < this->adminpermission_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adminpermission(i).data(), this->adminpermission(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->adminpermission(i), target);
  }

  // repeated string moderatorPermission = 2;
  for (int i = 0; i < this->moderatorpermission_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->moderatorpermission(i).data(), this->moderatorpermission(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->moderatorpermission(i), target);
  }

  // repeated string userPermission = 3;
  for (int i = 0; i < this->userpermission_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpermission(i).data(), this->userpermission(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->userpermission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlPermission::ByteSize() const {
  int total_size = 0;

  // repeated string adminPermission = 1;
  total_size += 1 * this->adminpermission_size();
  for (int i = 0; i < this->adminpermission_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->adminpermission(i));
  }

  // repeated string moderatorPermission = 2;
  total_size += 1 * this->moderatorpermission_size();
  for (int i = 0; i < this->moderatorpermission_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->moderatorpermission(i));
  }

  // repeated string userPermission = 3;
  total_size += 1 * this->userpermission_size();
  for (int i = 0; i < this->userpermission_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userpermission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlPermission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlPermission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlPermission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlPermission::MergeFrom(const SrlPermission& from) {
  GOOGLE_CHECK_NE(&from, this);
  adminpermission_.MergeFrom(from.adminpermission_);
  moderatorpermission_.MergeFrom(from.moderatorpermission_);
  userpermission_.MergeFrom(from.userpermission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlPermission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlPermission::CopyFrom(const SrlPermission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlPermission::IsInitialized() const {

  return true;
}

void SrlPermission::Swap(SrlPermission* other) {
  if (other != this) {
    adminpermission_.Swap(&other->adminpermission_);
    moderatorpermission_.Swap(&other->moderatorpermission_);
    userpermission_.Swap(&other->userpermission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlPermission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlPermission_descriptor_;
  metadata.reflection = SrlPermission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace school
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
