// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/message.proto

#ifndef PROTOBUF_input_2fmessage_2eproto__INCLUDED
#define PROTOBUF_input_2fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace request {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fmessage_2eproto();
void protobuf_AssignDesc_input_2fmessage_2eproto();
void protobuf_ShutdownFile_input_2fmessage_2eproto();

class Request;
class LoginInformation;

enum Request_MessageType {
  Request_MessageType_LOGIN = 0,
  Request_MessageType_DATA_REQUEST = 1,
  Request_MessageType_DATA_INSERT = 2,
  Request_MessageType_DATA_UPDATE = 3,
  Request_MessageType_DATA_REMOVE = 4,
  Request_MessageType_RECOGNITION = 5,
  Request_MessageType_LOADING = 6,
  Request_MessageType_SUBMISSION = 7
};
bool Request_MessageType_IsValid(int value);
const Request_MessageType Request_MessageType_MessageType_MIN = Request_MessageType_LOGIN;
const Request_MessageType Request_MessageType_MessageType_MAX = Request_MessageType_SUBMISSION;
const int Request_MessageType_MessageType_ARRAYSIZE = Request_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_MessageType_descriptor();
inline const ::std::string& Request_MessageType_Name(Request_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_MessageType_descriptor(), value);
}
inline bool Request_MessageType_Parse(
    const ::std::string& name, Request_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_MessageType>(
    Request_MessageType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_MessageType MessageType;
  static const MessageType LOGIN = Request_MessageType_LOGIN;
  static const MessageType DATA_REQUEST = Request_MessageType_DATA_REQUEST;
  static const MessageType DATA_INSERT = Request_MessageType_DATA_INSERT;
  static const MessageType DATA_UPDATE = Request_MessageType_DATA_UPDATE;
  static const MessageType DATA_REMOVE = Request_MessageType_DATA_REMOVE;
  static const MessageType RECOGNITION = Request_MessageType_RECOGNITION;
  static const MessageType LOADING = Request_MessageType_LOADING;
  static const MessageType SUBMISSION = Request_MessageType_SUBMISSION;
  static inline bool MessageType_IsValid(int value) {
    return Request_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Request_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Request_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Request_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Request_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Request_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Request_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .protobuf.srl.request.Request.MessageType requestType = 1 [default = LOGIN];
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::protobuf::srl::request::Request_MessageType requesttype() const;
  inline void set_requesttype(::protobuf::srl::request::Request_MessageType value);

  // optional .protobuf.srl.request.LoginInformation login = 2;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 2;
  inline const ::protobuf::srl::request::LoginInformation& login() const;
  inline ::protobuf::srl::request::LoginInformation* mutable_login();
  inline ::protobuf::srl::request::LoginInformation* release_login();
  inline void set_allocated_login(::protobuf::srl::request::LoginInformation* login);

  // optional bytes otherData = 3;
  inline bool has_otherdata() const;
  inline void clear_otherdata();
  static const int kOtherDataFieldNumber = 3;
  inline const ::std::string& otherdata() const;
  inline void set_otherdata(const ::std::string& value);
  inline void set_otherdata(const char* value);
  inline void set_otherdata(const void* value, size_t size);
  inline ::std::string* mutable_otherdata();
  inline ::std::string* release_otherdata();
  inline void set_allocated_otherdata(::std::string* otherdata);

  // optional string responseText = 4;
  inline bool has_responsetext() const;
  inline void clear_responsetext();
  static const int kResponseTextFieldNumber = 4;
  inline const ::std::string& responsetext() const;
  inline void set_responsetext(const ::std::string& value);
  inline void set_responsetext(const char* value);
  inline void set_responsetext(const char* value, size_t size);
  inline ::std::string* mutable_responsetext();
  inline ::std::string* release_responsetext();
  inline void set_allocated_responsetext(::std::string* responsetext);

  // optional string sessionInfo = 5;
  inline bool has_sessioninfo() const;
  inline void clear_sessioninfo();
  static const int kSessionInfoFieldNumber = 5;
  inline const ::std::string& sessioninfo() const;
  inline void set_sessioninfo(const ::std::string& value);
  inline void set_sessioninfo(const char* value);
  inline void set_sessioninfo(const char* value, size_t size);
  inline ::std::string* mutable_sessioninfo();
  inline ::std::string* release_sessioninfo();
  inline void set_allocated_sessioninfo(::std::string* sessioninfo);

  // optional string serversideId = 6;
  inline bool has_serversideid() const;
  inline void clear_serversideid();
  static const int kServersideIdFieldNumber = 6;
  inline const ::std::string& serversideid() const;
  inline void set_serversideid(const ::std::string& value);
  inline void set_serversideid(const char* value);
  inline void set_serversideid(const char* value, size_t size);
  inline ::std::string* mutable_serversideid();
  inline ::std::string* release_serversideid();
  inline void set_allocated_serversideid(::std::string* serversideid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.request.Request)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_otherdata();
  inline void clear_has_otherdata();
  inline void set_has_responsetext();
  inline void clear_has_responsetext();
  inline void set_has_sessioninfo();
  inline void clear_has_sessioninfo();
  inline void set_has_serversideid();
  inline void clear_has_serversideid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::request::LoginInformation* login_;
  ::std::string* otherdata_;
  ::std::string* responsetext_;
  ::std::string* sessioninfo_;
  ::std::string* serversideid_;
  int requesttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fmessage_2eproto();
  friend void protobuf_AssignDesc_input_2fmessage_2eproto();
  friend void protobuf_ShutdownFile_input_2fmessage_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class LoginInformation : public ::google::protobuf::Message {
 public:
  LoginInformation();
  virtual ~LoginInformation();

  LoginInformation(const LoginInformation& from);

  inline LoginInformation& operator=(const LoginInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInformation& default_instance();

  void Swap(LoginInformation* other);

  // implements Message ----------------------------------------------

  LoginInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInformation& from);
  void MergeFrom(const LoginInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bool isLoggedIn = 3;
  inline bool has_isloggedin() const;
  inline void clear_isloggedin();
  static const int kIsLoggedInFieldNumber = 3;
  inline bool isloggedin() const;
  inline void set_isloggedin(bool value);

  // optional bool isInstructor = 4;
  inline bool has_isinstructor() const;
  inline void clear_isinstructor();
  static const int kIsInstructorFieldNumber = 4;
  inline bool isinstructor() const;
  inline void set_isinstructor(bool value);

  // optional bool isRegistering = 5;
  inline bool has_isregistering() const;
  inline void clear_isregistering();
  static const int kIsRegisteringFieldNumber = 5;
  inline bool isregistering() const;
  inline void set_isregistering(bool value);

  // optional string email = 6;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 6;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string userId = 7;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 7;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.request.LoginInformation)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_isloggedin();
  inline void clear_has_isloggedin();
  inline void set_has_isinstructor();
  inline void clear_has_isinstructor();
  inline void set_has_isregistering();
  inline void clear_has_isregistering();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* email_;
  ::std::string* userid_;
  bool isloggedin_;
  bool isinstructor_;
  bool isregistering_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fmessage_2eproto();
  friend void protobuf_AssignDesc_input_2fmessage_2eproto();
  friend void protobuf_ShutdownFile_input_2fmessage_2eproto();

  void InitAsDefaultInstance();
  static LoginInformation* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .protobuf.srl.request.Request.MessageType requestType = 1 [default = LOGIN];
inline bool Request::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::protobuf::srl::request::Request_MessageType Request::requesttype() const {
  return static_cast< ::protobuf::srl::request::Request_MessageType >(requesttype_);
}
inline void Request::set_requesttype(::protobuf::srl::request::Request_MessageType value) {
  assert(::protobuf::srl::request::Request_MessageType_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
}

// optional .protobuf.srl.request.LoginInformation login = 2;
inline bool Request::has_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_login() {
  if (login_ != NULL) login_->::protobuf::srl::request::LoginInformation::Clear();
  clear_has_login();
}
inline const ::protobuf::srl::request::LoginInformation& Request::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::protobuf::srl::request::LoginInformation* Request::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::protobuf::srl::request::LoginInformation;
  return login_;
}
inline ::protobuf::srl::request::LoginInformation* Request::release_login() {
  clear_has_login();
  ::protobuf::srl::request::LoginInformation* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Request::set_allocated_login(::protobuf::srl::request::LoginInformation* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
}

// optional bytes otherData = 3;
inline bool Request::has_otherdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_otherdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_otherdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_otherdata() {
  if (otherdata_ != &::google::protobuf::internal::kEmptyString) {
    otherdata_->clear();
  }
  clear_has_otherdata();
}
inline const ::std::string& Request::otherdata() const {
  return *otherdata_;
}
inline void Request::set_otherdata(const ::std::string& value) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(value);
}
inline void Request::set_otherdata(const char* value) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(value);
}
inline void Request::set_otherdata(const void* value, size_t size) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_otherdata() {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  return otherdata_;
}
inline ::std::string* Request::release_otherdata() {
  clear_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otherdata_;
    otherdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_otherdata(::std::string* otherdata) {
  if (otherdata_ != &::google::protobuf::internal::kEmptyString) {
    delete otherdata_;
  }
  if (otherdata) {
    set_has_otherdata();
    otherdata_ = otherdata;
  } else {
    clear_has_otherdata();
    otherdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string responseText = 4;
inline bool Request::has_responsetext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_responsetext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_responsetext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_responsetext() {
  if (responsetext_ != &::google::protobuf::internal::kEmptyString) {
    responsetext_->clear();
  }
  clear_has_responsetext();
}
inline const ::std::string& Request::responsetext() const {
  return *responsetext_;
}
inline void Request::set_responsetext(const ::std::string& value) {
  set_has_responsetext();
  if (responsetext_ == &::google::protobuf::internal::kEmptyString) {
    responsetext_ = new ::std::string;
  }
  responsetext_->assign(value);
}
inline void Request::set_responsetext(const char* value) {
  set_has_responsetext();
  if (responsetext_ == &::google::protobuf::internal::kEmptyString) {
    responsetext_ = new ::std::string;
  }
  responsetext_->assign(value);
}
inline void Request::set_responsetext(const char* value, size_t size) {
  set_has_responsetext();
  if (responsetext_ == &::google::protobuf::internal::kEmptyString) {
    responsetext_ = new ::std::string;
  }
  responsetext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_responsetext() {
  set_has_responsetext();
  if (responsetext_ == &::google::protobuf::internal::kEmptyString) {
    responsetext_ = new ::std::string;
  }
  return responsetext_;
}
inline ::std::string* Request::release_responsetext() {
  clear_has_responsetext();
  if (responsetext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = responsetext_;
    responsetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_responsetext(::std::string* responsetext) {
  if (responsetext_ != &::google::protobuf::internal::kEmptyString) {
    delete responsetext_;
  }
  if (responsetext) {
    set_has_responsetext();
    responsetext_ = responsetext;
  } else {
    clear_has_responsetext();
    responsetext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sessionInfo = 5;
inline bool Request::has_sessioninfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_sessioninfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_sessioninfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_sessioninfo() {
  if (sessioninfo_ != &::google::protobuf::internal::kEmptyString) {
    sessioninfo_->clear();
  }
  clear_has_sessioninfo();
}
inline const ::std::string& Request::sessioninfo() const {
  return *sessioninfo_;
}
inline void Request::set_sessioninfo(const ::std::string& value) {
  set_has_sessioninfo();
  if (sessioninfo_ == &::google::protobuf::internal::kEmptyString) {
    sessioninfo_ = new ::std::string;
  }
  sessioninfo_->assign(value);
}
inline void Request::set_sessioninfo(const char* value) {
  set_has_sessioninfo();
  if (sessioninfo_ == &::google::protobuf::internal::kEmptyString) {
    sessioninfo_ = new ::std::string;
  }
  sessioninfo_->assign(value);
}
inline void Request::set_sessioninfo(const char* value, size_t size) {
  set_has_sessioninfo();
  if (sessioninfo_ == &::google::protobuf::internal::kEmptyString) {
    sessioninfo_ = new ::std::string;
  }
  sessioninfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_sessioninfo() {
  set_has_sessioninfo();
  if (sessioninfo_ == &::google::protobuf::internal::kEmptyString) {
    sessioninfo_ = new ::std::string;
  }
  return sessioninfo_;
}
inline ::std::string* Request::release_sessioninfo() {
  clear_has_sessioninfo();
  if (sessioninfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessioninfo_;
    sessioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_sessioninfo(::std::string* sessioninfo) {
  if (sessioninfo_ != &::google::protobuf::internal::kEmptyString) {
    delete sessioninfo_;
  }
  if (sessioninfo) {
    set_has_sessioninfo();
    sessioninfo_ = sessioninfo;
  } else {
    clear_has_sessioninfo();
    sessioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string serversideId = 6;
inline bool Request::has_serversideid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_serversideid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_serversideid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_serversideid() {
  if (serversideid_ != &::google::protobuf::internal::kEmptyString) {
    serversideid_->clear();
  }
  clear_has_serversideid();
}
inline const ::std::string& Request::serversideid() const {
  return *serversideid_;
}
inline void Request::set_serversideid(const ::std::string& value) {
  set_has_serversideid();
  if (serversideid_ == &::google::protobuf::internal::kEmptyString) {
    serversideid_ = new ::std::string;
  }
  serversideid_->assign(value);
}
inline void Request::set_serversideid(const char* value) {
  set_has_serversideid();
  if (serversideid_ == &::google::protobuf::internal::kEmptyString) {
    serversideid_ = new ::std::string;
  }
  serversideid_->assign(value);
}
inline void Request::set_serversideid(const char* value, size_t size) {
  set_has_serversideid();
  if (serversideid_ == &::google::protobuf::internal::kEmptyString) {
    serversideid_ = new ::std::string;
  }
  serversideid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_serversideid() {
  set_has_serversideid();
  if (serversideid_ == &::google::protobuf::internal::kEmptyString) {
    serversideid_ = new ::std::string;
  }
  return serversideid_;
}
inline ::std::string* Request::release_serversideid() {
  clear_has_serversideid();
  if (serversideid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serversideid_;
    serversideid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_serversideid(::std::string* serversideid) {
  if (serversideid_ != &::google::protobuf::internal::kEmptyString) {
    delete serversideid_;
  }
  if (serversideid) {
    set_has_serversideid();
    serversideid_ = serversideid;
  } else {
    clear_has_serversideid();
    serversideid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginInformation

// required string username = 1;
inline bool LoginInformation::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginInformation::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginInformation::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginInformation::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginInformation::username() const {
  return *username_;
}
inline void LoginInformation::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginInformation::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginInformation::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInformation::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginInformation::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInformation::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool LoginInformation::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginInformation::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginInformation::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginInformation::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginInformation::password() const {
  return *password_;
}
inline void LoginInformation::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginInformation::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginInformation::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInformation::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginInformation::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInformation::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isLoggedIn = 3;
inline bool LoginInformation::has_isloggedin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginInformation::set_has_isloggedin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginInformation::clear_has_isloggedin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginInformation::clear_isloggedin() {
  isloggedin_ = false;
  clear_has_isloggedin();
}
inline bool LoginInformation::isloggedin() const {
  return isloggedin_;
}
inline void LoginInformation::set_isloggedin(bool value) {
  set_has_isloggedin();
  isloggedin_ = value;
}

// optional bool isInstructor = 4;
inline bool LoginInformation::has_isinstructor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginInformation::set_has_isinstructor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginInformation::clear_has_isinstructor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginInformation::clear_isinstructor() {
  isinstructor_ = false;
  clear_has_isinstructor();
}
inline bool LoginInformation::isinstructor() const {
  return isinstructor_;
}
inline void LoginInformation::set_isinstructor(bool value) {
  set_has_isinstructor();
  isinstructor_ = value;
}

// optional bool isRegistering = 5;
inline bool LoginInformation::has_isregistering() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginInformation::set_has_isregistering() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginInformation::clear_has_isregistering() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginInformation::clear_isregistering() {
  isregistering_ = false;
  clear_has_isregistering();
}
inline bool LoginInformation::isregistering() const {
  return isregistering_;
}
inline void LoginInformation::set_isregistering(bool value) {
  set_has_isregistering();
  isregistering_ = value;
}

// optional string email = 6;
inline bool LoginInformation::has_email() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginInformation::set_has_email() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginInformation::clear_has_email() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginInformation::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& LoginInformation::email() const {
  return *email_;
}
inline void LoginInformation::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void LoginInformation::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void LoginInformation::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInformation::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* LoginInformation::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInformation::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userId = 7;
inline bool LoginInformation::has_userid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginInformation::set_has_userid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginInformation::clear_has_userid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginInformation::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& LoginInformation::userid() const {
  return *userid_;
}
inline void LoginInformation::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void LoginInformation::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void LoginInformation::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInformation::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* LoginInformation::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInformation::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::request::Request_MessageType>() {
  return ::protobuf::srl::request::Request_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fmessage_2eproto__INCLUDED
