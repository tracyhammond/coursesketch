// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/submission.proto

#ifndef PROTOBUF_input_2fsubmission_2eproto__INCLUDED
#define PROTOBUF_input_2fsubmission_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "input/school.pb.h"
#include "input/sketch.pb.h"
#include "input/commands.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace submission {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fsubmission_2eproto();
void protobuf_AssignDesc_input_2fsubmission_2eproto();
void protobuf_ShutdownFile_input_2fsubmission_2eproto();

class SrlSubmission;
class SrlSolution;
class SrlExperiment;

// ===================================================================

class SrlSubmission : public ::google::protobuf::Message {
 public:
  SrlSubmission();
  virtual ~SrlSubmission();

  SrlSubmission(const SrlSubmission& from);

  inline SrlSubmission& operator=(const SrlSubmission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlSubmission& default_instance();

  void Swap(SrlSubmission* other);

  // implements Message ----------------------------------------------

  SrlSubmission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlSubmission& from);
  void MergeFrom(const SrlSubmission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf.srl.school.SrlSchoolId schoolId = 1;
  inline bool has_schoolid() const;
  inline void clear_schoolid();
  static const int kSchoolIdFieldNumber = 1;
  inline const ::protobuf::srl::school::SrlSchoolId& schoolid() const;
  inline ::protobuf::srl::school::SrlSchoolId* mutable_schoolid();
  inline ::protobuf::srl::school::SrlSchoolId* release_schoolid();
  inline void set_allocated_schoolid(::protobuf::srl::school::SrlSchoolId* schoolid);

  // optional .protobuf.srl.commands.SrlUpdateList updateList = 2;
  inline bool has_updatelist() const;
  inline void clear_updatelist();
  static const int kUpdateListFieldNumber = 2;
  inline const ::protobuf::srl::commands::SrlUpdateList& updatelist() const;
  inline ::protobuf::srl::commands::SrlUpdateList* mutable_updatelist();
  inline ::protobuf::srl::commands::SrlUpdateList* release_updatelist();
  inline void set_allocated_updatelist(::protobuf::srl::commands::SrlUpdateList* updatelist);

  // optional .protobuf.srl.sketch.SrlSketch sketch = 3;
  inline bool has_sketch() const;
  inline void clear_sketch();
  static const int kSketchFieldNumber = 3;
  inline const ::protobuf::srl::sketch::SrlSketch& sketch() const;
  inline ::protobuf::srl::sketch::SrlSketch* mutable_sketch();
  inline ::protobuf::srl::sketch::SrlSketch* release_sketch();
  inline void set_allocated_sketch(::protobuf::srl::sketch::SrlSketch* sketch);

  // optional bytes extraData = 4;
  inline bool has_extradata() const;
  inline void clear_extradata();
  static const int kExtraDataFieldNumber = 4;
  inline const ::std::string& extradata() const;
  inline void set_extradata(const ::std::string& value);
  inline void set_extradata(const char* value);
  inline void set_extradata(const void* value, size_t size);
  inline ::std::string* mutable_extradata();
  inline ::std::string* release_extradata();
  inline void set_allocated_extradata(::std::string* extradata);

  // optional .protobuf.srl.school.SrlPermission viewPermissions = 5;
  inline bool has_viewpermissions() const;
  inline void clear_viewpermissions();
  static const int kViewPermissionsFieldNumber = 5;
  inline const ::protobuf::srl::school::SrlPermission& viewpermissions() const;
  inline ::protobuf::srl::school::SrlPermission* mutable_viewpermissions();
  inline ::protobuf::srl::school::SrlPermission* release_viewpermissions();
  inline void set_allocated_viewpermissions(::protobuf::srl::school::SrlPermission* viewpermissions);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlSubmission)
 private:
  inline void set_has_schoolid();
  inline void clear_has_schoolid();
  inline void set_has_updatelist();
  inline void clear_has_updatelist();
  inline void set_has_sketch();
  inline void clear_has_sketch();
  inline void set_has_extradata();
  inline void clear_has_extradata();
  inline void set_has_viewpermissions();
  inline void clear_has_viewpermissions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::school::SrlSchoolId* schoolid_;
  ::protobuf::srl::commands::SrlUpdateList* updatelist_;
  ::protobuf::srl::sketch::SrlSketch* sketch_;
  ::std::string* extradata_;
  ::protobuf::srl::school::SrlPermission* viewpermissions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlSubmission* default_instance_;
};
// -------------------------------------------------------------------

class SrlSolution : public ::google::protobuf::Message {
 public:
  SrlSolution();
  virtual ~SrlSolution();

  SrlSolution(const SrlSolution& from);

  inline SrlSolution& operator=(const SrlSolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlSolution& default_instance();

  void Swap(SrlSolution* other);

  // implements Message ----------------------------------------------

  SrlSolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlSolution& from);
  void MergeFrom(const SrlSolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional bool allowedInProblemBank = 1;
  inline bool has_allowedinproblembank() const;
  inline void clear_allowedinproblembank();
  static const int kAllowedInProblemBankFieldNumber = 1;
  inline bool allowedinproblembank() const;
  inline void set_allowedinproblembank(bool value);

  // optional bool practiceProblem = 3;
  inline bool has_practiceproblem() const;
  inline void clear_practiceproblem();
  static const int kPracticeProblemFieldNumber = 3;
  inline bool practiceproblem() const;
  inline void set_practiceproblem(bool value);

  // optional .protobuf.srl.school.SrlPermission adminPermissions = 2;
  inline bool has_adminpermissions() const;
  inline void clear_adminpermissions();
  static const int kAdminPermissionsFieldNumber = 2;
  inline const ::protobuf::srl::school::SrlPermission& adminpermissions() const;
  inline ::protobuf::srl::school::SrlPermission* mutable_adminpermissions();
  inline ::protobuf::srl::school::SrlPermission* release_adminpermissions();
  inline void set_allocated_adminpermissions(::protobuf::srl::school::SrlPermission* adminpermissions);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlSolution)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_allowedinproblembank();
  inline void clear_has_allowedinproblembank();
  inline void set_has_practiceproblem();
  inline void clear_has_practiceproblem();
  inline void set_has_adminpermissions();
  inline void clear_has_adminpermissions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;
  ::protobuf::srl::school::SrlPermission* adminpermissions_;
  bool allowedinproblembank_;
  bool practiceproblem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlSolution* default_instance_;
};
// -------------------------------------------------------------------

class SrlExperiment : public ::google::protobuf::Message {
 public:
  SrlExperiment();
  virtual ~SrlExperiment();

  SrlExperiment(const SrlExperiment& from);

  inline SrlExperiment& operator=(const SrlExperiment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlExperiment& default_instance();

  void Swap(SrlExperiment* other);

  // implements Message ----------------------------------------------

  SrlExperiment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlExperiment& from);
  void MergeFrom(const SrlExperiment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlExperiment)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlExperiment* default_instance_;
};
// ===================================================================


// ===================================================================

// SrlSubmission

// optional .protobuf.srl.school.SrlSchoolId schoolId = 1;
inline bool SrlSubmission::has_schoolid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlSubmission::set_has_schoolid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlSubmission::clear_has_schoolid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlSubmission::clear_schoolid() {
  if (schoolid_ != NULL) schoolid_->::protobuf::srl::school::SrlSchoolId::Clear();
  clear_has_schoolid();
}
inline const ::protobuf::srl::school::SrlSchoolId& SrlSubmission::schoolid() const {
  return schoolid_ != NULL ? *schoolid_ : *default_instance_->schoolid_;
}
inline ::protobuf::srl::school::SrlSchoolId* SrlSubmission::mutable_schoolid() {
  set_has_schoolid();
  if (schoolid_ == NULL) schoolid_ = new ::protobuf::srl::school::SrlSchoolId;
  return schoolid_;
}
inline ::protobuf::srl::school::SrlSchoolId* SrlSubmission::release_schoolid() {
  clear_has_schoolid();
  ::protobuf::srl::school::SrlSchoolId* temp = schoolid_;
  schoolid_ = NULL;
  return temp;
}
inline void SrlSubmission::set_allocated_schoolid(::protobuf::srl::school::SrlSchoolId* schoolid) {
  delete schoolid_;
  schoolid_ = schoolid;
  if (schoolid) {
    set_has_schoolid();
  } else {
    clear_has_schoolid();
  }
}

// optional .protobuf.srl.commands.SrlUpdateList updateList = 2;
inline bool SrlSubmission::has_updatelist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlSubmission::set_has_updatelist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlSubmission::clear_has_updatelist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlSubmission::clear_updatelist() {
  if (updatelist_ != NULL) updatelist_->::protobuf::srl::commands::SrlUpdateList::Clear();
  clear_has_updatelist();
}
inline const ::protobuf::srl::commands::SrlUpdateList& SrlSubmission::updatelist() const {
  return updatelist_ != NULL ? *updatelist_ : *default_instance_->updatelist_;
}
inline ::protobuf::srl::commands::SrlUpdateList* SrlSubmission::mutable_updatelist() {
  set_has_updatelist();
  if (updatelist_ == NULL) updatelist_ = new ::protobuf::srl::commands::SrlUpdateList;
  return updatelist_;
}
inline ::protobuf::srl::commands::SrlUpdateList* SrlSubmission::release_updatelist() {
  clear_has_updatelist();
  ::protobuf::srl::commands::SrlUpdateList* temp = updatelist_;
  updatelist_ = NULL;
  return temp;
}
inline void SrlSubmission::set_allocated_updatelist(::protobuf::srl::commands::SrlUpdateList* updatelist) {
  delete updatelist_;
  updatelist_ = updatelist;
  if (updatelist) {
    set_has_updatelist();
  } else {
    clear_has_updatelist();
  }
}

// optional .protobuf.srl.sketch.SrlSketch sketch = 3;
inline bool SrlSubmission::has_sketch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlSubmission::set_has_sketch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlSubmission::clear_has_sketch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlSubmission::clear_sketch() {
  if (sketch_ != NULL) sketch_->::protobuf::srl::sketch::SrlSketch::Clear();
  clear_has_sketch();
}
inline const ::protobuf::srl::sketch::SrlSketch& SrlSubmission::sketch() const {
  return sketch_ != NULL ? *sketch_ : *default_instance_->sketch_;
}
inline ::protobuf::srl::sketch::SrlSketch* SrlSubmission::mutable_sketch() {
  set_has_sketch();
  if (sketch_ == NULL) sketch_ = new ::protobuf::srl::sketch::SrlSketch;
  return sketch_;
}
inline ::protobuf::srl::sketch::SrlSketch* SrlSubmission::release_sketch() {
  clear_has_sketch();
  ::protobuf::srl::sketch::SrlSketch* temp = sketch_;
  sketch_ = NULL;
  return temp;
}
inline void SrlSubmission::set_allocated_sketch(::protobuf::srl::sketch::SrlSketch* sketch) {
  delete sketch_;
  sketch_ = sketch;
  if (sketch) {
    set_has_sketch();
  } else {
    clear_has_sketch();
  }
}

// optional bytes extraData = 4;
inline bool SrlSubmission::has_extradata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlSubmission::set_has_extradata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlSubmission::clear_has_extradata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlSubmission::clear_extradata() {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    extradata_->clear();
  }
  clear_has_extradata();
}
inline const ::std::string& SrlSubmission::extradata() const {
  return *extradata_;
}
inline void SrlSubmission::set_extradata(const ::std::string& value) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::kEmptyString) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(value);
}
inline void SrlSubmission::set_extradata(const char* value) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::kEmptyString) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(value);
}
inline void SrlSubmission::set_extradata(const void* value, size_t size) {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::kEmptyString) {
    extradata_ = new ::std::string;
  }
  extradata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSubmission::mutable_extradata() {
  set_has_extradata();
  if (extradata_ == &::google::protobuf::internal::kEmptyString) {
    extradata_ = new ::std::string;
  }
  return extradata_;
}
inline ::std::string* SrlSubmission::release_extradata() {
  clear_has_extradata();
  if (extradata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extradata_;
    extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSubmission::set_allocated_extradata(::std::string* extradata) {
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (extradata) {
    set_has_extradata();
    extradata_ = extradata;
  } else {
    clear_has_extradata();
    extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protobuf.srl.school.SrlPermission viewPermissions = 5;
inline bool SrlSubmission::has_viewpermissions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrlSubmission::set_has_viewpermissions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrlSubmission::clear_has_viewpermissions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrlSubmission::clear_viewpermissions() {
  if (viewpermissions_ != NULL) viewpermissions_->::protobuf::srl::school::SrlPermission::Clear();
  clear_has_viewpermissions();
}
inline const ::protobuf::srl::school::SrlPermission& SrlSubmission::viewpermissions() const {
  return viewpermissions_ != NULL ? *viewpermissions_ : *default_instance_->viewpermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSubmission::mutable_viewpermissions() {
  set_has_viewpermissions();
  if (viewpermissions_ == NULL) viewpermissions_ = new ::protobuf::srl::school::SrlPermission;
  return viewpermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSubmission::release_viewpermissions() {
  clear_has_viewpermissions();
  ::protobuf::srl::school::SrlPermission* temp = viewpermissions_;
  viewpermissions_ = NULL;
  return temp;
}
inline void SrlSubmission::set_allocated_viewpermissions(::protobuf::srl::school::SrlPermission* viewpermissions) {
  delete viewpermissions_;
  viewpermissions_ = viewpermissions;
  if (viewpermissions) {
    set_has_viewpermissions();
  } else {
    clear_has_viewpermissions();
  }
}

// -------------------------------------------------------------------

// SrlSolution

// optional string userId = 4;
inline bool SrlSolution::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlSolution::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlSolution::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlSolution::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& SrlSolution::userid() const {
  return *userid_;
}
inline void SrlSolution::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlSolution::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlSolution::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSolution::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* SrlSolution::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSolution::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool allowedInProblemBank = 1;
inline bool SrlSolution::has_allowedinproblembank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlSolution::set_has_allowedinproblembank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlSolution::clear_has_allowedinproblembank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlSolution::clear_allowedinproblembank() {
  allowedinproblembank_ = false;
  clear_has_allowedinproblembank();
}
inline bool SrlSolution::allowedinproblembank() const {
  return allowedinproblembank_;
}
inline void SrlSolution::set_allowedinproblembank(bool value) {
  set_has_allowedinproblembank();
  allowedinproblembank_ = value;
}

// optional bool practiceProblem = 3;
inline bool SrlSolution::has_practiceproblem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlSolution::set_has_practiceproblem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlSolution::clear_has_practiceproblem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlSolution::clear_practiceproblem() {
  practiceproblem_ = false;
  clear_has_practiceproblem();
}
inline bool SrlSolution::practiceproblem() const {
  return practiceproblem_;
}
inline void SrlSolution::set_practiceproblem(bool value) {
  set_has_practiceproblem();
  practiceproblem_ = value;
}

// optional .protobuf.srl.school.SrlPermission adminPermissions = 2;
inline bool SrlSolution::has_adminpermissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlSolution::set_has_adminpermissions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlSolution::clear_has_adminpermissions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlSolution::clear_adminpermissions() {
  if (adminpermissions_ != NULL) adminpermissions_->::protobuf::srl::school::SrlPermission::Clear();
  clear_has_adminpermissions();
}
inline const ::protobuf::srl::school::SrlPermission& SrlSolution::adminpermissions() const {
  return adminpermissions_ != NULL ? *adminpermissions_ : *default_instance_->adminpermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSolution::mutable_adminpermissions() {
  set_has_adminpermissions();
  if (adminpermissions_ == NULL) adminpermissions_ = new ::protobuf::srl::school::SrlPermission;
  return adminpermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSolution::release_adminpermissions() {
  clear_has_adminpermissions();
  ::protobuf::srl::school::SrlPermission* temp = adminpermissions_;
  adminpermissions_ = NULL;
  return temp;
}
inline void SrlSolution::set_allocated_adminpermissions(::protobuf::srl::school::SrlPermission* adminpermissions) {
  delete adminpermissions_;
  adminpermissions_ = adminpermissions;
  if (adminpermissions) {
    set_has_adminpermissions();
  } else {
    clear_has_adminpermissions();
  }
}

// -------------------------------------------------------------------

// SrlExperiment

// optional string userId = 1;
inline bool SrlExperiment::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlExperiment::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlExperiment::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlExperiment::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& SrlExperiment::userid() const {
  return *userid_;
}
inline void SrlExperiment::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlExperiment::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlExperiment::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlExperiment::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* SrlExperiment::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlExperiment::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace submission
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fsubmission_2eproto__INCLUDED
