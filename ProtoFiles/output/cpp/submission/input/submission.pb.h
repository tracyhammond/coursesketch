// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/submission.proto

#ifndef PROTOBUF_input_2fsubmission_2eproto__INCLUDED
#define PROTOBUF_input_2fsubmission_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "input/school.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace submission {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fsubmission_2eproto();
void protobuf_AssignDesc_input_2fsubmission_2eproto();
void protobuf_ShutdownFile_input_2fsubmission_2eproto();

class SrlSubmission;
class SrlSolution;
class SrlExperiment;

// ===================================================================

class SrlSubmission : public ::google::protobuf::Message {
 public:
  SrlSubmission();
  virtual ~SrlSubmission();

  SrlSubmission(const SrlSubmission& from);

  inline SrlSubmission& operator=(const SrlSubmission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlSubmission& default_instance();

  void Swap(SrlSubmission* other);

  // implements Message ----------------------------------------------

  SrlSubmission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlSubmission& from);
  void MergeFrom(const SrlSubmission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes updateList = 2;
  inline bool has_updatelist() const;
  inline void clear_updatelist();
  static const int kUpdateListFieldNumber = 2;
  inline const ::std::string& updatelist() const;
  inline void set_updatelist(const ::std::string& value);
  inline void set_updatelist(const char* value);
  inline void set_updatelist(const void* value, size_t size);
  inline ::std::string* mutable_updatelist();
  inline ::std::string* release_updatelist();
  inline void set_allocated_updatelist(::std::string* updatelist);

  // optional bytes sketch = 3;
  inline bool has_sketch() const;
  inline void clear_sketch();
  static const int kSketchFieldNumber = 3;
  inline const ::std::string& sketch() const;
  inline void set_sketch(const ::std::string& value);
  inline void set_sketch(const char* value);
  inline void set_sketch(const void* value, size_t size);
  inline ::std::string* mutable_sketch();
  inline ::std::string* release_sketch();
  inline void set_allocated_sketch(::std::string* sketch);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlSubmission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_updatelist();
  inline void clear_has_updatelist();
  inline void set_has_sketch();
  inline void clear_has_sketch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* updatelist_;
  ::std::string* sketch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlSubmission* default_instance_;
};
// -------------------------------------------------------------------

class SrlSolution : public ::google::protobuf::Message {
 public:
  SrlSolution();
  virtual ~SrlSolution();

  SrlSolution(const SrlSolution& from);

  inline SrlSolution& operator=(const SrlSolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlSolution& default_instance();

  void Swap(SrlSolution* other);

  // implements Message ----------------------------------------------

  SrlSolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlSolution& from);
  void MergeFrom(const SrlSolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool allowedInProblemBank = 1;
  inline bool has_allowedinproblembank() const;
  inline void clear_allowedinproblembank();
  static const int kAllowedInProblemBankFieldNumber = 1;
  inline bool allowedinproblembank() const;
  inline void set_allowedinproblembank(bool value);

  // optional bool isPracticeProblem = 2;
  inline bool has_ispracticeproblem() const;
  inline void clear_ispracticeproblem();
  static const int kIsPracticeProblemFieldNumber = 2;
  inline bool ispracticeproblem() const;
  inline void set_ispracticeproblem(bool value);

  // optional .protobuf.srl.school.SrlPermission accessPermissions = 3;
  inline bool has_accesspermissions() const;
  inline void clear_accesspermissions();
  static const int kAccessPermissionsFieldNumber = 3;
  inline const ::protobuf::srl::school::SrlPermission& accesspermissions() const;
  inline ::protobuf::srl::school::SrlPermission* mutable_accesspermissions();
  inline ::protobuf::srl::school::SrlPermission* release_accesspermissions();
  inline void set_allocated_accesspermissions(::protobuf::srl::school::SrlPermission* accesspermissions);

  // optional .protobuf.srl.submission.SrlSubmission submission = 4;
  inline bool has_submission() const;
  inline void clear_submission();
  static const int kSubmissionFieldNumber = 4;
  inline const ::protobuf::srl::submission::SrlSubmission& submission() const;
  inline ::protobuf::srl::submission::SrlSubmission* mutable_submission();
  inline ::protobuf::srl::submission::SrlSubmission* release_submission();
  inline void set_allocated_submission(::protobuf::srl::submission::SrlSubmission* submission);

  // optional string problemBankId = 5;
  inline bool has_problembankid() const;
  inline void clear_problembankid();
  static const int kProblemBankIdFieldNumber = 5;
  inline const ::std::string& problembankid() const;
  inline void set_problembankid(const ::std::string& value);
  inline void set_problembankid(const char* value);
  inline void set_problembankid(const char* value, size_t size);
  inline ::std::string* mutable_problembankid();
  inline ::std::string* release_problembankid();
  inline void set_allocated_problembankid(::std::string* problembankid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlSolution)
 private:
  inline void set_has_allowedinproblembank();
  inline void clear_has_allowedinproblembank();
  inline void set_has_ispracticeproblem();
  inline void clear_has_ispracticeproblem();
  inline void set_has_accesspermissions();
  inline void clear_has_accesspermissions();
  inline void set_has_submission();
  inline void clear_has_submission();
  inline void set_has_problembankid();
  inline void clear_has_problembankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::school::SrlPermission* accesspermissions_;
  ::protobuf::srl::submission::SrlSubmission* submission_;
  ::std::string* problembankid_;
  bool allowedinproblembank_;
  bool ispracticeproblem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlSolution* default_instance_;
};
// -------------------------------------------------------------------

class SrlExperiment : public ::google::protobuf::Message {
 public:
  SrlExperiment();
  virtual ~SrlExperiment();

  SrlExperiment(const SrlExperiment& from);

  inline SrlExperiment& operator=(const SrlExperiment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlExperiment& default_instance();

  void Swap(SrlExperiment* other);

  // implements Message ----------------------------------------------

  SrlExperiment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlExperiment& from);
  void MergeFrom(const SrlExperiment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string courseId = 1;
  inline bool has_courseid() const;
  inline void clear_courseid();
  static const int kCourseIdFieldNumber = 1;
  inline const ::std::string& courseid() const;
  inline void set_courseid(const ::std::string& value);
  inline void set_courseid(const char* value);
  inline void set_courseid(const char* value, size_t size);
  inline ::std::string* mutable_courseid();
  inline ::std::string* release_courseid();
  inline void set_allocated_courseid(::std::string* courseid);

  // optional string assignmentId = 2;
  inline bool has_assignmentid() const;
  inline void clear_assignmentid();
  static const int kAssignmentIdFieldNumber = 2;
  inline const ::std::string& assignmentid() const;
  inline void set_assignmentid(const ::std::string& value);
  inline void set_assignmentid(const char* value);
  inline void set_assignmentid(const char* value, size_t size);
  inline ::std::string* mutable_assignmentid();
  inline ::std::string* release_assignmentid();
  inline void set_allocated_assignmentid(::std::string* assignmentid);

  // optional string problemId = 3;
  inline bool has_problemid() const;
  inline void clear_problemid();
  static const int kProblemIdFieldNumber = 3;
  inline const ::std::string& problemid() const;
  inline void set_problemid(const ::std::string& value);
  inline void set_problemid(const char* value);
  inline void set_problemid(const char* value, size_t size);
  inline ::std::string* mutable_problemid();
  inline ::std::string* release_problemid();
  inline void set_allocated_problemid(::std::string* problemid);

  // optional string userId = 5;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 5;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional .protobuf.srl.school.SrlPermission accessPermissions = 6;
  inline bool has_accesspermissions() const;
  inline void clear_accesspermissions();
  static const int kAccessPermissionsFieldNumber = 6;
  inline const ::protobuf::srl::school::SrlPermission& accesspermissions() const;
  inline ::protobuf::srl::school::SrlPermission* mutable_accesspermissions();
  inline ::protobuf::srl::school::SrlPermission* release_accesspermissions();
  inline void set_allocated_accesspermissions(::protobuf::srl::school::SrlPermission* accesspermissions);

  // optional .protobuf.srl.submission.SrlSubmission submission = 7;
  inline bool has_submission() const;
  inline void clear_submission();
  static const int kSubmissionFieldNumber = 7;
  inline const ::protobuf::srl::submission::SrlSubmission& submission() const;
  inline ::protobuf::srl::submission::SrlSubmission* mutable_submission();
  inline ::protobuf::srl::submission::SrlSubmission* release_submission();
  inline void set_allocated_submission(::protobuf::srl::submission::SrlSubmission* submission);

  // @@protoc_insertion_point(class_scope:protobuf.srl.submission.SrlExperiment)
 private:
  inline void set_has_courseid();
  inline void clear_has_courseid();
  inline void set_has_assignmentid();
  inline void clear_has_assignmentid();
  inline void set_has_problemid();
  inline void clear_has_problemid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_accesspermissions();
  inline void clear_has_accesspermissions();
  inline void set_has_submission();
  inline void clear_has_submission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* courseid_;
  ::std::string* assignmentid_;
  ::std::string* problemid_;
  ::std::string* userid_;
  ::protobuf::srl::school::SrlPermission* accesspermissions_;
  ::protobuf::srl::submission::SrlSubmission* submission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fsubmission_2eproto();
  friend void protobuf_AssignDesc_input_2fsubmission_2eproto();
  friend void protobuf_ShutdownFile_input_2fsubmission_2eproto();

  void InitAsDefaultInstance();
  static SrlExperiment* default_instance_;
};
// ===================================================================


// ===================================================================

// SrlSubmission

// optional string id = 1;
inline bool SrlSubmission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlSubmission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlSubmission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlSubmission::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SrlSubmission::id() const {
  return *id_;
}
inline void SrlSubmission::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SrlSubmission::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SrlSubmission::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSubmission::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SrlSubmission::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSubmission::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes updateList = 2;
inline bool SrlSubmission::has_updatelist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlSubmission::set_has_updatelist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlSubmission::clear_has_updatelist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlSubmission::clear_updatelist() {
  if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
    updatelist_->clear();
  }
  clear_has_updatelist();
}
inline const ::std::string& SrlSubmission::updatelist() const {
  return *updatelist_;
}
inline void SrlSubmission::set_updatelist(const ::std::string& value) {
  set_has_updatelist();
  if (updatelist_ == &::google::protobuf::internal::kEmptyString) {
    updatelist_ = new ::std::string;
  }
  updatelist_->assign(value);
}
inline void SrlSubmission::set_updatelist(const char* value) {
  set_has_updatelist();
  if (updatelist_ == &::google::protobuf::internal::kEmptyString) {
    updatelist_ = new ::std::string;
  }
  updatelist_->assign(value);
}
inline void SrlSubmission::set_updatelist(const void* value, size_t size) {
  set_has_updatelist();
  if (updatelist_ == &::google::protobuf::internal::kEmptyString) {
    updatelist_ = new ::std::string;
  }
  updatelist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSubmission::mutable_updatelist() {
  set_has_updatelist();
  if (updatelist_ == &::google::protobuf::internal::kEmptyString) {
    updatelist_ = new ::std::string;
  }
  return updatelist_;
}
inline ::std::string* SrlSubmission::release_updatelist() {
  clear_has_updatelist();
  if (updatelist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatelist_;
    updatelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSubmission::set_allocated_updatelist(::std::string* updatelist) {
  if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
    delete updatelist_;
  }
  if (updatelist) {
    set_has_updatelist();
    updatelist_ = updatelist;
  } else {
    clear_has_updatelist();
    updatelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sketch = 3;
inline bool SrlSubmission::has_sketch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlSubmission::set_has_sketch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlSubmission::clear_has_sketch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlSubmission::clear_sketch() {
  if (sketch_ != &::google::protobuf::internal::kEmptyString) {
    sketch_->clear();
  }
  clear_has_sketch();
}
inline const ::std::string& SrlSubmission::sketch() const {
  return *sketch_;
}
inline void SrlSubmission::set_sketch(const ::std::string& value) {
  set_has_sketch();
  if (sketch_ == &::google::protobuf::internal::kEmptyString) {
    sketch_ = new ::std::string;
  }
  sketch_->assign(value);
}
inline void SrlSubmission::set_sketch(const char* value) {
  set_has_sketch();
  if (sketch_ == &::google::protobuf::internal::kEmptyString) {
    sketch_ = new ::std::string;
  }
  sketch_->assign(value);
}
inline void SrlSubmission::set_sketch(const void* value, size_t size) {
  set_has_sketch();
  if (sketch_ == &::google::protobuf::internal::kEmptyString) {
    sketch_ = new ::std::string;
  }
  sketch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSubmission::mutable_sketch() {
  set_has_sketch();
  if (sketch_ == &::google::protobuf::internal::kEmptyString) {
    sketch_ = new ::std::string;
  }
  return sketch_;
}
inline ::std::string* SrlSubmission::release_sketch() {
  clear_has_sketch();
  if (sketch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sketch_;
    sketch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSubmission::set_allocated_sketch(::std::string* sketch) {
  if (sketch_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_;
  }
  if (sketch) {
    set_has_sketch();
    sketch_ = sketch;
  } else {
    clear_has_sketch();
    sketch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SrlSolution

// optional bool allowedInProblemBank = 1;
inline bool SrlSolution::has_allowedinproblembank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlSolution::set_has_allowedinproblembank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlSolution::clear_has_allowedinproblembank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlSolution::clear_allowedinproblembank() {
  allowedinproblembank_ = false;
  clear_has_allowedinproblembank();
}
inline bool SrlSolution::allowedinproblembank() const {
  return allowedinproblembank_;
}
inline void SrlSolution::set_allowedinproblembank(bool value) {
  set_has_allowedinproblembank();
  allowedinproblembank_ = value;
}

// optional bool isPracticeProblem = 2;
inline bool SrlSolution::has_ispracticeproblem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlSolution::set_has_ispracticeproblem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlSolution::clear_has_ispracticeproblem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlSolution::clear_ispracticeproblem() {
  ispracticeproblem_ = false;
  clear_has_ispracticeproblem();
}
inline bool SrlSolution::ispracticeproblem() const {
  return ispracticeproblem_;
}
inline void SrlSolution::set_ispracticeproblem(bool value) {
  set_has_ispracticeproblem();
  ispracticeproblem_ = value;
}

// optional .protobuf.srl.school.SrlPermission accessPermissions = 3;
inline bool SrlSolution::has_accesspermissions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlSolution::set_has_accesspermissions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlSolution::clear_has_accesspermissions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlSolution::clear_accesspermissions() {
  if (accesspermissions_ != NULL) accesspermissions_->::protobuf::srl::school::SrlPermission::Clear();
  clear_has_accesspermissions();
}
inline const ::protobuf::srl::school::SrlPermission& SrlSolution::accesspermissions() const {
  return accesspermissions_ != NULL ? *accesspermissions_ : *default_instance_->accesspermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSolution::mutable_accesspermissions() {
  set_has_accesspermissions();
  if (accesspermissions_ == NULL) accesspermissions_ = new ::protobuf::srl::school::SrlPermission;
  return accesspermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlSolution::release_accesspermissions() {
  clear_has_accesspermissions();
  ::protobuf::srl::school::SrlPermission* temp = accesspermissions_;
  accesspermissions_ = NULL;
  return temp;
}
inline void SrlSolution::set_allocated_accesspermissions(::protobuf::srl::school::SrlPermission* accesspermissions) {
  delete accesspermissions_;
  accesspermissions_ = accesspermissions;
  if (accesspermissions) {
    set_has_accesspermissions();
  } else {
    clear_has_accesspermissions();
  }
}

// optional .protobuf.srl.submission.SrlSubmission submission = 4;
inline bool SrlSolution::has_submission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlSolution::set_has_submission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlSolution::clear_has_submission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlSolution::clear_submission() {
  if (submission_ != NULL) submission_->::protobuf::srl::submission::SrlSubmission::Clear();
  clear_has_submission();
}
inline const ::protobuf::srl::submission::SrlSubmission& SrlSolution::submission() const {
  return submission_ != NULL ? *submission_ : *default_instance_->submission_;
}
inline ::protobuf::srl::submission::SrlSubmission* SrlSolution::mutable_submission() {
  set_has_submission();
  if (submission_ == NULL) submission_ = new ::protobuf::srl::submission::SrlSubmission;
  return submission_;
}
inline ::protobuf::srl::submission::SrlSubmission* SrlSolution::release_submission() {
  clear_has_submission();
  ::protobuf::srl::submission::SrlSubmission* temp = submission_;
  submission_ = NULL;
  return temp;
}
inline void SrlSolution::set_allocated_submission(::protobuf::srl::submission::SrlSubmission* submission) {
  delete submission_;
  submission_ = submission;
  if (submission) {
    set_has_submission();
  } else {
    clear_has_submission();
  }
}

// optional string problemBankId = 5;
inline bool SrlSolution::has_problembankid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrlSolution::set_has_problembankid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrlSolution::clear_has_problembankid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrlSolution::clear_problembankid() {
  if (problembankid_ != &::google::protobuf::internal::kEmptyString) {
    problembankid_->clear();
  }
  clear_has_problembankid();
}
inline const ::std::string& SrlSolution::problembankid() const {
  return *problembankid_;
}
inline void SrlSolution::set_problembankid(const ::std::string& value) {
  set_has_problembankid();
  if (problembankid_ == &::google::protobuf::internal::kEmptyString) {
    problembankid_ = new ::std::string;
  }
  problembankid_->assign(value);
}
inline void SrlSolution::set_problembankid(const char* value) {
  set_has_problembankid();
  if (problembankid_ == &::google::protobuf::internal::kEmptyString) {
    problembankid_ = new ::std::string;
  }
  problembankid_->assign(value);
}
inline void SrlSolution::set_problembankid(const char* value, size_t size) {
  set_has_problembankid();
  if (problembankid_ == &::google::protobuf::internal::kEmptyString) {
    problembankid_ = new ::std::string;
  }
  problembankid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlSolution::mutable_problembankid() {
  set_has_problembankid();
  if (problembankid_ == &::google::protobuf::internal::kEmptyString) {
    problembankid_ = new ::std::string;
  }
  return problembankid_;
}
inline ::std::string* SrlSolution::release_problembankid() {
  clear_has_problembankid();
  if (problembankid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = problembankid_;
    problembankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlSolution::set_allocated_problembankid(::std::string* problembankid) {
  if (problembankid_ != &::google::protobuf::internal::kEmptyString) {
    delete problembankid_;
  }
  if (problembankid) {
    set_has_problembankid();
    problembankid_ = problembankid;
  } else {
    clear_has_problembankid();
    problembankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SrlExperiment

// optional string courseId = 1;
inline bool SrlExperiment::has_courseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlExperiment::set_has_courseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlExperiment::clear_has_courseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlExperiment::clear_courseid() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    courseid_->clear();
  }
  clear_has_courseid();
}
inline const ::std::string& SrlExperiment::courseid() const {
  return *courseid_;
}
inline void SrlExperiment::set_courseid(const ::std::string& value) {
  set_has_courseid();
  if (courseid_ == &::google::protobuf::internal::kEmptyString) {
    courseid_ = new ::std::string;
  }
  courseid_->assign(value);
}
inline void SrlExperiment::set_courseid(const char* value) {
  set_has_courseid();
  if (courseid_ == &::google::protobuf::internal::kEmptyString) {
    courseid_ = new ::std::string;
  }
  courseid_->assign(value);
}
inline void SrlExperiment::set_courseid(const char* value, size_t size) {
  set_has_courseid();
  if (courseid_ == &::google::protobuf::internal::kEmptyString) {
    courseid_ = new ::std::string;
  }
  courseid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlExperiment::mutable_courseid() {
  set_has_courseid();
  if (courseid_ == &::google::protobuf::internal::kEmptyString) {
    courseid_ = new ::std::string;
  }
  return courseid_;
}
inline ::std::string* SrlExperiment::release_courseid() {
  clear_has_courseid();
  if (courseid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = courseid_;
    courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlExperiment::set_allocated_courseid(::std::string* courseid) {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (courseid) {
    set_has_courseid();
    courseid_ = courseid;
  } else {
    clear_has_courseid();
    courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string assignmentId = 2;
inline bool SrlExperiment::has_assignmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlExperiment::set_has_assignmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlExperiment::clear_has_assignmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlExperiment::clear_assignmentid() {
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    assignmentid_->clear();
  }
  clear_has_assignmentid();
}
inline const ::std::string& SrlExperiment::assignmentid() const {
  return *assignmentid_;
}
inline void SrlExperiment::set_assignmentid(const ::std::string& value) {
  set_has_assignmentid();
  if (assignmentid_ == &::google::protobuf::internal::kEmptyString) {
    assignmentid_ = new ::std::string;
  }
  assignmentid_->assign(value);
}
inline void SrlExperiment::set_assignmentid(const char* value) {
  set_has_assignmentid();
  if (assignmentid_ == &::google::protobuf::internal::kEmptyString) {
    assignmentid_ = new ::std::string;
  }
  assignmentid_->assign(value);
}
inline void SrlExperiment::set_assignmentid(const char* value, size_t size) {
  set_has_assignmentid();
  if (assignmentid_ == &::google::protobuf::internal::kEmptyString) {
    assignmentid_ = new ::std::string;
  }
  assignmentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlExperiment::mutable_assignmentid() {
  set_has_assignmentid();
  if (assignmentid_ == &::google::protobuf::internal::kEmptyString) {
    assignmentid_ = new ::std::string;
  }
  return assignmentid_;
}
inline ::std::string* SrlExperiment::release_assignmentid() {
  clear_has_assignmentid();
  if (assignmentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = assignmentid_;
    assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlExperiment::set_allocated_assignmentid(::std::string* assignmentid) {
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (assignmentid) {
    set_has_assignmentid();
    assignmentid_ = assignmentid;
  } else {
    clear_has_assignmentid();
    assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string problemId = 3;
inline bool SrlExperiment::has_problemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlExperiment::set_has_problemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlExperiment::clear_has_problemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlExperiment::clear_problemid() {
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    problemid_->clear();
  }
  clear_has_problemid();
}
inline const ::std::string& SrlExperiment::problemid() const {
  return *problemid_;
}
inline void SrlExperiment::set_problemid(const ::std::string& value) {
  set_has_problemid();
  if (problemid_ == &::google::protobuf::internal::kEmptyString) {
    problemid_ = new ::std::string;
  }
  problemid_->assign(value);
}
inline void SrlExperiment::set_problemid(const char* value) {
  set_has_problemid();
  if (problemid_ == &::google::protobuf::internal::kEmptyString) {
    problemid_ = new ::std::string;
  }
  problemid_->assign(value);
}
inline void SrlExperiment::set_problemid(const char* value, size_t size) {
  set_has_problemid();
  if (problemid_ == &::google::protobuf::internal::kEmptyString) {
    problemid_ = new ::std::string;
  }
  problemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlExperiment::mutable_problemid() {
  set_has_problemid();
  if (problemid_ == &::google::protobuf::internal::kEmptyString) {
    problemid_ = new ::std::string;
  }
  return problemid_;
}
inline ::std::string* SrlExperiment::release_problemid() {
  clear_has_problemid();
  if (problemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = problemid_;
    problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlExperiment::set_allocated_problemid(::std::string* problemid) {
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    delete problemid_;
  }
  if (problemid) {
    set_has_problemid();
    problemid_ = problemid;
  } else {
    clear_has_problemid();
    problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userId = 5;
inline bool SrlExperiment::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlExperiment::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlExperiment::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlExperiment::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& SrlExperiment::userid() const {
  return *userid_;
}
inline void SrlExperiment::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlExperiment::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void SrlExperiment::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlExperiment::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* SrlExperiment::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlExperiment::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protobuf.srl.school.SrlPermission accessPermissions = 6;
inline bool SrlExperiment::has_accesspermissions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrlExperiment::set_has_accesspermissions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrlExperiment::clear_has_accesspermissions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrlExperiment::clear_accesspermissions() {
  if (accesspermissions_ != NULL) accesspermissions_->::protobuf::srl::school::SrlPermission::Clear();
  clear_has_accesspermissions();
}
inline const ::protobuf::srl::school::SrlPermission& SrlExperiment::accesspermissions() const {
  return accesspermissions_ != NULL ? *accesspermissions_ : *default_instance_->accesspermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlExperiment::mutable_accesspermissions() {
  set_has_accesspermissions();
  if (accesspermissions_ == NULL) accesspermissions_ = new ::protobuf::srl::school::SrlPermission;
  return accesspermissions_;
}
inline ::protobuf::srl::school::SrlPermission* SrlExperiment::release_accesspermissions() {
  clear_has_accesspermissions();
  ::protobuf::srl::school::SrlPermission* temp = accesspermissions_;
  accesspermissions_ = NULL;
  return temp;
}
inline void SrlExperiment::set_allocated_accesspermissions(::protobuf::srl::school::SrlPermission* accesspermissions) {
  delete accesspermissions_;
  accesspermissions_ = accesspermissions;
  if (accesspermissions) {
    set_has_accesspermissions();
  } else {
    clear_has_accesspermissions();
  }
}

// optional .protobuf.srl.submission.SrlSubmission submission = 7;
inline bool SrlExperiment::has_submission() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SrlExperiment::set_has_submission() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SrlExperiment::clear_has_submission() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SrlExperiment::clear_submission() {
  if (submission_ != NULL) submission_->::protobuf::srl::submission::SrlSubmission::Clear();
  clear_has_submission();
}
inline const ::protobuf::srl::submission::SrlSubmission& SrlExperiment::submission() const {
  return submission_ != NULL ? *submission_ : *default_instance_->submission_;
}
inline ::protobuf::srl::submission::SrlSubmission* SrlExperiment::mutable_submission() {
  set_has_submission();
  if (submission_ == NULL) submission_ = new ::protobuf::srl::submission::SrlSubmission;
  return submission_;
}
inline ::protobuf::srl::submission::SrlSubmission* SrlExperiment::release_submission() {
  clear_has_submission();
  ::protobuf::srl::submission::SrlSubmission* temp = submission_;
  submission_ = NULL;
  return temp;
}
inline void SrlExperiment::set_allocated_submission(::protobuf::srl::submission::SrlSubmission* submission) {
  delete submission_;
  submission_ = submission;
  if (submission) {
    set_has_submission();
  } else {
    clear_has_submission();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace submission
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fsubmission_2eproto__INCLUDED
