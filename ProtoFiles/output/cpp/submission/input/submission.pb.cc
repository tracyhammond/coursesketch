// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/submission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/submission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace submission {

namespace {

const ::google::protobuf::Descriptor* SrlSubmission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSubmission_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlSolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlExperiment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlExperiment_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlChecksum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlChecksum_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlExperimentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlExperimentList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fsubmission_2eproto() {
  protobuf_AddDesc_input_2fsubmission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/submission.proto");
  GOOGLE_CHECK(file != NULL);
  SrlSubmission_descriptor_ = file->message_type(0);
  static const int SrlSubmission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, updatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, sketch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, submissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, checksum_),
  };
  SrlSubmission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSubmission_descriptor_,
      SrlSubmission::default_instance_,
      SrlSubmission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSubmission));
  SrlSolution_descriptor_ = file->message_type(1);
  static const int SrlSolution_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, allowedinproblembank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, ispracticeproblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, submission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, problembankid_),
  };
  SrlSolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSolution_descriptor_,
      SrlSolution::default_instance_,
      SrlSolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSolution));
  SrlExperiment_descriptor_ = file->message_type(2);
  static const int SrlExperiment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, submission_),
  };
  SrlExperiment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlExperiment_descriptor_,
      SrlExperiment::default_instance_,
      SrlExperiment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperiment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlExperiment));
  SrlChecksum_descriptor_ = file->message_type(3);
  static const int SrlChecksum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlChecksum, firstbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlChecksum, secondbits_),
  };
  SrlChecksum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlChecksum_descriptor_,
      SrlChecksum::default_instance_,
      SrlChecksum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlChecksum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlChecksum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlChecksum));
  SrlExperimentList_descriptor_ = file->message_type(4);
  static const int SrlExperimentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperimentList, experiments_),
  };
  SrlExperimentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlExperimentList_descriptor_,
      SrlExperimentList::default_instance_,
      SrlExperimentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperimentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlExperimentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlExperimentList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fsubmission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSubmission_descriptor_, &SrlSubmission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSolution_descriptor_, &SrlSolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlExperiment_descriptor_, &SrlExperiment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlChecksum_descriptor_, &SrlChecksum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlExperimentList_descriptor_, &SrlExperimentList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fsubmission_2eproto() {
  delete SrlSubmission::default_instance_;
  delete SrlSubmission_reflection_;
  delete SrlSolution::default_instance_;
  delete SrlSolution_reflection_;
  delete SrlExperiment::default_instance_;
  delete SrlExperiment_reflection_;
  delete SrlChecksum::default_instance_;
  delete SrlChecksum_reflection_;
  delete SrlExperimentList::default_instance_;
  delete SrlExperimentList_reflection_;
}

void protobuf_AddDesc_input_2fsubmission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026input/submission.proto\022\027protobuf.srl.s"
    "ubmission\"\217\001\n\rSrlSubmission\022\n\n\002id\030\001 \001(\t\022"
    "\022\n\nupdateList\030\002 \001(\014\022\016\n\006sketch\030\003 \001(\014\022\026\n\016s"
    "ubmissionTime\030\004 \001(\003\0226\n\010checksum\030\005 \001(\0132$."
    "protobuf.srl.submission.SrlChecksum\"\231\001\n\013"
    "SrlSolution\022\034\n\024allowedInProblemBank\030\001 \001("
    "\010\022\031\n\021isPracticeProblem\030\002 \001(\010\022:\n\nsubmissi"
    "on\030\003 \001(\0132&.protobuf.srl.submission.SrlSu"
    "bmission\022\025\n\rproblemBankId\030\004 \001(\t\"\226\001\n\rSrlE"
    "xperiment\022\020\n\010courseId\030\001 \001(\t\022\024\n\014assignmen"
    "tId\030\002 \001(\t\022\021\n\tproblemId\030\003 \001(\t\022\016\n\006userId\030\005"
    " \001(\t\022:\n\nsubmission\030\006 \001(\0132&.protobuf.srl."
    "submission.SrlSubmission\"4\n\013SrlChecksum\022"
    "\021\n\tfirstBits\030\001 \002(\003\022\022\n\nsecondBits\030\002 \002(\003\"P"
    "\n\021SrlExperimentList\022;\n\013experiments\030\001 \003(\013"
    "2&.protobuf.srl.submission.SrlExperiment", 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/submission.proto", &protobuf_RegisterTypes);
  SrlSubmission::default_instance_ = new SrlSubmission();
  SrlSolution::default_instance_ = new SrlSolution();
  SrlExperiment::default_instance_ = new SrlExperiment();
  SrlChecksum::default_instance_ = new SrlChecksum();
  SrlExperimentList::default_instance_ = new SrlExperimentList();
  SrlSubmission::default_instance_->InitAsDefaultInstance();
  SrlSolution::default_instance_->InitAsDefaultInstance();
  SrlExperiment::default_instance_->InitAsDefaultInstance();
  SrlChecksum::default_instance_->InitAsDefaultInstance();
  SrlExperimentList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fsubmission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fsubmission_2eproto {
  StaticDescriptorInitializer_input_2fsubmission_2eproto() {
    protobuf_AddDesc_input_2fsubmission_2eproto();
  }
} static_descriptor_initializer_input_2fsubmission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SrlSubmission::kIdFieldNumber;
const int SrlSubmission::kUpdateListFieldNumber;
const int SrlSubmission::kSketchFieldNumber;
const int SrlSubmission::kSubmissionTimeFieldNumber;
const int SrlSubmission::kChecksumFieldNumber;
#endif  // !_MSC_VER

SrlSubmission::SrlSubmission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSubmission::InitAsDefaultInstance() {
  checksum_ = const_cast< ::protobuf::srl::submission::SrlChecksum*>(&::protobuf::srl::submission::SrlChecksum::default_instance());
}

SrlSubmission::SrlSubmission(const SrlSubmission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSubmission::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sketch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submissiontime_ = GOOGLE_LONGLONG(0);
  checksum_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSubmission::~SrlSubmission() {
  SharedDtor();
}

void SrlSubmission::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
    delete updatelist_;
  }
  if (sketch_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_;
  }
  if (this != default_instance_) {
    delete checksum_;
  }
}

void SrlSubmission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSubmission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSubmission_descriptor_;
}

const SrlSubmission& SrlSubmission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlSubmission* SrlSubmission::default_instance_ = NULL;

SrlSubmission* SrlSubmission::New() const {
  return new SrlSubmission;
}

void SrlSubmission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_updatelist()) {
      if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
        updatelist_->clear();
      }
    }
    if (has_sketch()) {
      if (sketch_ != &::google::protobuf::internal::kEmptyString) {
        sketch_->clear();
      }
    }
    submissiontime_ = GOOGLE_LONGLONG(0);
    if (has_checksum()) {
      if (checksum_ != NULL) checksum_->::protobuf::srl::submission::SrlChecksum::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSubmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateList;
        break;
      }

      // optional bytes updateList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sketch;
        break;
      }

      // optional bytes sketch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sketch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_submissionTime;
        break;
      }

      // optional int64 submissionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &submissiontime_)));
          set_has_submissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_checksum;
        break;
      }

      // optional .protobuf.srl.submission.SrlChecksum checksum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSubmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional bytes updateList = 2;
  if (has_updatelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->updatelist(), output);
  }

  // optional bytes sketch = 3;
  if (has_sketch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sketch(), output);
  }

  // optional int64 submissionTime = 4;
  if (has_submissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->submissiontime(), output);
  }

  // optional .protobuf.srl.submission.SrlChecksum checksum = 5;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSubmission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bytes updateList = 2;
  if (has_updatelist()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->updatelist(), target);
  }

  // optional bytes sketch = 3;
  if (has_sketch()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sketch(), target);
  }

  // optional int64 submissionTime = 4;
  if (has_submissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->submissiontime(), target);
  }

  // optional .protobuf.srl.submission.SrlChecksum checksum = 5;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSubmission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bytes updateList = 2;
    if (has_updatelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatelist());
    }

    // optional bytes sketch = 3;
    if (has_sketch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sketch());
    }

    // optional int64 submissionTime = 4;
    if (has_submissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->submissiontime());
    }

    // optional .protobuf.srl.submission.SrlChecksum checksum = 5;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSubmission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSubmission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSubmission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSubmission::MergeFrom(const SrlSubmission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_updatelist()) {
      set_updatelist(from.updatelist());
    }
    if (from.has_sketch()) {
      set_sketch(from.sketch());
    }
    if (from.has_submissiontime()) {
      set_submissiontime(from.submissiontime());
    }
    if (from.has_checksum()) {
      mutable_checksum()->::protobuf::srl::submission::SrlChecksum::MergeFrom(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSubmission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSubmission::CopyFrom(const SrlSubmission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSubmission::IsInitialized() const {

  if (has_checksum()) {
    if (!this->checksum().IsInitialized()) return false;
  }
  return true;
}

void SrlSubmission::Swap(SrlSubmission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(updatelist_, other->updatelist_);
    std::swap(sketch_, other->sketch_);
    std::swap(submissiontime_, other->submissiontime_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSubmission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSubmission_descriptor_;
  metadata.reflection = SrlSubmission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlSolution::kAllowedInProblemBankFieldNumber;
const int SrlSolution::kIsPracticeProblemFieldNumber;
const int SrlSolution::kSubmissionFieldNumber;
const int SrlSolution::kProblemBankIdFieldNumber;
#endif  // !_MSC_VER

SrlSolution::SrlSolution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSolution::InitAsDefaultInstance() {
  submission_ = const_cast< ::protobuf::srl::submission::SrlSubmission*>(&::protobuf::srl::submission::SrlSubmission::default_instance());
}

SrlSolution::SrlSolution(const SrlSolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSolution::SharedCtor() {
  _cached_size_ = 0;
  allowedinproblembank_ = false;
  ispracticeproblem_ = false;
  submission_ = NULL;
  problembankid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSolution::~SrlSolution() {
  SharedDtor();
}

void SrlSolution::SharedDtor() {
  if (problembankid_ != &::google::protobuf::internal::kEmptyString) {
    delete problembankid_;
  }
  if (this != default_instance_) {
    delete submission_;
  }
}

void SrlSolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSolution_descriptor_;
}

const SrlSolution& SrlSolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlSolution* SrlSolution::default_instance_ = NULL;

SrlSolution* SrlSolution::New() const {
  return new SrlSolution;
}

void SrlSolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allowedinproblembank_ = false;
    ispracticeproblem_ = false;
    if (has_submission()) {
      if (submission_ != NULL) submission_->::protobuf::srl::submission::SrlSubmission::Clear();
    }
    if (has_problembankid()) {
      if (problembankid_ != &::google::protobuf::internal::kEmptyString) {
        problembankid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allowedInProblemBank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowedinproblembank_)));
          set_has_allowedinproblembank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isPracticeProblem;
        break;
      }

      // optional bool isPracticeProblem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPracticeProblem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispracticeproblem_)));
          set_has_ispracticeproblem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_submission;
        break;
      }

      // optional .protobuf.srl.submission.SrlSubmission submission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_problemBankId;
        break;
      }

      // optional string problemBankId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemBankId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problembankid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problembankid().data(), this->problembankid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool allowedInProblemBank = 1;
  if (has_allowedinproblembank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allowedinproblembank(), output);
  }

  // optional bool isPracticeProblem = 2;
  if (has_ispracticeproblem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispracticeproblem(), output);
  }

  // optional .protobuf.srl.submission.SrlSubmission submission = 3;
  if (has_submission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->submission(), output);
  }

  // optional string problemBankId = 4;
  if (has_problembankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problembankid().data(), this->problembankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->problembankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool allowedInProblemBank = 1;
  if (has_allowedinproblembank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->allowedinproblembank(), target);
  }

  // optional bool isPracticeProblem = 2;
  if (has_ispracticeproblem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispracticeproblem(), target);
  }

  // optional .protobuf.srl.submission.SrlSubmission submission = 3;
  if (has_submission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->submission(), target);
  }

  // optional string problemBankId = 4;
  if (has_problembankid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problembankid().data(), this->problembankid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->problembankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool allowedInProblemBank = 1;
    if (has_allowedinproblembank()) {
      total_size += 1 + 1;
    }

    // optional bool isPracticeProblem = 2;
    if (has_ispracticeproblem()) {
      total_size += 1 + 1;
    }

    // optional .protobuf.srl.submission.SrlSubmission submission = 3;
    if (has_submission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submission());
    }

    // optional string problemBankId = 4;
    if (has_problembankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problembankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSolution::MergeFrom(const SrlSolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allowedinproblembank()) {
      set_allowedinproblembank(from.allowedinproblembank());
    }
    if (from.has_ispracticeproblem()) {
      set_ispracticeproblem(from.ispracticeproblem());
    }
    if (from.has_submission()) {
      mutable_submission()->::protobuf::srl::submission::SrlSubmission::MergeFrom(from.submission());
    }
    if (from.has_problembankid()) {
      set_problembankid(from.problembankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSolution::CopyFrom(const SrlSolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSolution::IsInitialized() const {

  if (has_submission()) {
    if (!this->submission().IsInitialized()) return false;
  }
  return true;
}

void SrlSolution::Swap(SrlSolution* other) {
  if (other != this) {
    std::swap(allowedinproblembank_, other->allowedinproblembank_);
    std::swap(ispracticeproblem_, other->ispracticeproblem_);
    std::swap(submission_, other->submission_);
    std::swap(problembankid_, other->problembankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSolution_descriptor_;
  metadata.reflection = SrlSolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlExperiment::kCourseIdFieldNumber;
const int SrlExperiment::kAssignmentIdFieldNumber;
const int SrlExperiment::kProblemIdFieldNumber;
const int SrlExperiment::kUserIdFieldNumber;
const int SrlExperiment::kSubmissionFieldNumber;
#endif  // !_MSC_VER

SrlExperiment::SrlExperiment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlExperiment::InitAsDefaultInstance() {
  submission_ = const_cast< ::protobuf::srl::submission::SrlSubmission*>(&::protobuf::srl::submission::SrlSubmission::default_instance());
}

SrlExperiment::SrlExperiment(const SrlExperiment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlExperiment::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlExperiment::~SrlExperiment() {
  SharedDtor();
}

void SrlExperiment::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    delete problemid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete submission_;
  }
}

void SrlExperiment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlExperiment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlExperiment_descriptor_;
}

const SrlExperiment& SrlExperiment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlExperiment* SrlExperiment::default_instance_ = NULL;

SrlExperiment* SrlExperiment::New() const {
  return new SrlExperiment;
}

void SrlExperiment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_assignmentid()) {
      if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
        assignmentid_->clear();
      }
    }
    if (has_problemid()) {
      if (problemid_ != &::google::protobuf::internal::kEmptyString) {
        problemid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_submission()) {
      if (submission_ != NULL) submission_->::protobuf::srl::submission::SrlSubmission::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlExperiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignmentId;
        break;
      }

      // optional string assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid().data(), this->assignmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problemId;
        break;
      }

      // optional string problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemid().data(), this->problemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userId;
        break;
      }

      // optional string userId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_submission;
        break;
      }

      // optional .protobuf.srl.submission.SrlSubmission submission = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlExperiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assignmentid(), output);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->problemid(), output);
  }

  // optional string userId = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userid(), output);
  }

  // optional .protobuf.srl.submission.SrlSubmission submission = 6;
  if (has_submission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->submission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlExperiment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assignmentid(), target);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->problemid(), target);
  }

  // optional string userId = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userid(), target);
  }

  // optional .protobuf.srl.submission.SrlSubmission submission = 6;
  if (has_submission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->submission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlExperiment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // optional string assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentid());
    }

    // optional string problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problemid());
    }

    // optional string userId = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional .protobuf.srl.submission.SrlSubmission submission = 6;
    if (has_submission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlExperiment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlExperiment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlExperiment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlExperiment::MergeFrom(const SrlExperiment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_submission()) {
      mutable_submission()->::protobuf::srl::submission::SrlSubmission::MergeFrom(from.submission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlExperiment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlExperiment::CopyFrom(const SrlExperiment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlExperiment::IsInitialized() const {

  if (has_submission()) {
    if (!this->submission().IsInitialized()) return false;
  }
  return true;
}

void SrlExperiment::Swap(SrlExperiment* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(userid_, other->userid_);
    std::swap(submission_, other->submission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlExperiment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlExperiment_descriptor_;
  metadata.reflection = SrlExperiment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlChecksum::kFirstBitsFieldNumber;
const int SrlChecksum::kSecondBitsFieldNumber;
#endif  // !_MSC_VER

SrlChecksum::SrlChecksum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlChecksum::InitAsDefaultInstance() {
}

SrlChecksum::SrlChecksum(const SrlChecksum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlChecksum::SharedCtor() {
  _cached_size_ = 0;
  firstbits_ = GOOGLE_LONGLONG(0);
  secondbits_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlChecksum::~SrlChecksum() {
  SharedDtor();
}

void SrlChecksum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrlChecksum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlChecksum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlChecksum_descriptor_;
}

const SrlChecksum& SrlChecksum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlChecksum* SrlChecksum::default_instance_ = NULL;

SrlChecksum* SrlChecksum::New() const {
  return new SrlChecksum;
}

void SrlChecksum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstbits_ = GOOGLE_LONGLONG(0);
    secondbits_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlChecksum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 firstBits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstbits_)));
          set_has_firstbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_secondBits;
        break;
      }

      // required int64 secondBits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secondbits_)));
          set_has_secondbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlChecksum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 firstBits = 1;
  if (has_firstbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->firstbits(), output);
  }

  // required int64 secondBits = 2;
  if (has_secondbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->secondbits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlChecksum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 firstBits = 1;
  if (has_firstbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->firstbits(), target);
  }

  // required int64 secondBits = 2;
  if (has_secondbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->secondbits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlChecksum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 firstBits = 1;
    if (has_firstbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->firstbits());
    }

    // required int64 secondBits = 2;
    if (has_secondbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secondbits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlChecksum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlChecksum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlChecksum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlChecksum::MergeFrom(const SrlChecksum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstbits()) {
      set_firstbits(from.firstbits());
    }
    if (from.has_secondbits()) {
      set_secondbits(from.secondbits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlChecksum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlChecksum::CopyFrom(const SrlChecksum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlChecksum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SrlChecksum::Swap(SrlChecksum* other) {
  if (other != this) {
    std::swap(firstbits_, other->firstbits_);
    std::swap(secondbits_, other->secondbits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlChecksum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlChecksum_descriptor_;
  metadata.reflection = SrlChecksum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlExperimentList::kExperimentsFieldNumber;
#endif  // !_MSC_VER

SrlExperimentList::SrlExperimentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlExperimentList::InitAsDefaultInstance() {
}

SrlExperimentList::SrlExperimentList(const SrlExperimentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlExperimentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlExperimentList::~SrlExperimentList() {
  SharedDtor();
}

void SrlExperimentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrlExperimentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlExperimentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlExperimentList_descriptor_;
}

const SrlExperimentList& SrlExperimentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlExperimentList* SrlExperimentList::default_instance_ = NULL;

SrlExperimentList* SrlExperimentList::New() const {
  return new SrlExperimentList;
}

void SrlExperimentList::Clear() {
  experiments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlExperimentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.submission.SrlExperiment experiments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experiments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_experiments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_experiments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlExperimentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.submission.SrlExperiment experiments = 1;
  for (int i = 0; i < this->experiments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->experiments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlExperimentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.submission.SrlExperiment experiments = 1;
  for (int i = 0; i < this->experiments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->experiments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlExperimentList::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.submission.SrlExperiment experiments = 1;
  total_size += 1 * this->experiments_size();
  for (int i = 0; i < this->experiments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->experiments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlExperimentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlExperimentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlExperimentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlExperimentList::MergeFrom(const SrlExperimentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  experiments_.MergeFrom(from.experiments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlExperimentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlExperimentList::CopyFrom(const SrlExperimentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlExperimentList::IsInitialized() const {

  for (int i = 0; i < experiments_size(); i++) {
    if (!this->experiments(i).IsInitialized()) return false;
  }
  return true;
}

void SrlExperimentList::Swap(SrlExperimentList* other) {
  if (other != this) {
    experiments_.Swap(&other->experiments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlExperimentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlExperimentList_descriptor_;
  metadata.reflection = SrlExperimentList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace submission
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
