// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/submission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/submission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace submission {

namespace {

const ::google::protobuf::Descriptor* SrlSubmission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlSubmission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SrlSubmission_SubmissionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fsubmission_2eproto() {
  protobuf_AddDesc_input_2fsubmission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/submission.proto");
  GOOGLE_CHECK(file != NULL);
  SrlSubmission_descriptor_ = file->message_type(0);
  static const int SrlSubmission_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, courseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, assignmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, updatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, sketch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, submissiontype_),
  };
  SrlSubmission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlSubmission_descriptor_,
      SrlSubmission::default_instance_,
      SrlSubmission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlSubmission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlSubmission));
  SrlSubmission_SubmissionType_descriptor_ = SrlSubmission_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fsubmission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlSubmission_descriptor_, &SrlSubmission::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fsubmission_2eproto() {
  delete SrlSubmission::default_instance_;
  delete SrlSubmission_reflection_;
}

void protobuf_AddDesc_input_2fsubmission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026input/submission.proto\022\027protobuf.srl.s"
    "ubmission\"\212\002\n\rSrlSubmission\022\020\n\010courseId\030"
    "\001 \001(\t\022\024\n\014assignmentId\030\002 \001(\t\022\021\n\tproblemId"
    "\030\003 \001(\t\022\016\n\006userId\030\004 \001(\t\022\022\n\nupdateList\030\005 \001"
    "(\014\022\016\n\006sketch\030\006 \001(\014\022M\n\016submissionType\030\007 \001"
    "(\01625.protobuf.srl.submission.SrlSubmissi"
    "on.SubmissionType\";\n\016SubmissionType\022\014\n\010S"
    "OLUTION\020\000\022\016\n\nSUBMISSION\020\001\022\013\n\007LECTURE\020\002", 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/submission.proto", &protobuf_RegisterTypes);
  SrlSubmission::default_instance_ = new SrlSubmission();
  SrlSubmission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fsubmission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fsubmission_2eproto {
  StaticDescriptorInitializer_input_2fsubmission_2eproto() {
    protobuf_AddDesc_input_2fsubmission_2eproto();
  }
} static_descriptor_initializer_input_2fsubmission_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SrlSubmission_SubmissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSubmission_SubmissionType_descriptor_;
}
bool SrlSubmission_SubmissionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SrlSubmission_SubmissionType SrlSubmission::SOLUTION;
const SrlSubmission_SubmissionType SrlSubmission::SUBMISSION;
const SrlSubmission_SubmissionType SrlSubmission::LECTURE;
const SrlSubmission_SubmissionType SrlSubmission::SubmissionType_MIN;
const SrlSubmission_SubmissionType SrlSubmission::SubmissionType_MAX;
const int SrlSubmission::SubmissionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SrlSubmission::kCourseIdFieldNumber;
const int SrlSubmission::kAssignmentIdFieldNumber;
const int SrlSubmission::kProblemIdFieldNumber;
const int SrlSubmission::kUserIdFieldNumber;
const int SrlSubmission::kUpdateListFieldNumber;
const int SrlSubmission::kSketchFieldNumber;
const int SrlSubmission::kSubmissionTypeFieldNumber;
#endif  // !_MSC_VER

SrlSubmission::SrlSubmission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlSubmission::InitAsDefaultInstance() {
}

SrlSubmission::SrlSubmission(const SrlSubmission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlSubmission::SharedCtor() {
  _cached_size_ = 0;
  courseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  problemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sketch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submissiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlSubmission::~SrlSubmission() {
  SharedDtor();
}

void SrlSubmission::SharedDtor() {
  if (courseid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseid_;
  }
  if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
    delete assignmentid_;
  }
  if (problemid_ != &::google::protobuf::internal::kEmptyString) {
    delete problemid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
    delete updatelist_;
  }
  if (sketch_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_;
  }
  if (this != default_instance_) {
  }
}

void SrlSubmission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlSubmission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlSubmission_descriptor_;
}

const SrlSubmission& SrlSubmission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fsubmission_2eproto();
  return *default_instance_;
}

SrlSubmission* SrlSubmission::default_instance_ = NULL;

SrlSubmission* SrlSubmission::New() const {
  return new SrlSubmission;
}

void SrlSubmission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseid()) {
      if (courseid_ != &::google::protobuf::internal::kEmptyString) {
        courseid_->clear();
      }
    }
    if (has_assignmentid()) {
      if (assignmentid_ != &::google::protobuf::internal::kEmptyString) {
        assignmentid_->clear();
      }
    }
    if (has_problemid()) {
      if (problemid_ != &::google::protobuf::internal::kEmptyString) {
        problemid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_updatelist()) {
      if (updatelist_ != &::google::protobuf::internal::kEmptyString) {
        updatelist_->clear();
      }
    }
    if (has_sketch()) {
      if (sketch_ != &::google::protobuf::internal::kEmptyString) {
        sketch_->clear();
      }
    }
    submissiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlSubmission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string courseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseid().data(), this->courseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_assignmentId;
        break;
      }

      // optional string assignmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignmentid().data(), this->assignmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_problemId;
        break;
      }

      // optional string problemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_problemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->problemid().data(), this->problemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // optional string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_updateList;
        break;
      }

      // optional bytes updateList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sketch;
        break;
      }

      // optional bytes sketch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sketch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_submissionType;
        break;
      }

      // optional .protobuf.srl.submission.SrlSubmission.SubmissionType submissionType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_submissionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::submission::SrlSubmission_SubmissionType_IsValid(value)) {
            set_submissiontype(static_cast< ::protobuf::srl::submission::SrlSubmission_SubmissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlSubmission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseid(), output);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->assignmentid(), output);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->problemid(), output);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // optional bytes updateList = 5;
  if (has_updatelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->updatelist(), output);
  }

  // optional bytes sketch = 6;
  if (has_sketch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sketch(), output);
  }

  // optional .protobuf.srl.submission.SrlSubmission.SubmissionType submissionType = 7;
  if (has_submissiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->submissiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlSubmission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string courseId = 1;
  if (has_courseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseid().data(), this->courseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseid(), target);
  }

  // optional string assignmentId = 2;
  if (has_assignmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignmentid().data(), this->assignmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assignmentid(), target);
  }

  // optional string problemId = 3;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->problemid().data(), this->problemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->problemid(), target);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // optional bytes updateList = 5;
  if (has_updatelist()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->updatelist(), target);
  }

  // optional bytes sketch = 6;
  if (has_sketch()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sketch(), target);
  }

  // optional .protobuf.srl.submission.SrlSubmission.SubmissionType submissionType = 7;
  if (has_submissiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->submissiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlSubmission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string courseId = 1;
    if (has_courseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseid());
    }

    // optional string assignmentId = 2;
    if (has_assignmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignmentid());
    }

    // optional string problemId = 3;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->problemid());
    }

    // optional string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional bytes updateList = 5;
    if (has_updatelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatelist());
    }

    // optional bytes sketch = 6;
    if (has_sketch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sketch());
    }

    // optional .protobuf.srl.submission.SrlSubmission.SubmissionType submissionType = 7;
    if (has_submissiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->submissiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlSubmission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlSubmission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlSubmission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlSubmission::MergeFrom(const SrlSubmission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseid()) {
      set_courseid(from.courseid());
    }
    if (from.has_assignmentid()) {
      set_assignmentid(from.assignmentid());
    }
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_updatelist()) {
      set_updatelist(from.updatelist());
    }
    if (from.has_sketch()) {
      set_sketch(from.sketch());
    }
    if (from.has_submissiontype()) {
      set_submissiontype(from.submissiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlSubmission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlSubmission::CopyFrom(const SrlSubmission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlSubmission::IsInitialized() const {

  return true;
}

void SrlSubmission::Swap(SrlSubmission* other) {
  if (other != this) {
    std::swap(courseid_, other->courseid_);
    std::swap(assignmentid_, other->assignmentid_);
    std::swap(problemid_, other->problemid_);
    std::swap(userid_, other->userid_);
    std::swap(updatelist_, other->updatelist_);
    std::swap(sketch_, other->sketch_);
    std::swap(submissiontype_, other->submissiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlSubmission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlSubmission_descriptor_;
  metadata.reflection = SrlSubmission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace submission
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
