// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/data.proto

#ifndef PROTOBUF_input_2fdata_2eproto__INCLUDED
#define PROTOBUF_input_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace query {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fdata_2eproto();
void protobuf_AssignDesc_input_2fdata_2eproto();
void protobuf_ShutdownFile_input_2fdata_2eproto();

class DataRequest;
class ItemRequest;
class DataSend;
class ItemSend;
class DataResult;
class ItemResult;
class IdList;
class ExperimentReview;

enum ItemQuery {
  ERROR = -1,
  COURSE = 0,
  ASSIGNMENT = 1,
  COURSE_PROBLEM = 2,
  BANK_PROBLEM = 3,
  USERGROUP = 4,
  CLASS_GRADE = 5,
  USER_INFO = 6,
  SOLUTION = 7,
  EXPERIMENT = 8,
  SCHOOL = 9,
  COURSE_SEARCH = 10,
  BANK_SEARCH = 11,
  REGISTER = 12,
  COURSE_LIST = 13,
  UPDATE = 14
};
bool ItemQuery_IsValid(int value);
const ItemQuery ItemQuery_MIN = ERROR;
const ItemQuery ItemQuery_MAX = UPDATE;
const int ItemQuery_ARRAYSIZE = ItemQuery_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemQuery_descriptor();
inline const ::std::string& ItemQuery_Name(ItemQuery value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemQuery_descriptor(), value);
}
inline bool ItemQuery_Parse(
    const ::std::string& name, ItemQuery* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemQuery>(
    ItemQuery_descriptor(), name, value);
}
// ===================================================================

class DataRequest : public ::google::protobuf::Message {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRequest& default_instance();

  void Swap(DataRequest* other);

  // implements Message ----------------------------------------------

  DataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.srl.query.ItemRequest items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::protobuf::srl::query::ItemRequest& items(int index) const;
  inline ::protobuf::srl::query::ItemRequest* mutable_items(int index);
  inline ::protobuf::srl::query::ItemRequest* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemRequest >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemRequest >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.DataRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemRequest > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataRequest* default_instance_;
};
// -------------------------------------------------------------------

class ItemRequest : public ::google::protobuf::Message {
 public:
  ItemRequest();
  virtual ~ItemRequest();

  ItemRequest(const ItemRequest& from);

  inline ItemRequest& operator=(const ItemRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemRequest& default_instance();

  void Swap(ItemRequest* other);

  // implements Message ----------------------------------------------

  ItemRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemRequest& from);
  void MergeFrom(const ItemRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.query.ItemQuery query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline ::protobuf::srl::query::ItemQuery query() const;
  inline void set_query(::protobuf::srl::query::ItemQuery value);

  // repeated string itemId = 2;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline const ::std::string& itemid(int index) const;
  inline ::std::string* mutable_itemid(int index);
  inline void set_itemid(int index, const ::std::string& value);
  inline void set_itemid(int index, const char* value);
  inline void set_itemid(int index, const char* value, size_t size);
  inline ::std::string* add_itemid();
  inline void add_itemid(const ::std::string& value);
  inline void add_itemid(const char* value);
  inline void add_itemid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& itemid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_itemid();

  // optional bytes advanceQuery = 3;
  inline bool has_advancequery() const;
  inline void clear_advancequery();
  static const int kAdvanceQueryFieldNumber = 3;
  inline const ::std::string& advancequery() const;
  inline void set_advancequery(const ::std::string& value);
  inline void set_advancequery(const char* value);
  inline void set_advancequery(const void* value, size_t size);
  inline ::std::string* mutable_advancequery();
  inline ::std::string* release_advancequery();
  inline void set_allocated_advancequery(::std::string* advancequery);

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.ItemRequest)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_advancequery();
  inline void clear_has_advancequery();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> itemid_;
  ::std::string* advancequery_;
  int query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ItemRequest* default_instance_;
};
// -------------------------------------------------------------------

class DataSend : public ::google::protobuf::Message {
 public:
  DataSend();
  virtual ~DataSend();

  DataSend(const DataSend& from);

  inline DataSend& operator=(const DataSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSend& default_instance();

  void Swap(DataSend* other);

  // implements Message ----------------------------------------------

  DataSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSend& from);
  void MergeFrom(const DataSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.srl.query.ItemSend items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::protobuf::srl::query::ItemSend& items(int index) const;
  inline ::protobuf::srl::query::ItemSend* mutable_items(int index);
  inline ::protobuf::srl::query::ItemSend* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemSend >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemSend >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.DataSend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemSend > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataSend* default_instance_;
};
// -------------------------------------------------------------------

class ItemSend : public ::google::protobuf::Message {
 public:
  ItemSend();
  virtual ~ItemSend();

  ItemSend(const ItemSend& from);

  inline ItemSend& operator=(const ItemSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSend& default_instance();

  void Swap(ItemSend* other);

  // implements Message ----------------------------------------------

  ItemSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSend& from);
  void MergeFrom(const ItemSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf.srl.query.ItemQuery query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline ::protobuf::srl::query::ItemQuery query() const;
  inline void set_query(::protobuf::srl::query::ItemQuery value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.ItemSend)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  int query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ItemSend* default_instance_;
};
// -------------------------------------------------------------------

class DataResult : public ::google::protobuf::Message {
 public:
  DataResult();
  virtual ~DataResult();

  DataResult(const DataResult& from);

  inline DataResult& operator=(const DataResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataResult& default_instance();

  void Swap(DataResult* other);

  // implements Message ----------------------------------------------

  DataResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataResult& from);
  void MergeFrom(const DataResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.srl.query.ItemResult results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::protobuf::srl::query::ItemResult& results(int index) const;
  inline ::protobuf::srl::query::ItemResult* mutable_results(int index);
  inline ::protobuf::srl::query::ItemResult* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemResult >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemResult >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.DataResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemResult > results_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataResult* default_instance_;
};
// -------------------------------------------------------------------

class ItemResult : public ::google::protobuf::Message {
 public:
  ItemResult();
  virtual ~ItemResult();

  ItemResult(const ItemResult& from);

  inline ItemResult& operator=(const ItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemResult& default_instance();

  void Swap(ItemResult* other);

  // implements Message ----------------------------------------------

  ItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemResult& from);
  void MergeFrom(const ItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf.srl.query.ItemQuery query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline ::protobuf::srl::query::ItemQuery query() const;
  inline void set_query(::protobuf::srl::query::ItemQuery value);

  // optional string returnText = 2;
  inline bool has_returntext() const;
  inline void clear_returntext();
  static const int kReturnTextFieldNumber = 2;
  inline const ::std::string& returntext() const;
  inline void set_returntext(const ::std::string& value);
  inline void set_returntext(const char* value);
  inline void set_returntext(const char* value, size_t size);
  inline ::std::string* mutable_returntext();
  inline ::std::string* release_returntext();
  inline void set_allocated_returntext(::std::string* returntext);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional bool noData = 4;
  inline bool has_nodata() const;
  inline void clear_nodata();
  static const int kNoDataFieldNumber = 4;
  inline bool nodata() const;
  inline void set_nodata(bool value);

  // optional string errorMessage = 5;
  inline bool has_errormessage() const;
  inline void clear_errormessage();
  static const int kErrorMessageFieldNumber = 5;
  inline const ::std::string& errormessage() const;
  inline void set_errormessage(const ::std::string& value);
  inline void set_errormessage(const char* value);
  inline void set_errormessage(const char* value, size_t size);
  inline ::std::string* mutable_errormessage();
  inline ::std::string* release_errormessage();
  inline void set_allocated_errormessage(::std::string* errormessage);

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.ItemResult)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_returntext();
  inline void clear_has_returntext();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_nodata();
  inline void clear_has_nodata();
  inline void set_has_errormessage();
  inline void clear_has_errormessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* returntext_;
  int query_;
  bool nodata_;
  ::std::string* data_;
  ::std::string* errormessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ItemResult* default_instance_;
};
// -------------------------------------------------------------------

class IdList : public ::google::protobuf::Message {
 public:
  IdList();
  virtual ~IdList();

  IdList(const IdList& from);

  inline IdList& operator=(const IdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdList& default_instance();

  void Swap(IdList* other);

  // implements Message ----------------------------------------------

  IdList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdList& from);
  void MergeFrom(const IdList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::std::string& list(int index) const;
  inline ::std::string* mutable_list(int index);
  inline void set_list(int index, const ::std::string& value);
  inline void set_list(int index, const char* value);
  inline void set_list(int index, const char* value, size_t size);
  inline ::std::string* add_list();
  inline void add_list(const ::std::string& value);
  inline void add_list(const char* value);
  inline void add_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.IdList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static IdList* default_instance_;
};
// -------------------------------------------------------------------

class ExperimentReview : public ::google::protobuf::Message {
 public:
  ExperimentReview();
  virtual ~ExperimentReview();

  ExperimentReview(const ExperimentReview& from);

  inline ExperimentReview& operator=(const ExperimentReview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentReview& default_instance();

  void Swap(ExperimentReview* other);

  // implements Message ----------------------------------------------

  ExperimentReview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExperimentReview& from);
  void MergeFrom(const ExperimentReview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool allowEditing = 1;
  inline bool has_allowediting() const;
  inline void clear_allowediting();
  static const int kAllowEditingFieldNumber = 1;
  inline bool allowediting() const;
  inline void set_allowediting(bool value);

  // optional bool showUserNames = 2;
  inline bool has_showusernames() const;
  inline void clear_showusernames();
  static const int kShowUserNamesFieldNumber = 2;
  inline bool showusernames() const;
  inline void set_showusernames(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.srl.query.ExperimentReview)
 private:
  inline void set_has_allowediting();
  inline void clear_has_allowediting();
  inline void set_has_showusernames();
  inline void clear_has_showusernames();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool allowediting_;
  bool showusernames_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fdata_2eproto();
  friend void protobuf_AssignDesc_input_2fdata_2eproto();
  friend void protobuf_ShutdownFile_input_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ExperimentReview* default_instance_;
};
// ===================================================================


// ===================================================================

// DataRequest

// repeated .protobuf.srl.query.ItemRequest items = 3;
inline int DataRequest::items_size() const {
  return items_.size();
}
inline void DataRequest::clear_items() {
  items_.Clear();
}
inline const ::protobuf::srl::query::ItemRequest& DataRequest::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::srl::query::ItemRequest* DataRequest::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::srl::query::ItemRequest* DataRequest::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemRequest >&
DataRequest::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemRequest >*
DataRequest::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ItemRequest

// required .protobuf.srl.query.ItemQuery query = 1;
inline bool ItemRequest::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemRequest::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemRequest::clear_query() {
  query_ = -1;
  clear_has_query();
}
inline ::protobuf::srl::query::ItemQuery ItemRequest::query() const {
  return static_cast< ::protobuf::srl::query::ItemQuery >(query_);
}
inline void ItemRequest::set_query(::protobuf::srl::query::ItemQuery value) {
  assert(::protobuf::srl::query::ItemQuery_IsValid(value));
  set_has_query();
  query_ = value;
}

// repeated string itemId = 2;
inline int ItemRequest::itemid_size() const {
  return itemid_.size();
}
inline void ItemRequest::clear_itemid() {
  itemid_.Clear();
}
inline const ::std::string& ItemRequest::itemid(int index) const {
  return itemid_.Get(index);
}
inline ::std::string* ItemRequest::mutable_itemid(int index) {
  return itemid_.Mutable(index);
}
inline void ItemRequest::set_itemid(int index, const ::std::string& value) {
  itemid_.Mutable(index)->assign(value);
}
inline void ItemRequest::set_itemid(int index, const char* value) {
  itemid_.Mutable(index)->assign(value);
}
inline void ItemRequest::set_itemid(int index, const char* value, size_t size) {
  itemid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemRequest::add_itemid() {
  return itemid_.Add();
}
inline void ItemRequest::add_itemid(const ::std::string& value) {
  itemid_.Add()->assign(value);
}
inline void ItemRequest::add_itemid(const char* value) {
  itemid_.Add()->assign(value);
}
inline void ItemRequest::add_itemid(const char* value, size_t size) {
  itemid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ItemRequest::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ItemRequest::mutable_itemid() {
  return &itemid_;
}

// optional bytes advanceQuery = 3;
inline bool ItemRequest::has_advancequery() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemRequest::set_has_advancequery() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemRequest::clear_has_advancequery() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemRequest::clear_advancequery() {
  if (advancequery_ != &::google::protobuf::internal::kEmptyString) {
    advancequery_->clear();
  }
  clear_has_advancequery();
}
inline const ::std::string& ItemRequest::advancequery() const {
  return *advancequery_;
}
inline void ItemRequest::set_advancequery(const ::std::string& value) {
  set_has_advancequery();
  if (advancequery_ == &::google::protobuf::internal::kEmptyString) {
    advancequery_ = new ::std::string;
  }
  advancequery_->assign(value);
}
inline void ItemRequest::set_advancequery(const char* value) {
  set_has_advancequery();
  if (advancequery_ == &::google::protobuf::internal::kEmptyString) {
    advancequery_ = new ::std::string;
  }
  advancequery_->assign(value);
}
inline void ItemRequest::set_advancequery(const void* value, size_t size) {
  set_has_advancequery();
  if (advancequery_ == &::google::protobuf::internal::kEmptyString) {
    advancequery_ = new ::std::string;
  }
  advancequery_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemRequest::mutable_advancequery() {
  set_has_advancequery();
  if (advancequery_ == &::google::protobuf::internal::kEmptyString) {
    advancequery_ = new ::std::string;
  }
  return advancequery_;
}
inline ::std::string* ItemRequest::release_advancequery() {
  clear_has_advancequery();
  if (advancequery_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = advancequery_;
    advancequery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemRequest::set_allocated_advancequery(::std::string* advancequery) {
  if (advancequery_ != &::google::protobuf::internal::kEmptyString) {
    delete advancequery_;
  }
  if (advancequery) {
    set_has_advancequery();
    advancequery_ = advancequery;
  } else {
    clear_has_advancequery();
    advancequery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataSend

// repeated .protobuf.srl.query.ItemSend items = 3;
inline int DataSend::items_size() const {
  return items_.size();
}
inline void DataSend::clear_items() {
  items_.Clear();
}
inline const ::protobuf::srl::query::ItemSend& DataSend::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::srl::query::ItemSend* DataSend::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::srl::query::ItemSend* DataSend::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemSend >&
DataSend::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemSend >*
DataSend::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ItemSend

// optional .protobuf.srl.query.ItemQuery query = 1;
inline bool ItemSend::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemSend::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemSend::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemSend::clear_query() {
  query_ = -1;
  clear_has_query();
}
inline ::protobuf::srl::query::ItemQuery ItemSend::query() const {
  return static_cast< ::protobuf::srl::query::ItemQuery >(query_);
}
inline void ItemSend::set_query(::protobuf::srl::query::ItemQuery value) {
  assert(::protobuf::srl::query::ItemQuery_IsValid(value));
  set_has_query();
  query_ = value;
}

// optional bytes data = 3;
inline bool ItemSend::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemSend::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemSend::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemSend::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ItemSend::data() const {
  return *data_;
}
inline void ItemSend::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ItemSend::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ItemSend::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemSend::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ItemSend::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemSend::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataResult

// repeated .protobuf.srl.query.ItemResult results = 1;
inline int DataResult::results_size() const {
  return results_.size();
}
inline void DataResult::clear_results() {
  results_.Clear();
}
inline const ::protobuf::srl::query::ItemResult& DataResult::results(int index) const {
  return results_.Get(index);
}
inline ::protobuf::srl::query::ItemResult* DataResult::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::protobuf::srl::query::ItemResult* DataResult::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemResult >&
DataResult::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::query::ItemResult >*
DataResult::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// ItemResult

// optional .protobuf.srl.query.ItemQuery query = 1;
inline bool ItemResult::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemResult::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemResult::clear_query() {
  query_ = -1;
  clear_has_query();
}
inline ::protobuf::srl::query::ItemQuery ItemResult::query() const {
  return static_cast< ::protobuf::srl::query::ItemQuery >(query_);
}
inline void ItemResult::set_query(::protobuf::srl::query::ItemQuery value) {
  assert(::protobuf::srl::query::ItemQuery_IsValid(value));
  set_has_query();
  query_ = value;
}

// optional string returnText = 2;
inline bool ItemResult::has_returntext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemResult::set_has_returntext() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemResult::clear_has_returntext() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemResult::clear_returntext() {
  if (returntext_ != &::google::protobuf::internal::kEmptyString) {
    returntext_->clear();
  }
  clear_has_returntext();
}
inline const ::std::string& ItemResult::returntext() const {
  return *returntext_;
}
inline void ItemResult::set_returntext(const ::std::string& value) {
  set_has_returntext();
  if (returntext_ == &::google::protobuf::internal::kEmptyString) {
    returntext_ = new ::std::string;
  }
  returntext_->assign(value);
}
inline void ItemResult::set_returntext(const char* value) {
  set_has_returntext();
  if (returntext_ == &::google::protobuf::internal::kEmptyString) {
    returntext_ = new ::std::string;
  }
  returntext_->assign(value);
}
inline void ItemResult::set_returntext(const char* value, size_t size) {
  set_has_returntext();
  if (returntext_ == &::google::protobuf::internal::kEmptyString) {
    returntext_ = new ::std::string;
  }
  returntext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemResult::mutable_returntext() {
  set_has_returntext();
  if (returntext_ == &::google::protobuf::internal::kEmptyString) {
    returntext_ = new ::std::string;
  }
  return returntext_;
}
inline ::std::string* ItemResult::release_returntext() {
  clear_has_returntext();
  if (returntext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = returntext_;
    returntext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemResult::set_allocated_returntext(::std::string* returntext) {
  if (returntext_ != &::google::protobuf::internal::kEmptyString) {
    delete returntext_;
  }
  if (returntext) {
    set_has_returntext();
    returntext_ = returntext;
  } else {
    clear_has_returntext();
    returntext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 3;
inline bool ItemResult::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemResult::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemResult::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemResult::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ItemResult::data() const {
  return *data_;
}
inline void ItemResult::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ItemResult::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ItemResult::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemResult::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ItemResult::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemResult::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool noData = 4;
inline bool ItemResult::has_nodata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemResult::set_has_nodata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemResult::clear_has_nodata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemResult::clear_nodata() {
  nodata_ = false;
  clear_has_nodata();
}
inline bool ItemResult::nodata() const {
  return nodata_;
}
inline void ItemResult::set_nodata(bool value) {
  set_has_nodata();
  nodata_ = value;
}

// optional string errorMessage = 5;
inline bool ItemResult::has_errormessage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemResult::set_has_errormessage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemResult::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemResult::clear_errormessage() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    errormessage_->clear();
  }
  clear_has_errormessage();
}
inline const ::std::string& ItemResult::errormessage() const {
  return *errormessage_;
}
inline void ItemResult::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void ItemResult::set_errormessage(const char* value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void ItemResult::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ItemResult::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  return errormessage_;
}
inline ::std::string* ItemResult::release_errormessage() {
  clear_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormessage_;
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ItemResult::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (errormessage) {
    set_has_errormessage();
    errormessage_ = errormessage;
  } else {
    clear_has_errormessage();
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IdList

// repeated string list = 1;
inline int IdList::list_size() const {
  return list_.size();
}
inline void IdList::clear_list() {
  list_.Clear();
}
inline const ::std::string& IdList::list(int index) const {
  return list_.Get(index);
}
inline ::std::string* IdList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline void IdList::set_list(int index, const ::std::string& value) {
  list_.Mutable(index)->assign(value);
}
inline void IdList::set_list(int index, const char* value) {
  list_.Mutable(index)->assign(value);
}
inline void IdList::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdList::add_list() {
  return list_.Add();
}
inline void IdList::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
}
inline void IdList::add_list(const char* value) {
  list_.Add()->assign(value);
}
inline void IdList::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IdList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IdList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ExperimentReview

// optional bool allowEditing = 1;
inline bool ExperimentReview::has_allowediting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentReview::set_has_allowediting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExperimentReview::clear_has_allowediting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExperimentReview::clear_allowediting() {
  allowediting_ = false;
  clear_has_allowediting();
}
inline bool ExperimentReview::allowediting() const {
  return allowediting_;
}
inline void ExperimentReview::set_allowediting(bool value) {
  set_has_allowediting();
  allowediting_ = value;
}

// optional bool showUserNames = 2;
inline bool ExperimentReview::has_showusernames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentReview::set_has_showusernames() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExperimentReview::clear_has_showusernames() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExperimentReview::clear_showusernames() {
  showusernames_ = false;
  clear_has_showusernames();
}
inline bool ExperimentReview::showusernames() const {
  return showusernames_;
}
inline void ExperimentReview::set_showusernames(bool value) {
  set_has_showusernames();
  showusernames_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace query
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::query::ItemQuery>() {
  return ::protobuf::srl::query::ItemQuery_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fdata_2eproto__INCLUDED
