// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace query {

namespace {

const ::google::protobuf::Descriptor* DataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemQuery_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fdata_2eproto() {
  protobuf_AddDesc_input_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/data.proto");
  GOOGLE_CHECK(file != NULL);
  DataRequest_descriptor_ = file->message_type(0);
  static const int DataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, items_),
  };
  DataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataRequest_descriptor_,
      DataRequest::default_instance_,
      DataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataRequest));
  ItemRequest_descriptor_ = file->message_type(1);
  static const int ItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRequest, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRequest, advancequery_),
  };
  ItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemRequest_descriptor_,
      ItemRequest::default_instance_,
      ItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemRequest));
  DataSend_descriptor_ = file->message_type(2);
  static const int DataSend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSend, items_),
  };
  DataSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSend_descriptor_,
      DataSend::default_instance_,
      DataSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSend));
  ItemSend_descriptor_ = file->message_type(3);
  static const int ItemSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSend, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSend, isinsert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSend, data_),
  };
  ItemSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSend_descriptor_,
      ItemSend::default_instance_,
      ItemSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSend));
  DataResult_descriptor_ = file->message_type(4);
  static const int DataResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, results_),
  };
  DataResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataResult_descriptor_,
      DataResult::default_instance_,
      DataResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataResult));
  ItemResult_descriptor_ = file->message_type(5);
  static const int ItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResult, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResult, returntext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResult, data_),
  };
  ItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemResult_descriptor_,
      ItemResult::default_instance_,
      ItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemResult));
  ItemQuery_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataRequest_descriptor_, &DataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemRequest_descriptor_, &ItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSend_descriptor_, &DataSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSend_descriptor_, &ItemSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataResult_descriptor_, &DataResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemResult_descriptor_, &ItemResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fdata_2eproto() {
  delete DataRequest::default_instance_;
  delete DataRequest_reflection_;
  delete ItemRequest::default_instance_;
  delete ItemRequest_reflection_;
  delete DataSend::default_instance_;
  delete DataSend_reflection_;
  delete ItemSend::default_instance_;
  delete ItemSend_reflection_;
  delete DataResult::default_instance_;
  delete DataResult_reflection_;
  delete ItemResult::default_instance_;
  delete ItemResult_reflection_;
}

void protobuf_AddDesc_input_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020input/data.proto\022\022protobuf.srl.query\"="
    "\n\013DataRequest\022.\n\005items\030\003 \003(\0132\037.protobuf."
    "srl.query.ItemRequest\"a\n\013ItemRequest\022\016\n\006"
    "itemId\030\001 \003(\t\022,\n\005query\030\002 \001(\0162\035.protobuf.s"
    "rl.query.ItemQuery\022\024\n\014advanceQuery\030\003 \001(\014"
    "\"7\n\010DataSend\022+\n\005items\030\003 \003(\0132\034.protobuf.s"
    "rl.query.ItemSend\"X\n\010ItemSend\022,\n\005query\030\001"
    " \001(\0162\035.protobuf.srl.query.ItemQuery\022\020\n\010i"
    "sInsert\030\002 \001(\010\022\014\n\004data\030\003 \001(\014\"=\n\nDataResul"
    "t\022/\n\007results\030\001 \003(\0132\036.protobuf.srl.query."
    "ItemResult\"\\\n\nItemResult\022,\n\005query\030\001 \001(\0162"
    "\035.protobuf.srl.query.ItemQuery\022\022\n\nreturn"
    "Text\030\002 \001(\t\022\014\n\004data\030\003 \001(\014*\375\001\n\tItemQuery\022\022"
    "\n\005ERROR\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006COURSE\020\000\022\016\n\nASSIGN"
    "MENT\020\001\022\022\n\016COURSE_PROBLEM\020\002\022\020\n\014BANK_PROBL"
    "EM\020\003\022\r\n\tUSERGROUP\020\004\022\017\n\013CLASS_GRADE\020\005\022\r\n\t"
    "USER_INFO\020\006\022\014\n\010SOLUTION\020\007\022\016\n\nEXPERIMENT\020"
    "\010\022\n\n\006SCHOOL\020\t\022\021\n\rCOURSE_SEARCH\020\n\022\017\n\013BANK"
    "_SEARCH\020\013\022\014\n\010REGISTER\020\014\022\017\n\013COURSE_LIST\020\r", 760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/data.proto", &protobuf_RegisterTypes);
  DataRequest::default_instance_ = new DataRequest();
  ItemRequest::default_instance_ = new ItemRequest();
  DataSend::default_instance_ = new DataSend();
  ItemSend::default_instance_ = new ItemSend();
  DataResult::default_instance_ = new DataResult();
  ItemResult::default_instance_ = new ItemResult();
  DataRequest::default_instance_->InitAsDefaultInstance();
  ItemRequest::default_instance_->InitAsDefaultInstance();
  DataSend::default_instance_->InitAsDefaultInstance();
  ItemSend::default_instance_->InitAsDefaultInstance();
  DataResult::default_instance_->InitAsDefaultInstance();
  ItemResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fdata_2eproto {
  StaticDescriptorInitializer_input_2fdata_2eproto() {
    protobuf_AddDesc_input_2fdata_2eproto();
  }
} static_descriptor_initializer_input_2fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* ItemQuery_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemQuery_descriptor_;
}
bool ItemQuery_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DataRequest::kItemsFieldNumber;
#endif  // !_MSC_VER

DataRequest::DataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataRequest::InitAsDefaultInstance() {
}

DataRequest::DataRequest(const DataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataRequest::~DataRequest() {
  SharedDtor();
}

void DataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRequest_descriptor_;
}

const DataRequest& DataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

DataRequest* DataRequest::default_instance_ = NULL;

DataRequest* DataRequest::New() const {
  return new DataRequest;
}

void DataRequest::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.query.ItemRequest items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.query.ItemRequest items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.query.ItemRequest items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataRequest::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.query.ItemRequest items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataRequest::MergeFrom(const DataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRequest::CopyFrom(const DataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {

  return true;
}

void DataRequest::Swap(DataRequest* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRequest_descriptor_;
  metadata.reflection = DataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemRequest::kItemIdFieldNumber;
const int ItemRequest::kQueryFieldNumber;
const int ItemRequest::kAdvanceQueryFieldNumber;
#endif  // !_MSC_VER

ItemRequest::ItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemRequest::InitAsDefaultInstance() {
}

ItemRequest::ItemRequest(const ItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemRequest::SharedCtor() {
  _cached_size_ = 0;
  query_ = -1;
  advancequery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemRequest::~ItemRequest() {
  SharedDtor();
}

void ItemRequest::SharedDtor() {
  if (advancequery_ != &::google::protobuf::internal::kEmptyString) {
    delete advancequery_;
  }
  if (this != default_instance_) {
  }
}

void ItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemRequest_descriptor_;
}

const ItemRequest& ItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

ItemRequest* ItemRequest::default_instance_ = NULL;

ItemRequest* ItemRequest::New() const {
  return new ItemRequest;
}

void ItemRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    query_ = -1;
    if (has_advancequery()) {
      if (advancequery_ != &::google::protobuf::internal::kEmptyString) {
        advancequery_->clear();
      }
    }
  }
  itemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid(this->itemid_size() - 1).data(),
            this->itemid(this->itemid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemId;
        if (input->ExpectTag(16)) goto parse_query;
        break;
      }

      // optional .protobuf.srl.query.ItemQuery query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::query::ItemQuery_IsValid(value)) {
            set_query(static_cast< ::protobuf::srl::query::ItemQuery >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_advanceQuery;
        break;
      }

      // optional bytes advanceQuery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advanceQuery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_advancequery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string itemId = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->itemid(i).data(), this->itemid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->itemid(i), output);
  }

  // optional .protobuf.srl.query.ItemQuery query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->query(), output);
  }

  // optional bytes advanceQuery = 3;
  if (has_advancequery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->advancequery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string itemId = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid(i).data(), this->itemid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->itemid(i), target);
  }

  // optional .protobuf.srl.query.ItemQuery query = 2;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->query(), target);
  }

  // optional bytes advanceQuery = 3;
  if (has_advancequery()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->advancequery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .protobuf.srl.query.ItemQuery query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query());
    }

    // optional bytes advanceQuery = 3;
    if (has_advancequery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->advancequery());
    }

  }
  // repeated string itemId = 1;
  total_size += 1 * this->itemid_size();
  for (int i = 0; i < this->itemid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itemid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemRequest::MergeFrom(const ItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_advancequery()) {
      set_advancequery(from.advancequery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemRequest::CopyFrom(const ItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemRequest::IsInitialized() const {

  return true;
}

void ItemRequest::Swap(ItemRequest* other) {
  if (other != this) {
    itemid_.Swap(&other->itemid_);
    std::swap(query_, other->query_);
    std::swap(advancequery_, other->advancequery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemRequest_descriptor_;
  metadata.reflection = ItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataSend::kItemsFieldNumber;
#endif  // !_MSC_VER

DataSend::DataSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSend::InitAsDefaultInstance() {
}

DataSend::DataSend(const DataSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSend::~DataSend() {
  SharedDtor();
}

void DataSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSend_descriptor_;
}

const DataSend& DataSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

DataSend* DataSend::default_instance_ = NULL;

DataSend* DataSend::New() const {
  return new DataSend;
}

void DataSend::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.query.ItemSend items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.query.ItemSend items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.query.ItemSend items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSend::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.query.ItemSend items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSend::MergeFrom(const DataSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSend::CopyFrom(const DataSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSend::IsInitialized() const {

  return true;
}

void DataSend::Swap(DataSend* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSend_descriptor_;
  metadata.reflection = DataSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSend::kQueryFieldNumber;
const int ItemSend::kIsInsertFieldNumber;
const int ItemSend::kDataFieldNumber;
#endif  // !_MSC_VER

ItemSend::ItemSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSend::InitAsDefaultInstance() {
}

ItemSend::ItemSend(const ItemSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSend::SharedCtor() {
  _cached_size_ = 0;
  query_ = -1;
  isinsert_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSend::~ItemSend() {
  SharedDtor();
}

void ItemSend::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ItemSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSend_descriptor_;
}

const ItemSend& ItemSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

ItemSend* ItemSend::default_instance_ = NULL;

ItemSend* ItemSend::New() const {
  return new ItemSend;
}

void ItemSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    query_ = -1;
    isinsert_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.srl.query.ItemQuery query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::query::ItemQuery_IsValid(value)) {
            set_query(static_cast< ::protobuf::srl::query::ItemQuery >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isInsert;
        break;
      }

      // optional bool isInsert = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInsert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinsert_)));
          set_has_isinsert();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.srl.query.ItemQuery query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query(), output);
  }

  // optional bool isInsert = 2;
  if (has_isinsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isinsert(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.srl.query.ItemQuery query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query(), target);
  }

  // optional bool isInsert = 2;
  if (has_isinsert()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isinsert(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.srl.query.ItemQuery query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query());
    }

    // optional bool isInsert = 2;
    if (has_isinsert()) {
      total_size += 1 + 1;
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSend::MergeFrom(const ItemSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_isinsert()) {
      set_isinsert(from.isinsert());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSend::CopyFrom(const ItemSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSend::IsInitialized() const {

  return true;
}

void ItemSend::Swap(ItemSend* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(isinsert_, other->isinsert_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSend_descriptor_;
  metadata.reflection = ItemSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataResult::kResultsFieldNumber;
#endif  // !_MSC_VER

DataResult::DataResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataResult::InitAsDefaultInstance() {
}

DataResult::DataResult(const DataResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataResult::~DataResult() {
  SharedDtor();
}

void DataResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataResult_descriptor_;
}

const DataResult& DataResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

DataResult* DataResult::default_instance_ = NULL;

DataResult* DataResult::New() const {
  return new DataResult;
}

void DataResult::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.query.ItemResult results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.query.ItemResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.query.ItemResult results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataResult::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.query.ItemResult results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataResult::MergeFrom(const DataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataResult::CopyFrom(const DataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataResult::IsInitialized() const {

  return true;
}

void DataResult::Swap(DataResult* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataResult_descriptor_;
  metadata.reflection = DataResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemResult::kQueryFieldNumber;
const int ItemResult::kReturnTextFieldNumber;
const int ItemResult::kDataFieldNumber;
#endif  // !_MSC_VER

ItemResult::ItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemResult::InitAsDefaultInstance() {
}

ItemResult::ItemResult(const ItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemResult::SharedCtor() {
  _cached_size_ = 0;
  query_ = -1;
  returntext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemResult::~ItemResult() {
  SharedDtor();
}

void ItemResult::SharedDtor() {
  if (returntext_ != &::google::protobuf::internal::kEmptyString) {
    delete returntext_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemResult_descriptor_;
}

const ItemResult& ItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fdata_2eproto();
  return *default_instance_;
}

ItemResult* ItemResult::default_instance_ = NULL;

ItemResult* ItemResult::New() const {
  return new ItemResult;
}

void ItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    query_ = -1;
    if (has_returntext()) {
      if (returntext_ != &::google::protobuf::internal::kEmptyString) {
        returntext_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.srl.query.ItemQuery query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::query::ItemQuery_IsValid(value)) {
            set_query(static_cast< ::protobuf::srl::query::ItemQuery >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_returnText;
        break;
      }

      // optional string returnText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_returnText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_returntext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->returntext().data(), this->returntext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.srl.query.ItemQuery query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query(), output);
  }

  // optional string returnText = 2;
  if (has_returntext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returntext().data(), this->returntext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->returntext(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.srl.query.ItemQuery query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query(), target);
  }

  // optional string returnText = 2;
  if (has_returntext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returntext().data(), this->returntext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->returntext(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.srl.query.ItemQuery query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query());
    }

    // optional string returnText = 2;
    if (has_returntext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->returntext());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemResult::MergeFrom(const ItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_returntext()) {
      set_returntext(from.returntext());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemResult::CopyFrom(const ItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemResult::IsInitialized() const {

  return true;
}

void ItemResult::Swap(ItemResult* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(returntext_, other->returntext_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemResult_descriptor_;
  metadata.reflection = ItemResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace query
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
