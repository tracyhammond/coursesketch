// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/commands.proto

#ifndef PROTOBUF_input_2fcommands_2eproto__INCLUDED
#define PROTOBUF_input_2fcommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace commands {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fcommands_2eproto();
void protobuf_AssignDesc_input_2fcommands_2eproto();
void protobuf_ShutdownFile_input_2fcommands_2eproto();

class Update;
class Command;
class IdChain;
class PackageShape;
class AddSubshape;
class RemoveObject;
class ForceInterpretation;
class AddAttribtue;
class RemoveAttribtue;

enum CommandType {
  ADD_STROKE = 0,
  ADD_SHAPE = 1,
  PACKAGE_SHAPE = 2,
  ADD_SUBSHAPE = 3,
  ASSIGN_ATTRIBUTE = 4,
  FORCE_INTERPRETATION = 5,
  UNDO = 6,
  REDO = 7,
  REWRITE = 8,
  CLEAR_STACK = 9,
  SYNC = 10
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ADD_STROKE;
const CommandType CommandType_MAX = SYNC;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string updateId = 1;
  inline bool has_updateid() const;
  inline void clear_updateid();
  static const int kUpdateIdFieldNumber = 1;
  inline const ::std::string& updateid() const;
  inline void set_updateid(const ::std::string& value);
  inline void set_updateid(const char* value);
  inline void set_updateid(const char* value, size_t size);
  inline ::std::string* mutable_updateid();
  inline ::std::string* release_updateid();
  inline void set_allocated_updateid(::std::string* updateid);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .protobuf.srl.commands.Command commands = 3;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 3;
  inline const ::protobuf::srl::commands::Command& commands(int index) const;
  inline ::protobuf::srl::commands::Command* mutable_commands(int index);
  inline ::protobuf::srl::commands::Command* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::Command >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::Command >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.Update)
 private:
  inline void set_has_updateid();
  inline void clear_has_updateid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updateid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::Command > commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::protobuf::srl::commands::CommandType commandtype() const;
  inline void set_commandtype(::protobuf::srl::commands::CommandType value);

  // required bool isUserCreated = 2;
  inline bool has_isusercreated() const;
  inline void clear_isusercreated();
  static const int kIsUserCreatedFieldNumber = 2;
  inline bool isusercreated() const;
  inline void set_isusercreated(bool value);

  // required bytes commandData = 3;
  inline bool has_commanddata() const;
  inline void clear_commanddata();
  static const int kCommandDataFieldNumber = 3;
  inline const ::std::string& commanddata() const;
  inline void set_commanddata(const ::std::string& value);
  inline void set_commanddata(const char* value);
  inline void set_commanddata(const void* value, size_t size);
  inline ::std::string* mutable_commanddata();
  inline ::std::string* release_commanddata();
  inline void set_allocated_commanddata(::std::string* commanddata);

  // optional string commandId = 4;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIdFieldNumber = 4;
  inline const ::std::string& commandid() const;
  inline void set_commandid(const ::std::string& value);
  inline void set_commandid(const char* value);
  inline void set_commandid(const char* value, size_t size);
  inline ::std::string* mutable_commandid();
  inline ::std::string* release_commandid();
  inline void set_allocated_commandid(::std::string* commandid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.Command)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_isusercreated();
  inline void clear_has_isusercreated();
  inline void set_has_commanddata();
  inline void clear_has_commanddata();
  inline void set_has_commandid();
  inline void clear_has_commandid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int commandtype_;
  bool isusercreated_;
  ::std::string* commanddata_;
  ::std::string* commandid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class IdChain : public ::google::protobuf::Message {
 public:
  IdChain();
  virtual ~IdChain();

  IdChain(const IdChain& from);

  inline IdChain& operator=(const IdChain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdChain& default_instance();

  void Swap(IdChain* other);

  // implements Message ----------------------------------------------

  IdChain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdChain& from);
  void MergeFrom(const IdChain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string idChain = 1;
  inline int idchain_size() const;
  inline void clear_idchain();
  static const int kIdChainFieldNumber = 1;
  inline const ::std::string& idchain(int index) const;
  inline ::std::string* mutable_idchain(int index);
  inline void set_idchain(int index, const ::std::string& value);
  inline void set_idchain(int index, const char* value);
  inline void set_idchain(int index, const char* value, size_t size);
  inline ::std::string* add_idchain();
  inline void add_idchain(const ::std::string& value);
  inline void add_idchain(const char* value);
  inline void add_idchain(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& idchain() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_idchain();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.IdChain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> idchain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static IdChain* default_instance_;
};
// -------------------------------------------------------------------

class PackageShape : public ::google::protobuf::Message {
 public:
  PackageShape();
  virtual ~PackageShape();

  PackageShape(const PackageShape& from);

  inline PackageShape& operator=(const PackageShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageShape& default_instance();

  void Swap(PackageShape* other);

  // implements Message ----------------------------------------------

  PackageShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageShape& from);
  void MergeFrom(const PackageShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  inline bool has_oldcontainerid() const;
  inline void clear_oldcontainerid();
  static const int kOldContainerIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& oldcontainerid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_oldcontainerid();
  inline ::protobuf::srl::commands::IdChain* release_oldcontainerid();
  inline void set_allocated_oldcontainerid(::protobuf::srl::commands::IdChain* oldcontainerid);

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  inline bool has_newcontainerid() const;
  inline void clear_newcontainerid();
  static const int kNewContainerIdFieldNumber = 2;
  inline const ::protobuf::srl::commands::IdChain& newcontainerid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_newcontainerid();
  inline ::protobuf::srl::commands::IdChain* release_newcontainerid();
  inline void set_allocated_newcontainerid(::protobuf::srl::commands::IdChain* newcontainerid);

  // repeated string shapesToBeContained = 3;
  inline int shapestobecontained_size() const;
  inline void clear_shapestobecontained();
  static const int kShapesToBeContainedFieldNumber = 3;
  inline const ::std::string& shapestobecontained(int index) const;
  inline ::std::string* mutable_shapestobecontained(int index);
  inline void set_shapestobecontained(int index, const ::std::string& value);
  inline void set_shapestobecontained(int index, const char* value);
  inline void set_shapestobecontained(int index, const char* value, size_t size);
  inline ::std::string* add_shapestobecontained();
  inline void add_shapestobecontained(const ::std::string& value);
  inline void add_shapestobecontained(const char* value);
  inline void add_shapestobecontained(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& shapestobecontained() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_shapestobecontained();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.PackageShape)
 private:
  inline void set_has_oldcontainerid();
  inline void clear_has_oldcontainerid();
  inline void set_has_newcontainerid();
  inline void clear_has_newcontainerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* oldcontainerid_;
  ::protobuf::srl::commands::IdChain* newcontainerid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> shapestobecontained_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static PackageShape* default_instance_;
};
// -------------------------------------------------------------------

class AddSubshape : public ::google::protobuf::Message {
 public:
  AddSubshape();
  virtual ~AddSubshape();

  AddSubshape(const AddSubshape& from);

  inline AddSubshape& operator=(const AddSubshape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddSubshape& default_instance();

  void Swap(AddSubshape* other);

  // implements Message ----------------------------------------------

  AddSubshape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddSubshape& from);
  void MergeFrom(const AddSubshape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain parentShape = 1;
  inline bool has_parentshape() const;
  inline void clear_parentshape();
  static const int kParentShapeFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& parentshape() const;
  inline ::protobuf::srl::commands::IdChain* mutable_parentshape();
  inline ::protobuf::srl::commands::IdChain* release_parentshape();
  inline void set_allocated_parentshape(::protobuf::srl::commands::IdChain* parentshape);

  // required bytes shape = 2;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline const ::std::string& shape() const;
  inline void set_shape(const ::std::string& value);
  inline void set_shape(const char* value);
  inline void set_shape(const void* value, size_t size);
  inline ::std::string* mutable_shape();
  inline ::std::string* release_shape();
  inline void set_allocated_shape(::std::string* shape);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.AddSubshape)
 private:
  inline void set_has_parentshape();
  inline void clear_has_parentshape();
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* parentshape_;
  ::std::string* shape_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static AddSubshape* default_instance_;
};
// -------------------------------------------------------------------

class RemoveObject : public ::google::protobuf::Message {
 public:
  RemoveObject();
  virtual ~RemoveObject();

  RemoveObject(const RemoveObject& from);

  inline RemoveObject& operator=(const RemoveObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveObject& default_instance();

  void Swap(RemoveObject* other);

  // implements Message ----------------------------------------------

  RemoveObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveObject& from);
  void MergeFrom(const RemoveObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain shapeId = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.RemoveObject)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* shapeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static RemoveObject* default_instance_;
};
// -------------------------------------------------------------------

class ForceInterpretation : public ::google::protobuf::Message {
 public:
  ForceInterpretation();
  virtual ~ForceInterpretation();

  ForceInterpretation(const ForceInterpretation& from);

  inline ForceInterpretation& operator=(const ForceInterpretation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForceInterpretation& default_instance();

  void Swap(ForceInterpretation* other);

  // implements Message ----------------------------------------------

  ForceInterpretation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForceInterpretation& from);
  void MergeFrom(const ForceInterpretation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes interpretation = 1;
  inline bool has_interpretation() const;
  inline void clear_interpretation();
  static const int kInterpretationFieldNumber = 1;
  inline const ::std::string& interpretation() const;
  inline void set_interpretation(const ::std::string& value);
  inline void set_interpretation(const char* value);
  inline void set_interpretation(const void* value, size_t size);
  inline ::std::string* mutable_interpretation();
  inline ::std::string* release_interpretation();
  inline void set_allocated_interpretation(::std::string* interpretation);

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 2;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.ForceInterpretation)
 private:
  inline void set_has_interpretation();
  inline void clear_has_interpretation();
  inline void set_has_shapeid();
  inline void clear_has_shapeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* interpretation_;
  ::protobuf::srl::commands::IdChain* shapeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static ForceInterpretation* default_instance_;
};
// -------------------------------------------------------------------

class AddAttribtue : public ::google::protobuf::Message {
 public:
  AddAttribtue();
  virtual ~AddAttribtue();

  AddAttribtue(const AddAttribtue& from);

  inline AddAttribtue& operator=(const AddAttribtue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddAttribtue& default_instance();

  void Swap(AddAttribtue* other);

  // implements Message ----------------------------------------------

  AddAttribtue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddAttribtue& from);
  void MergeFrom(const AddAttribtue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain shapeId = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // required string attributeKey = 2;
  inline bool has_attributekey() const;
  inline void clear_attributekey();
  static const int kAttributeKeyFieldNumber = 2;
  inline const ::std::string& attributekey() const;
  inline void set_attributekey(const ::std::string& value);
  inline void set_attributekey(const char* value);
  inline void set_attributekey(const char* value, size_t size);
  inline ::std::string* mutable_attributekey();
  inline ::std::string* release_attributekey();
  inline void set_allocated_attributekey(::std::string* attributekey);

  // required bytes attributeValue = 3;
  inline bool has_attributevalue() const;
  inline void clear_attributevalue();
  static const int kAttributeValueFieldNumber = 3;
  inline const ::std::string& attributevalue() const;
  inline void set_attributevalue(const ::std::string& value);
  inline void set_attributevalue(const char* value);
  inline void set_attributevalue(const void* value, size_t size);
  inline ::std::string* mutable_attributevalue();
  inline ::std::string* release_attributevalue();
  inline void set_allocated_attributevalue(::std::string* attributevalue);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.AddAttribtue)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();
  inline void set_has_attributekey();
  inline void clear_has_attributekey();
  inline void set_has_attributevalue();
  inline void clear_has_attributevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* shapeid_;
  ::std::string* attributekey_;
  ::std::string* attributevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static AddAttribtue* default_instance_;
};
// -------------------------------------------------------------------

class RemoveAttribtue : public ::google::protobuf::Message {
 public:
  RemoveAttribtue();
  virtual ~RemoveAttribtue();

  RemoveAttribtue(const RemoveAttribtue& from);

  inline RemoveAttribtue& operator=(const RemoveAttribtue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveAttribtue& default_instance();

  void Swap(RemoveAttribtue* other);

  // implements Message ----------------------------------------------

  RemoveAttribtue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveAttribtue& from);
  void MergeFrom(const RemoveAttribtue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain shapeId = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // required string attributeKey = 2;
  inline bool has_attributekey() const;
  inline void clear_attributekey();
  static const int kAttributeKeyFieldNumber = 2;
  inline const ::std::string& attributekey() const;
  inline void set_attributekey(const ::std::string& value);
  inline void set_attributekey(const char* value);
  inline void set_attributekey(const char* value, size_t size);
  inline ::std::string* mutable_attributekey();
  inline ::std::string* release_attributekey();
  inline void set_allocated_attributekey(::std::string* attributekey);

  // required bytes attributeValue = 3;
  inline bool has_attributevalue() const;
  inline void clear_attributevalue();
  static const int kAttributeValueFieldNumber = 3;
  inline const ::std::string& attributevalue() const;
  inline void set_attributevalue(const ::std::string& value);
  inline void set_attributevalue(const char* value);
  inline void set_attributevalue(const void* value, size_t size);
  inline ::std::string* mutable_attributevalue();
  inline ::std::string* release_attributevalue();
  inline void set_allocated_attributevalue(::std::string* attributevalue);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.RemoveAttribtue)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();
  inline void set_has_attributekey();
  inline void clear_has_attributekey();
  inline void set_has_attributevalue();
  inline void clear_has_attributevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* shapeid_;
  ::std::string* attributekey_;
  ::std::string* attributevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static RemoveAttribtue* default_instance_;
};
// ===================================================================


// ===================================================================

// Update

// required string updateId = 1;
inline bool Update::has_updateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Update::set_has_updateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Update::clear_has_updateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Update::clear_updateid() {
  if (updateid_ != &::google::protobuf::internal::kEmptyString) {
    updateid_->clear();
  }
  clear_has_updateid();
}
inline const ::std::string& Update::updateid() const {
  return *updateid_;
}
inline void Update::set_updateid(const ::std::string& value) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(value);
}
inline void Update::set_updateid(const char* value) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(value);
}
inline void Update::set_updateid(const char* value, size_t size) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Update::mutable_updateid() {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  return updateid_;
}
inline ::std::string* Update::release_updateid() {
  clear_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updateid_;
    updateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Update::set_allocated_updateid(::std::string* updateid) {
  if (updateid_ != &::google::protobuf::internal::kEmptyString) {
    delete updateid_;
  }
  if (updateid) {
    set_has_updateid();
    updateid_ = updateid;
  } else {
    clear_has_updateid();
    updateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 2;
inline bool Update::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Update::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Update::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Update::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Update::time() const {
  return time_;
}
inline void Update::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .protobuf.srl.commands.Command commands = 3;
inline int Update::commands_size() const {
  return commands_.size();
}
inline void Update::clear_commands() {
  commands_.Clear();
}
inline const ::protobuf::srl::commands::Command& Update::commands(int index) const {
  return commands_.Get(index);
}
inline ::protobuf::srl::commands::Command* Update::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::protobuf::srl::commands::Command* Update::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::Command >&
Update::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::Command >*
Update::mutable_commands() {
  return &commands_;
}

// -------------------------------------------------------------------

// Command

// required .protobuf.srl.commands.CommandType commandType = 1;
inline bool Command::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_commandtype() {
  commandtype_ = 0;
  clear_has_commandtype();
}
inline ::protobuf::srl::commands::CommandType Command::commandtype() const {
  return static_cast< ::protobuf::srl::commands::CommandType >(commandtype_);
}
inline void Command::set_commandtype(::protobuf::srl::commands::CommandType value) {
  assert(::protobuf::srl::commands::CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// required bool isUserCreated = 2;
inline bool Command::has_isusercreated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_isusercreated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_isusercreated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_isusercreated() {
  isusercreated_ = false;
  clear_has_isusercreated();
}
inline bool Command::isusercreated() const {
  return isusercreated_;
}
inline void Command::set_isusercreated(bool value) {
  set_has_isusercreated();
  isusercreated_ = value;
}

// required bytes commandData = 3;
inline bool Command::has_commanddata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_commanddata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_commanddata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_commanddata() {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    commanddata_->clear();
  }
  clear_has_commanddata();
}
inline const ::std::string& Command::commanddata() const {
  return *commanddata_;
}
inline void Command::set_commanddata(const ::std::string& value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void Command::set_commanddata(const char* value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void Command::set_commanddata(const void* value, size_t size) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_commanddata() {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  return commanddata_;
}
inline ::std::string* Command::release_commanddata() {
  clear_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commanddata_;
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_commanddata(::std::string* commanddata) {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    delete commanddata_;
  }
  if (commanddata) {
    set_has_commanddata();
    commanddata_ = commanddata;
  } else {
    clear_has_commanddata();
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string commandId = 4;
inline bool Command::has_commandid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_commandid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_commandid() {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    commandid_->clear();
  }
  clear_has_commandid();
}
inline const ::std::string& Command::commandid() const {
  return *commandid_;
}
inline void Command::set_commandid(const ::std::string& value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void Command::set_commandid(const char* value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void Command::set_commandid(const char* value, size_t size) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_commandid() {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  return commandid_;
}
inline ::std::string* Command::release_commandid() {
  clear_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commandid_;
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_commandid(::std::string* commandid) {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    delete commandid_;
  }
  if (commandid) {
    set_has_commandid();
    commandid_ = commandid;
  } else {
    clear_has_commandid();
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IdChain

// repeated string idChain = 1;
inline int IdChain::idchain_size() const {
  return idchain_.size();
}
inline void IdChain::clear_idchain() {
  idchain_.Clear();
}
inline const ::std::string& IdChain::idchain(int index) const {
  return idchain_.Get(index);
}
inline ::std::string* IdChain::mutable_idchain(int index) {
  return idchain_.Mutable(index);
}
inline void IdChain::set_idchain(int index, const ::std::string& value) {
  idchain_.Mutable(index)->assign(value);
}
inline void IdChain::set_idchain(int index, const char* value) {
  idchain_.Mutable(index)->assign(value);
}
inline void IdChain::set_idchain(int index, const char* value, size_t size) {
  idchain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdChain::add_idchain() {
  return idchain_.Add();
}
inline void IdChain::add_idchain(const ::std::string& value) {
  idchain_.Add()->assign(value);
}
inline void IdChain::add_idchain(const char* value) {
  idchain_.Add()->assign(value);
}
inline void IdChain::add_idchain(const char* value, size_t size) {
  idchain_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IdChain::idchain() const {
  return idchain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IdChain::mutable_idchain() {
  return &idchain_;
}

// -------------------------------------------------------------------

// PackageShape

// optional .protobuf.srl.commands.IdChain oldContainerId = 1;
inline bool PackageShape::has_oldcontainerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageShape::set_has_oldcontainerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackageShape::clear_has_oldcontainerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackageShape::clear_oldcontainerid() {
  if (oldcontainerid_ != NULL) oldcontainerid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_oldcontainerid();
}
inline const ::protobuf::srl::commands::IdChain& PackageShape::oldcontainerid() const {
  return oldcontainerid_ != NULL ? *oldcontainerid_ : *default_instance_->oldcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* PackageShape::mutable_oldcontainerid() {
  set_has_oldcontainerid();
  if (oldcontainerid_ == NULL) oldcontainerid_ = new ::protobuf::srl::commands::IdChain;
  return oldcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* PackageShape::release_oldcontainerid() {
  clear_has_oldcontainerid();
  ::protobuf::srl::commands::IdChain* temp = oldcontainerid_;
  oldcontainerid_ = NULL;
  return temp;
}
inline void PackageShape::set_allocated_oldcontainerid(::protobuf::srl::commands::IdChain* oldcontainerid) {
  delete oldcontainerid_;
  oldcontainerid_ = oldcontainerid;
  if (oldcontainerid) {
    set_has_oldcontainerid();
  } else {
    clear_has_oldcontainerid();
  }
}

// optional .protobuf.srl.commands.IdChain newContainerId = 2;
inline bool PackageShape::has_newcontainerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageShape::set_has_newcontainerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageShape::clear_has_newcontainerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageShape::clear_newcontainerid() {
  if (newcontainerid_ != NULL) newcontainerid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_newcontainerid();
}
inline const ::protobuf::srl::commands::IdChain& PackageShape::newcontainerid() const {
  return newcontainerid_ != NULL ? *newcontainerid_ : *default_instance_->newcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* PackageShape::mutable_newcontainerid() {
  set_has_newcontainerid();
  if (newcontainerid_ == NULL) newcontainerid_ = new ::protobuf::srl::commands::IdChain;
  return newcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* PackageShape::release_newcontainerid() {
  clear_has_newcontainerid();
  ::protobuf::srl::commands::IdChain* temp = newcontainerid_;
  newcontainerid_ = NULL;
  return temp;
}
inline void PackageShape::set_allocated_newcontainerid(::protobuf::srl::commands::IdChain* newcontainerid) {
  delete newcontainerid_;
  newcontainerid_ = newcontainerid;
  if (newcontainerid) {
    set_has_newcontainerid();
  } else {
    clear_has_newcontainerid();
  }
}

// repeated string shapesToBeContained = 3;
inline int PackageShape::shapestobecontained_size() const {
  return shapestobecontained_.size();
}
inline void PackageShape::clear_shapestobecontained() {
  shapestobecontained_.Clear();
}
inline const ::std::string& PackageShape::shapestobecontained(int index) const {
  return shapestobecontained_.Get(index);
}
inline ::std::string* PackageShape::mutable_shapestobecontained(int index) {
  return shapestobecontained_.Mutable(index);
}
inline void PackageShape::set_shapestobecontained(int index, const ::std::string& value) {
  shapestobecontained_.Mutable(index)->assign(value);
}
inline void PackageShape::set_shapestobecontained(int index, const char* value) {
  shapestobecontained_.Mutable(index)->assign(value);
}
inline void PackageShape::set_shapestobecontained(int index, const char* value, size_t size) {
  shapestobecontained_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PackageShape::add_shapestobecontained() {
  return shapestobecontained_.Add();
}
inline void PackageShape::add_shapestobecontained(const ::std::string& value) {
  shapestobecontained_.Add()->assign(value);
}
inline void PackageShape::add_shapestobecontained(const char* value) {
  shapestobecontained_.Add()->assign(value);
}
inline void PackageShape::add_shapestobecontained(const char* value, size_t size) {
  shapestobecontained_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackageShape::shapestobecontained() const {
  return shapestobecontained_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackageShape::mutable_shapestobecontained() {
  return &shapestobecontained_;
}

// -------------------------------------------------------------------

// AddSubshape

// required .protobuf.srl.commands.IdChain parentShape = 1;
inline bool AddSubshape::has_parentshape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddSubshape::set_has_parentshape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddSubshape::clear_has_parentshape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddSubshape::clear_parentshape() {
  if (parentshape_ != NULL) parentshape_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_parentshape();
}
inline const ::protobuf::srl::commands::IdChain& AddSubshape::parentshape() const {
  return parentshape_ != NULL ? *parentshape_ : *default_instance_->parentshape_;
}
inline ::protobuf::srl::commands::IdChain* AddSubshape::mutable_parentshape() {
  set_has_parentshape();
  if (parentshape_ == NULL) parentshape_ = new ::protobuf::srl::commands::IdChain;
  return parentshape_;
}
inline ::protobuf::srl::commands::IdChain* AddSubshape::release_parentshape() {
  clear_has_parentshape();
  ::protobuf::srl::commands::IdChain* temp = parentshape_;
  parentshape_ = NULL;
  return temp;
}
inline void AddSubshape::set_allocated_parentshape(::protobuf::srl::commands::IdChain* parentshape) {
  delete parentshape_;
  parentshape_ = parentshape;
  if (parentshape) {
    set_has_parentshape();
  } else {
    clear_has_parentshape();
  }
}

// required bytes shape = 2;
inline bool AddSubshape::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddSubshape::set_has_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddSubshape::clear_has_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddSubshape::clear_shape() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    shape_->clear();
  }
  clear_has_shape();
}
inline const ::std::string& AddSubshape::shape() const {
  return *shape_;
}
inline void AddSubshape::set_shape(const ::std::string& value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
}
inline void AddSubshape::set_shape(const char* value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
}
inline void AddSubshape::set_shape(const void* value, size_t size) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddSubshape::mutable_shape() {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  return shape_;
}
inline ::std::string* AddSubshape::release_shape() {
  clear_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shape_;
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddSubshape::set_allocated_shape(::std::string* shape) {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (shape) {
    set_has_shape();
    shape_ = shape;
  } else {
    clear_has_shape();
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoveObject

// required .protobuf.srl.commands.IdChain shapeId = 1;
inline bool RemoveObject::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveObject::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveObject::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveObject::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& RemoveObject::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* RemoveObject::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* RemoveObject::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void RemoveObject::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// -------------------------------------------------------------------

// ForceInterpretation

// required bytes interpretation = 1;
inline bool ForceInterpretation::has_interpretation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForceInterpretation::set_has_interpretation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForceInterpretation::clear_has_interpretation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForceInterpretation::clear_interpretation() {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    interpretation_->clear();
  }
  clear_has_interpretation();
}
inline const ::std::string& ForceInterpretation::interpretation() const {
  return *interpretation_;
}
inline void ForceInterpretation::set_interpretation(const ::std::string& value) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(value);
}
inline void ForceInterpretation::set_interpretation(const char* value) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(value);
}
inline void ForceInterpretation::set_interpretation(const void* value, size_t size) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForceInterpretation::mutable_interpretation() {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  return interpretation_;
}
inline ::std::string* ForceInterpretation::release_interpretation() {
  clear_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interpretation_;
    interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ForceInterpretation::set_allocated_interpretation(::std::string* interpretation) {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    delete interpretation_;
  }
  if (interpretation) {
    set_has_interpretation();
    interpretation_ = interpretation;
  } else {
    clear_has_interpretation();
    interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .protobuf.srl.commands.IdChain shapeId = 2;
inline bool ForceInterpretation::has_shapeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForceInterpretation::set_has_shapeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForceInterpretation::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForceInterpretation::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& ForceInterpretation::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ForceInterpretation::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ForceInterpretation::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void ForceInterpretation::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// -------------------------------------------------------------------

// AddAttribtue

// required .protobuf.srl.commands.IdChain shapeId = 1;
inline bool AddAttribtue::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddAttribtue::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddAttribtue::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddAttribtue::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& AddAttribtue::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* AddAttribtue::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* AddAttribtue::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void AddAttribtue::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// required string attributeKey = 2;
inline bool AddAttribtue::has_attributekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddAttribtue::set_has_attributekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddAttribtue::clear_has_attributekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddAttribtue::clear_attributekey() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    attributekey_->clear();
  }
  clear_has_attributekey();
}
inline const ::std::string& AddAttribtue::attributekey() const {
  return *attributekey_;
}
inline void AddAttribtue::set_attributekey(const ::std::string& value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void AddAttribtue::set_attributekey(const char* value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void AddAttribtue::set_attributekey(const char* value, size_t size) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddAttribtue::mutable_attributekey() {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  return attributekey_;
}
inline ::std::string* AddAttribtue::release_attributekey() {
  clear_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributekey_;
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddAttribtue::set_allocated_attributekey(::std::string* attributekey) {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributekey) {
    set_has_attributekey();
    attributekey_ = attributekey;
  } else {
    clear_has_attributekey();
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes attributeValue = 3;
inline bool AddAttribtue::has_attributevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddAttribtue::set_has_attributevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddAttribtue::clear_has_attributevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddAttribtue::clear_attributevalue() {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    attributevalue_->clear();
  }
  clear_has_attributevalue();
}
inline const ::std::string& AddAttribtue::attributevalue() const {
  return *attributevalue_;
}
inline void AddAttribtue::set_attributevalue(const ::std::string& value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void AddAttribtue::set_attributevalue(const char* value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void AddAttribtue::set_attributevalue(const void* value, size_t size) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddAttribtue::mutable_attributevalue() {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  return attributevalue_;
}
inline ::std::string* AddAttribtue::release_attributevalue() {
  clear_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributevalue_;
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddAttribtue::set_allocated_attributevalue(::std::string* attributevalue) {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (attributevalue) {
    set_has_attributevalue();
    attributevalue_ = attributevalue;
  } else {
    clear_has_attributevalue();
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoveAttribtue

// required .protobuf.srl.commands.IdChain shapeId = 1;
inline bool RemoveAttribtue::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveAttribtue::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveAttribtue::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveAttribtue::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& RemoveAttribtue::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* RemoveAttribtue::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* RemoveAttribtue::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void RemoveAttribtue::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// required string attributeKey = 2;
inline bool RemoveAttribtue::has_attributekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveAttribtue::set_has_attributekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveAttribtue::clear_has_attributekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveAttribtue::clear_attributekey() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    attributekey_->clear();
  }
  clear_has_attributekey();
}
inline const ::std::string& RemoveAttribtue::attributekey() const {
  return *attributekey_;
}
inline void RemoveAttribtue::set_attributekey(const ::std::string& value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void RemoveAttribtue::set_attributekey(const char* value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void RemoveAttribtue::set_attributekey(const char* value, size_t size) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveAttribtue::mutable_attributekey() {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  return attributekey_;
}
inline ::std::string* RemoveAttribtue::release_attributekey() {
  clear_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributekey_;
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveAttribtue::set_allocated_attributekey(::std::string* attributekey) {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributekey) {
    set_has_attributekey();
    attributekey_ = attributekey;
  } else {
    clear_has_attributekey();
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes attributeValue = 3;
inline bool RemoveAttribtue::has_attributevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoveAttribtue::set_has_attributevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoveAttribtue::clear_has_attributevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoveAttribtue::clear_attributevalue() {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    attributevalue_->clear();
  }
  clear_has_attributevalue();
}
inline const ::std::string& RemoveAttribtue::attributevalue() const {
  return *attributevalue_;
}
inline void RemoveAttribtue::set_attributevalue(const ::std::string& value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void RemoveAttribtue::set_attributevalue(const char* value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void RemoveAttribtue::set_attributevalue(const void* value, size_t size) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveAttribtue::mutable_attributevalue() {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  return attributevalue_;
}
inline ::std::string* RemoveAttribtue::release_attributevalue() {
  clear_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributevalue_;
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveAttribtue::set_allocated_attributevalue(::std::string* attributevalue) {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (attributevalue) {
    set_has_attributevalue();
    attributevalue_ = attributevalue;
  } else {
    clear_has_attributevalue();
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::commands::CommandType>() {
  return ::protobuf::srl::commands::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fcommands_2eproto__INCLUDED
