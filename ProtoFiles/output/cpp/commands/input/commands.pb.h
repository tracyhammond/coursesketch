// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/commands.proto

#ifndef PROTOBUF_input_2fcommands_2eproto__INCLUDED
#define PROTOBUF_input_2fcommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace commands {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2fcommands_2eproto();
void protobuf_AssignDesc_input_2fcommands_2eproto();
void protobuf_ShutdownFile_input_2fcommands_2eproto();

class SrlUpdateList;
class SrlUpdate;
class SrlCommand;
class IdChain;
class Marker;
class ActionPackageShape;
class ActionForceInterpretation;
class ActionAddAttribtue;
class ActionRemoveAttribtue;

enum Marker_MarkerType {
  Marker_MarkerType_SUBMISSION = 0,
  Marker_MarkerType_FEEDBACK = 1,
  Marker_MarkerType_SAVE = 2,
  Marker_MarkerType_SPLIT = 3,
  Marker_MarkerType_CLEAR = 4
};
bool Marker_MarkerType_IsValid(int value);
const Marker_MarkerType Marker_MarkerType_MarkerType_MIN = Marker_MarkerType_SUBMISSION;
const Marker_MarkerType Marker_MarkerType_MarkerType_MAX = Marker_MarkerType_CLEAR;
const int Marker_MarkerType_MarkerType_ARRAYSIZE = Marker_MarkerType_MarkerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Marker_MarkerType_descriptor();
inline const ::std::string& Marker_MarkerType_Name(Marker_MarkerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Marker_MarkerType_descriptor(), value);
}
inline bool Marker_MarkerType_Parse(
    const ::std::string& name, Marker_MarkerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Marker_MarkerType>(
    Marker_MarkerType_descriptor(), name, value);
}
enum CommandType {
  ADD_STROKE = 0,
  ADD_SHAPE = 1,
  PACKAGE_SHAPE = 2,
  REMOVE_OBJECT = 3,
  ASSIGN_ATTRIBUTE = 4,
  REMOVE_ATTRIBUTE = 5,
  MARKER = 6,
  FORCE_INTERPRETATION = 10,
  UNDO = 11,
  REDO = 12,
  REWRITE = 13,
  CLEAR_STACK = 14,
  OPEN_SYNC = 15,
  CLOSE_SYNC = 16
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ADD_STROKE;
const CommandType CommandType_MAX = CLOSE_SYNC;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class SrlUpdateList : public ::google::protobuf::Message {
 public:
  SrlUpdateList();
  virtual ~SrlUpdateList();

  SrlUpdateList(const SrlUpdateList& from);

  inline SrlUpdateList& operator=(const SrlUpdateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlUpdateList& default_instance();

  void Swap(SrlUpdateList* other);

  // implements Message ----------------------------------------------

  SrlUpdateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlUpdateList& from);
  void MergeFrom(const SrlUpdateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.srl.commands.SrlUpdate list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::protobuf::srl::commands::SrlUpdate& list(int index) const;
  inline ::protobuf::srl::commands::SrlUpdate* mutable_list(int index);
  inline ::protobuf::srl::commands::SrlUpdate* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlUpdate >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlUpdate >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.SrlUpdateList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlUpdate > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static SrlUpdateList* default_instance_;
};
// -------------------------------------------------------------------

class SrlUpdate : public ::google::protobuf::Message {
 public:
  SrlUpdate();
  virtual ~SrlUpdate();

  SrlUpdate(const SrlUpdate& from);

  inline SrlUpdate& operator=(const SrlUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlUpdate& default_instance();

  void Swap(SrlUpdate* other);

  // implements Message ----------------------------------------------

  SrlUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlUpdate& from);
  void MergeFrom(const SrlUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string updateId = 1;
  inline bool has_updateid() const;
  inline void clear_updateid();
  static const int kUpdateIdFieldNumber = 1;
  inline const ::std::string& updateid() const;
  inline void set_updateid(const ::std::string& value);
  inline void set_updateid(const char* value);
  inline void set_updateid(const char* value, size_t size);
  inline ::std::string* mutable_updateid();
  inline ::std::string* release_updateid();
  inline void set_allocated_updateid(::std::string* updateid);

  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .protobuf.srl.commands.SrlCommand commands = 3;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 3;
  inline const ::protobuf::srl::commands::SrlCommand& commands(int index) const;
  inline ::protobuf::srl::commands::SrlCommand* mutable_commands(int index);
  inline ::protobuf::srl::commands::SrlCommand* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlCommand >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlCommand >*
      mutable_commands();

  // optional int32 commandNumber = 4;
  inline bool has_commandnumber() const;
  inline void clear_commandnumber();
  static const int kCommandNumberFieldNumber = 4;
  inline ::google::protobuf::int32 commandnumber() const;
  inline void set_commandnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.SrlUpdate)
 private:
  inline void set_has_updateid();
  inline void clear_has_updateid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_commandnumber();
  inline void clear_has_commandnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updateid_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlCommand > commands_;
  ::google::protobuf::int32 commandnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static SrlUpdate* default_instance_;
};
// -------------------------------------------------------------------

class SrlCommand : public ::google::protobuf::Message {
 public:
  SrlCommand();
  virtual ~SrlCommand();

  SrlCommand(const SrlCommand& from);

  inline SrlCommand& operator=(const SrlCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrlCommand& default_instance();

  void Swap(SrlCommand* other);

  // implements Message ----------------------------------------------

  SrlCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrlCommand& from);
  void MergeFrom(const SrlCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::protobuf::srl::commands::CommandType commandtype() const;
  inline void set_commandtype(::protobuf::srl::commands::CommandType value);

  // required bool isUserCreated = 2;
  inline bool has_isusercreated() const;
  inline void clear_isusercreated();
  static const int kIsUserCreatedFieldNumber = 2;
  inline bool isusercreated() const;
  inline void set_isusercreated(bool value);

  // optional bytes commandData = 3;
  inline bool has_commanddata() const;
  inline void clear_commanddata();
  static const int kCommandDataFieldNumber = 3;
  inline const ::std::string& commanddata() const;
  inline void set_commanddata(const ::std::string& value);
  inline void set_commanddata(const char* value);
  inline void set_commanddata(const void* value, size_t size);
  inline ::std::string* mutable_commanddata();
  inline ::std::string* release_commanddata();
  inline void set_allocated_commanddata(::std::string* commanddata);

  // optional string commandId = 4;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIdFieldNumber = 4;
  inline const ::std::string& commandid() const;
  inline void set_commandid(const ::std::string& value);
  inline void set_commandid(const char* value);
  inline void set_commandid(const char* value, size_t size);
  inline ::std::string* mutable_commandid();
  inline ::std::string* release_commandid();
  inline void set_allocated_commandid(::std::string* commandid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.SrlCommand)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_isusercreated();
  inline void clear_has_isusercreated();
  inline void set_has_commanddata();
  inline void clear_has_commanddata();
  inline void set_has_commandid();
  inline void clear_has_commandid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int commandtype_;
  bool isusercreated_;
  ::std::string* commanddata_;
  ::std::string* commandid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static SrlCommand* default_instance_;
};
// -------------------------------------------------------------------

class IdChain : public ::google::protobuf::Message {
 public:
  IdChain();
  virtual ~IdChain();

  IdChain(const IdChain& from);

  inline IdChain& operator=(const IdChain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdChain& default_instance();

  void Swap(IdChain* other);

  // implements Message ----------------------------------------------

  IdChain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdChain& from);
  void MergeFrom(const IdChain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string idChain = 1;
  inline int idchain_size() const;
  inline void clear_idchain();
  static const int kIdChainFieldNumber = 1;
  inline const ::std::string& idchain(int index) const;
  inline ::std::string* mutable_idchain(int index);
  inline void set_idchain(int index, const ::std::string& value);
  inline void set_idchain(int index, const char* value);
  inline void set_idchain(int index, const char* value, size_t size);
  inline ::std::string* add_idchain();
  inline void add_idchain(const ::std::string& value);
  inline void add_idchain(const char* value);
  inline void add_idchain(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& idchain() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_idchain();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.IdChain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> idchain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static IdChain* default_instance_;
};
// -------------------------------------------------------------------

class Marker : public ::google::protobuf::Message {
 public:
  Marker();
  virtual ~Marker();

  Marker(const Marker& from);

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Marker& default_instance();

  void Swap(Marker* other);

  // implements Message ----------------------------------------------

  Marker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Marker_MarkerType MarkerType;
  static const MarkerType SUBMISSION = Marker_MarkerType_SUBMISSION;
  static const MarkerType FEEDBACK = Marker_MarkerType_FEEDBACK;
  static const MarkerType SAVE = Marker_MarkerType_SAVE;
  static const MarkerType SPLIT = Marker_MarkerType_SPLIT;
  static const MarkerType CLEAR = Marker_MarkerType_CLEAR;
  static inline bool MarkerType_IsValid(int value) {
    return Marker_MarkerType_IsValid(value);
  }
  static const MarkerType MarkerType_MIN =
    Marker_MarkerType_MarkerType_MIN;
  static const MarkerType MarkerType_MAX =
    Marker_MarkerType_MarkerType_MAX;
  static const int MarkerType_ARRAYSIZE =
    Marker_MarkerType_MarkerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MarkerType_descriptor() {
    return Marker_MarkerType_descriptor();
  }
  static inline const ::std::string& MarkerType_Name(MarkerType value) {
    return Marker_MarkerType_Name(value);
  }
  static inline bool MarkerType_Parse(const ::std::string& name,
      MarkerType* value) {
    return Marker_MarkerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.Marker.MarkerType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::protobuf::srl::commands::Marker_MarkerType type() const;
  inline void set_type(::protobuf::srl::commands::Marker_MarkerType value);

  // optional string otherData = 2;
  inline bool has_otherdata() const;
  inline void clear_otherdata();
  static const int kOtherDataFieldNumber = 2;
  inline const ::std::string& otherdata() const;
  inline void set_otherdata(const ::std::string& value);
  inline void set_otherdata(const char* value);
  inline void set_otherdata(const char* value, size_t size);
  inline ::std::string* mutable_otherdata();
  inline ::std::string* release_otherdata();
  inline void set_allocated_otherdata(::std::string* otherdata);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.Marker)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_otherdata();
  inline void clear_has_otherdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* otherdata_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static Marker* default_instance_;
};
// -------------------------------------------------------------------

class ActionPackageShape : public ::google::protobuf::Message {
 public:
  ActionPackageShape();
  virtual ~ActionPackageShape();

  ActionPackageShape(const ActionPackageShape& from);

  inline ActionPackageShape& operator=(const ActionPackageShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionPackageShape& default_instance();

  void Swap(ActionPackageShape* other);

  // implements Message ----------------------------------------------

  ActionPackageShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionPackageShape& from);
  void MergeFrom(const ActionPackageShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  inline bool has_oldcontainerid() const;
  inline void clear_oldcontainerid();
  static const int kOldContainerIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& oldcontainerid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_oldcontainerid();
  inline ::protobuf::srl::commands::IdChain* release_oldcontainerid();
  inline void set_allocated_oldcontainerid(::protobuf::srl::commands::IdChain* oldcontainerid);

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  inline bool has_newcontainerid() const;
  inline void clear_newcontainerid();
  static const int kNewContainerIdFieldNumber = 2;
  inline const ::protobuf::srl::commands::IdChain& newcontainerid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_newcontainerid();
  inline ::protobuf::srl::commands::IdChain* release_newcontainerid();
  inline void set_allocated_newcontainerid(::protobuf::srl::commands::IdChain* newcontainerid);

  // repeated string shapesToBeContained = 3;
  inline int shapestobecontained_size() const;
  inline void clear_shapestobecontained();
  static const int kShapesToBeContainedFieldNumber = 3;
  inline const ::std::string& shapestobecontained(int index) const;
  inline ::std::string* mutable_shapestobecontained(int index);
  inline void set_shapestobecontained(int index, const ::std::string& value);
  inline void set_shapestobecontained(int index, const char* value);
  inline void set_shapestobecontained(int index, const char* value, size_t size);
  inline ::std::string* add_shapestobecontained();
  inline void add_shapestobecontained(const ::std::string& value);
  inline void add_shapestobecontained(const char* value);
  inline void add_shapestobecontained(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& shapestobecontained() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_shapestobecontained();

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.ActionPackageShape)
 private:
  inline void set_has_oldcontainerid();
  inline void clear_has_oldcontainerid();
  inline void set_has_newcontainerid();
  inline void clear_has_newcontainerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* oldcontainerid_;
  ::protobuf::srl::commands::IdChain* newcontainerid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> shapestobecontained_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static ActionPackageShape* default_instance_;
};
// -------------------------------------------------------------------

class ActionForceInterpretation : public ::google::protobuf::Message {
 public:
  ActionForceInterpretation();
  virtual ~ActionForceInterpretation();

  ActionForceInterpretation(const ActionForceInterpretation& from);

  inline ActionForceInterpretation& operator=(const ActionForceInterpretation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionForceInterpretation& default_instance();

  void Swap(ActionForceInterpretation* other);

  // implements Message ----------------------------------------------

  ActionForceInterpretation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionForceInterpretation& from);
  void MergeFrom(const ActionForceInterpretation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes interpretation = 1;
  inline bool has_interpretation() const;
  inline void clear_interpretation();
  static const int kInterpretationFieldNumber = 1;
  inline const ::std::string& interpretation() const;
  inline void set_interpretation(const ::std::string& value);
  inline void set_interpretation(const char* value);
  inline void set_interpretation(const void* value, size_t size);
  inline ::std::string* mutable_interpretation();
  inline ::std::string* release_interpretation();
  inline void set_allocated_interpretation(::std::string* interpretation);

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 2;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.ActionForceInterpretation)
 private:
  inline void set_has_interpretation();
  inline void clear_has_interpretation();
  inline void set_has_shapeid();
  inline void clear_has_shapeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* interpretation_;
  ::protobuf::srl::commands::IdChain* shapeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static ActionForceInterpretation* default_instance_;
};
// -------------------------------------------------------------------

class ActionAddAttribtue : public ::google::protobuf::Message {
 public:
  ActionAddAttribtue();
  virtual ~ActionAddAttribtue();

  ActionAddAttribtue(const ActionAddAttribtue& from);

  inline ActionAddAttribtue& operator=(const ActionAddAttribtue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionAddAttribtue& default_instance();

  void Swap(ActionAddAttribtue* other);

  // implements Message ----------------------------------------------

  ActionAddAttribtue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionAddAttribtue& from);
  void MergeFrom(const ActionAddAttribtue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain shapeId = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // required string attributeKey = 2;
  inline bool has_attributekey() const;
  inline void clear_attributekey();
  static const int kAttributeKeyFieldNumber = 2;
  inline const ::std::string& attributekey() const;
  inline void set_attributekey(const ::std::string& value);
  inline void set_attributekey(const char* value);
  inline void set_attributekey(const char* value, size_t size);
  inline ::std::string* mutable_attributekey();
  inline ::std::string* release_attributekey();
  inline void set_allocated_attributekey(::std::string* attributekey);

  // required bytes attributeValue = 3;
  inline bool has_attributevalue() const;
  inline void clear_attributevalue();
  static const int kAttributeValueFieldNumber = 3;
  inline const ::std::string& attributevalue() const;
  inline void set_attributevalue(const ::std::string& value);
  inline void set_attributevalue(const char* value);
  inline void set_attributevalue(const void* value, size_t size);
  inline ::std::string* mutable_attributevalue();
  inline ::std::string* release_attributevalue();
  inline void set_allocated_attributevalue(::std::string* attributevalue);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.ActionAddAttribtue)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();
  inline void set_has_attributekey();
  inline void clear_has_attributekey();
  inline void set_has_attributevalue();
  inline void clear_has_attributevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* shapeid_;
  ::std::string* attributekey_;
  ::std::string* attributevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static ActionAddAttribtue* default_instance_;
};
// -------------------------------------------------------------------

class ActionRemoveAttribtue : public ::google::protobuf::Message {
 public:
  ActionRemoveAttribtue();
  virtual ~ActionRemoveAttribtue();

  ActionRemoveAttribtue(const ActionRemoveAttribtue& from);

  inline ActionRemoveAttribtue& operator=(const ActionRemoveAttribtue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionRemoveAttribtue& default_instance();

  void Swap(ActionRemoveAttribtue* other);

  // implements Message ----------------------------------------------

  ActionRemoveAttribtue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionRemoveAttribtue& from);
  void MergeFrom(const ActionRemoveAttribtue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.commands.IdChain shapeId = 1;
  inline bool has_shapeid() const;
  inline void clear_shapeid();
  static const int kShapeIdFieldNumber = 1;
  inline const ::protobuf::srl::commands::IdChain& shapeid() const;
  inline ::protobuf::srl::commands::IdChain* mutable_shapeid();
  inline ::protobuf::srl::commands::IdChain* release_shapeid();
  inline void set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid);

  // required string attributeKey = 2;
  inline bool has_attributekey() const;
  inline void clear_attributekey();
  static const int kAttributeKeyFieldNumber = 2;
  inline const ::std::string& attributekey() const;
  inline void set_attributekey(const ::std::string& value);
  inline void set_attributekey(const char* value);
  inline void set_attributekey(const char* value, size_t size);
  inline ::std::string* mutable_attributekey();
  inline ::std::string* release_attributekey();
  inline void set_allocated_attributekey(::std::string* attributekey);

  // required bytes attributeValue = 3;
  inline bool has_attributevalue() const;
  inline void clear_attributevalue();
  static const int kAttributeValueFieldNumber = 3;
  inline const ::std::string& attributevalue() const;
  inline void set_attributevalue(const ::std::string& value);
  inline void set_attributevalue(const char* value);
  inline void set_attributevalue(const void* value, size_t size);
  inline ::std::string* mutable_attributevalue();
  inline ::std::string* release_attributevalue();
  inline void set_allocated_attributevalue(::std::string* attributevalue);

  // @@protoc_insertion_point(class_scope:protobuf.srl.commands.ActionRemoveAttribtue)
 private:
  inline void set_has_shapeid();
  inline void clear_has_shapeid();
  inline void set_has_attributekey();
  inline void clear_has_attributekey();
  inline void set_has_attributevalue();
  inline void clear_has_attributevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::protobuf::srl::commands::IdChain* shapeid_;
  ::std::string* attributekey_;
  ::std::string* attributevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_input_2fcommands_2eproto();
  friend void protobuf_AssignDesc_input_2fcommands_2eproto();
  friend void protobuf_ShutdownFile_input_2fcommands_2eproto();

  void InitAsDefaultInstance();
  static ActionRemoveAttribtue* default_instance_;
};
// ===================================================================


// ===================================================================

// SrlUpdateList

// repeated .protobuf.srl.commands.SrlUpdate list = 1;
inline int SrlUpdateList::list_size() const {
  return list_.size();
}
inline void SrlUpdateList::clear_list() {
  list_.Clear();
}
inline const ::protobuf::srl::commands::SrlUpdate& SrlUpdateList::list(int index) const {
  return list_.Get(index);
}
inline ::protobuf::srl::commands::SrlUpdate* SrlUpdateList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::protobuf::srl::commands::SrlUpdate* SrlUpdateList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlUpdate >&
SrlUpdateList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlUpdate >*
SrlUpdateList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// SrlUpdate

// required string updateId = 1;
inline bool SrlUpdate::has_updateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlUpdate::set_has_updateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlUpdate::clear_has_updateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlUpdate::clear_updateid() {
  if (updateid_ != &::google::protobuf::internal::kEmptyString) {
    updateid_->clear();
  }
  clear_has_updateid();
}
inline const ::std::string& SrlUpdate::updateid() const {
  return *updateid_;
}
inline void SrlUpdate::set_updateid(const ::std::string& value) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(value);
}
inline void SrlUpdate::set_updateid(const char* value) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(value);
}
inline void SrlUpdate::set_updateid(const char* value, size_t size) {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  updateid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlUpdate::mutable_updateid() {
  set_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    updateid_ = new ::std::string;
  }
  return updateid_;
}
inline ::std::string* SrlUpdate::release_updateid() {
  clear_has_updateid();
  if (updateid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updateid_;
    updateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlUpdate::set_allocated_updateid(::std::string* updateid) {
  if (updateid_ != &::google::protobuf::internal::kEmptyString) {
    delete updateid_;
  }
  if (updateid) {
    set_has_updateid();
    updateid_ = updateid;
  } else {
    clear_has_updateid();
    updateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 2;
inline bool SrlUpdate::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlUpdate::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlUpdate::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlUpdate::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SrlUpdate::time() const {
  return time_;
}
inline void SrlUpdate::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .protobuf.srl.commands.SrlCommand commands = 3;
inline int SrlUpdate::commands_size() const {
  return commands_.size();
}
inline void SrlUpdate::clear_commands() {
  commands_.Clear();
}
inline const ::protobuf::srl::commands::SrlCommand& SrlUpdate::commands(int index) const {
  return commands_.Get(index);
}
inline ::protobuf::srl::commands::SrlCommand* SrlUpdate::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::protobuf::srl::commands::SrlCommand* SrlUpdate::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlCommand >&
SrlUpdate::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::commands::SrlCommand >*
SrlUpdate::mutable_commands() {
  return &commands_;
}

// optional int32 commandNumber = 4;
inline bool SrlUpdate::has_commandnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlUpdate::set_has_commandnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlUpdate::clear_has_commandnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlUpdate::clear_commandnumber() {
  commandnumber_ = 0;
  clear_has_commandnumber();
}
inline ::google::protobuf::int32 SrlUpdate::commandnumber() const {
  return commandnumber_;
}
inline void SrlUpdate::set_commandnumber(::google::protobuf::int32 value) {
  set_has_commandnumber();
  commandnumber_ = value;
}

// -------------------------------------------------------------------

// SrlCommand

// required .protobuf.srl.commands.CommandType commandType = 1;
inline bool SrlCommand::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrlCommand::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrlCommand::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrlCommand::clear_commandtype() {
  commandtype_ = 0;
  clear_has_commandtype();
}
inline ::protobuf::srl::commands::CommandType SrlCommand::commandtype() const {
  return static_cast< ::protobuf::srl::commands::CommandType >(commandtype_);
}
inline void SrlCommand::set_commandtype(::protobuf::srl::commands::CommandType value) {
  assert(::protobuf::srl::commands::CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// required bool isUserCreated = 2;
inline bool SrlCommand::has_isusercreated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrlCommand::set_has_isusercreated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrlCommand::clear_has_isusercreated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SrlCommand::clear_isusercreated() {
  isusercreated_ = false;
  clear_has_isusercreated();
}
inline bool SrlCommand::isusercreated() const {
  return isusercreated_;
}
inline void SrlCommand::set_isusercreated(bool value) {
  set_has_isusercreated();
  isusercreated_ = value;
}

// optional bytes commandData = 3;
inline bool SrlCommand::has_commanddata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrlCommand::set_has_commanddata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrlCommand::clear_has_commanddata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SrlCommand::clear_commanddata() {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    commanddata_->clear();
  }
  clear_has_commanddata();
}
inline const ::std::string& SrlCommand::commanddata() const {
  return *commanddata_;
}
inline void SrlCommand::set_commanddata(const ::std::string& value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void SrlCommand::set_commanddata(const char* value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void SrlCommand::set_commanddata(const void* value, size_t size) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlCommand::mutable_commanddata() {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  return commanddata_;
}
inline ::std::string* SrlCommand::release_commanddata() {
  clear_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commanddata_;
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlCommand::set_allocated_commanddata(::std::string* commanddata) {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    delete commanddata_;
  }
  if (commanddata) {
    set_has_commanddata();
    commanddata_ = commanddata;
  } else {
    clear_has_commanddata();
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string commandId = 4;
inline bool SrlCommand::has_commandid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrlCommand::set_has_commandid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrlCommand::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrlCommand::clear_commandid() {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    commandid_->clear();
  }
  clear_has_commandid();
}
inline const ::std::string& SrlCommand::commandid() const {
  return *commandid_;
}
inline void SrlCommand::set_commandid(const ::std::string& value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void SrlCommand::set_commandid(const char* value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void SrlCommand::set_commandid(const char* value, size_t size) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrlCommand::mutable_commandid() {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  return commandid_;
}
inline ::std::string* SrlCommand::release_commandid() {
  clear_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commandid_;
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SrlCommand::set_allocated_commandid(::std::string* commandid) {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    delete commandid_;
  }
  if (commandid) {
    set_has_commandid();
    commandid_ = commandid;
  } else {
    clear_has_commandid();
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IdChain

// repeated string idChain = 1;
inline int IdChain::idchain_size() const {
  return idchain_.size();
}
inline void IdChain::clear_idchain() {
  idchain_.Clear();
}
inline const ::std::string& IdChain::idchain(int index) const {
  return idchain_.Get(index);
}
inline ::std::string* IdChain::mutable_idchain(int index) {
  return idchain_.Mutable(index);
}
inline void IdChain::set_idchain(int index, const ::std::string& value) {
  idchain_.Mutable(index)->assign(value);
}
inline void IdChain::set_idchain(int index, const char* value) {
  idchain_.Mutable(index)->assign(value);
}
inline void IdChain::set_idchain(int index, const char* value, size_t size) {
  idchain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdChain::add_idchain() {
  return idchain_.Add();
}
inline void IdChain::add_idchain(const ::std::string& value) {
  idchain_.Add()->assign(value);
}
inline void IdChain::add_idchain(const char* value) {
  idchain_.Add()->assign(value);
}
inline void IdChain::add_idchain(const char* value, size_t size) {
  idchain_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IdChain::idchain() const {
  return idchain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IdChain::mutable_idchain() {
  return &idchain_;
}

// -------------------------------------------------------------------

// Marker

// required .protobuf.srl.commands.Marker.MarkerType type = 1;
inline bool Marker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Marker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Marker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Marker::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protobuf::srl::commands::Marker_MarkerType Marker::type() const {
  return static_cast< ::protobuf::srl::commands::Marker_MarkerType >(type_);
}
inline void Marker::set_type(::protobuf::srl::commands::Marker_MarkerType value) {
  assert(::protobuf::srl::commands::Marker_MarkerType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string otherData = 2;
inline bool Marker::has_otherdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Marker::set_has_otherdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Marker::clear_has_otherdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Marker::clear_otherdata() {
  if (otherdata_ != &::google::protobuf::internal::kEmptyString) {
    otherdata_->clear();
  }
  clear_has_otherdata();
}
inline const ::std::string& Marker::otherdata() const {
  return *otherdata_;
}
inline void Marker::set_otherdata(const ::std::string& value) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(value);
}
inline void Marker::set_otherdata(const char* value) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(value);
}
inline void Marker::set_otherdata(const char* value, size_t size) {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  otherdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Marker::mutable_otherdata() {
  set_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    otherdata_ = new ::std::string;
  }
  return otherdata_;
}
inline ::std::string* Marker::release_otherdata() {
  clear_has_otherdata();
  if (otherdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otherdata_;
    otherdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Marker::set_allocated_otherdata(::std::string* otherdata) {
  if (otherdata_ != &::google::protobuf::internal::kEmptyString) {
    delete otherdata_;
  }
  if (otherdata) {
    set_has_otherdata();
    otherdata_ = otherdata;
  } else {
    clear_has_otherdata();
    otherdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ActionPackageShape

// optional .protobuf.srl.commands.IdChain oldContainerId = 1;
inline bool ActionPackageShape::has_oldcontainerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionPackageShape::set_has_oldcontainerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionPackageShape::clear_has_oldcontainerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionPackageShape::clear_oldcontainerid() {
  if (oldcontainerid_ != NULL) oldcontainerid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_oldcontainerid();
}
inline const ::protobuf::srl::commands::IdChain& ActionPackageShape::oldcontainerid() const {
  return oldcontainerid_ != NULL ? *oldcontainerid_ : *default_instance_->oldcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* ActionPackageShape::mutable_oldcontainerid() {
  set_has_oldcontainerid();
  if (oldcontainerid_ == NULL) oldcontainerid_ = new ::protobuf::srl::commands::IdChain;
  return oldcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* ActionPackageShape::release_oldcontainerid() {
  clear_has_oldcontainerid();
  ::protobuf::srl::commands::IdChain* temp = oldcontainerid_;
  oldcontainerid_ = NULL;
  return temp;
}
inline void ActionPackageShape::set_allocated_oldcontainerid(::protobuf::srl::commands::IdChain* oldcontainerid) {
  delete oldcontainerid_;
  oldcontainerid_ = oldcontainerid;
  if (oldcontainerid) {
    set_has_oldcontainerid();
  } else {
    clear_has_oldcontainerid();
  }
}

// optional .protobuf.srl.commands.IdChain newContainerId = 2;
inline bool ActionPackageShape::has_newcontainerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionPackageShape::set_has_newcontainerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionPackageShape::clear_has_newcontainerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionPackageShape::clear_newcontainerid() {
  if (newcontainerid_ != NULL) newcontainerid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_newcontainerid();
}
inline const ::protobuf::srl::commands::IdChain& ActionPackageShape::newcontainerid() const {
  return newcontainerid_ != NULL ? *newcontainerid_ : *default_instance_->newcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* ActionPackageShape::mutable_newcontainerid() {
  set_has_newcontainerid();
  if (newcontainerid_ == NULL) newcontainerid_ = new ::protobuf::srl::commands::IdChain;
  return newcontainerid_;
}
inline ::protobuf::srl::commands::IdChain* ActionPackageShape::release_newcontainerid() {
  clear_has_newcontainerid();
  ::protobuf::srl::commands::IdChain* temp = newcontainerid_;
  newcontainerid_ = NULL;
  return temp;
}
inline void ActionPackageShape::set_allocated_newcontainerid(::protobuf::srl::commands::IdChain* newcontainerid) {
  delete newcontainerid_;
  newcontainerid_ = newcontainerid;
  if (newcontainerid) {
    set_has_newcontainerid();
  } else {
    clear_has_newcontainerid();
  }
}

// repeated string shapesToBeContained = 3;
inline int ActionPackageShape::shapestobecontained_size() const {
  return shapestobecontained_.size();
}
inline void ActionPackageShape::clear_shapestobecontained() {
  shapestobecontained_.Clear();
}
inline const ::std::string& ActionPackageShape::shapestobecontained(int index) const {
  return shapestobecontained_.Get(index);
}
inline ::std::string* ActionPackageShape::mutable_shapestobecontained(int index) {
  return shapestobecontained_.Mutable(index);
}
inline void ActionPackageShape::set_shapestobecontained(int index, const ::std::string& value) {
  shapestobecontained_.Mutable(index)->assign(value);
}
inline void ActionPackageShape::set_shapestobecontained(int index, const char* value) {
  shapestobecontained_.Mutable(index)->assign(value);
}
inline void ActionPackageShape::set_shapestobecontained(int index, const char* value, size_t size) {
  shapestobecontained_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionPackageShape::add_shapestobecontained() {
  return shapestobecontained_.Add();
}
inline void ActionPackageShape::add_shapestobecontained(const ::std::string& value) {
  shapestobecontained_.Add()->assign(value);
}
inline void ActionPackageShape::add_shapestobecontained(const char* value) {
  shapestobecontained_.Add()->assign(value);
}
inline void ActionPackageShape::add_shapestobecontained(const char* value, size_t size) {
  shapestobecontained_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ActionPackageShape::shapestobecontained() const {
  return shapestobecontained_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ActionPackageShape::mutable_shapestobecontained() {
  return &shapestobecontained_;
}

// -------------------------------------------------------------------

// ActionForceInterpretation

// required bytes interpretation = 1;
inline bool ActionForceInterpretation::has_interpretation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionForceInterpretation::set_has_interpretation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionForceInterpretation::clear_has_interpretation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionForceInterpretation::clear_interpretation() {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    interpretation_->clear();
  }
  clear_has_interpretation();
}
inline const ::std::string& ActionForceInterpretation::interpretation() const {
  return *interpretation_;
}
inline void ActionForceInterpretation::set_interpretation(const ::std::string& value) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(value);
}
inline void ActionForceInterpretation::set_interpretation(const char* value) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(value);
}
inline void ActionForceInterpretation::set_interpretation(const void* value, size_t size) {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  interpretation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionForceInterpretation::mutable_interpretation() {
  set_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    interpretation_ = new ::std::string;
  }
  return interpretation_;
}
inline ::std::string* ActionForceInterpretation::release_interpretation() {
  clear_has_interpretation();
  if (interpretation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = interpretation_;
    interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActionForceInterpretation::set_allocated_interpretation(::std::string* interpretation) {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    delete interpretation_;
  }
  if (interpretation) {
    set_has_interpretation();
    interpretation_ = interpretation;
  } else {
    clear_has_interpretation();
    interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .protobuf.srl.commands.IdChain shapeId = 2;
inline bool ActionForceInterpretation::has_shapeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionForceInterpretation::set_has_shapeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionForceInterpretation::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionForceInterpretation::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& ActionForceInterpretation::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionForceInterpretation::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionForceInterpretation::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void ActionForceInterpretation::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// -------------------------------------------------------------------

// ActionAddAttribtue

// required .protobuf.srl.commands.IdChain shapeId = 1;
inline bool ActionAddAttribtue::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionAddAttribtue::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionAddAttribtue::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionAddAttribtue::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& ActionAddAttribtue::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionAddAttribtue::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionAddAttribtue::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void ActionAddAttribtue::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// required string attributeKey = 2;
inline bool ActionAddAttribtue::has_attributekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionAddAttribtue::set_has_attributekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionAddAttribtue::clear_has_attributekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionAddAttribtue::clear_attributekey() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    attributekey_->clear();
  }
  clear_has_attributekey();
}
inline const ::std::string& ActionAddAttribtue::attributekey() const {
  return *attributekey_;
}
inline void ActionAddAttribtue::set_attributekey(const ::std::string& value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void ActionAddAttribtue::set_attributekey(const char* value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void ActionAddAttribtue::set_attributekey(const char* value, size_t size) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionAddAttribtue::mutable_attributekey() {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  return attributekey_;
}
inline ::std::string* ActionAddAttribtue::release_attributekey() {
  clear_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributekey_;
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActionAddAttribtue::set_allocated_attributekey(::std::string* attributekey) {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributekey) {
    set_has_attributekey();
    attributekey_ = attributekey;
  } else {
    clear_has_attributekey();
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes attributeValue = 3;
inline bool ActionAddAttribtue::has_attributevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionAddAttribtue::set_has_attributevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionAddAttribtue::clear_has_attributevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionAddAttribtue::clear_attributevalue() {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    attributevalue_->clear();
  }
  clear_has_attributevalue();
}
inline const ::std::string& ActionAddAttribtue::attributevalue() const {
  return *attributevalue_;
}
inline void ActionAddAttribtue::set_attributevalue(const ::std::string& value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void ActionAddAttribtue::set_attributevalue(const char* value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void ActionAddAttribtue::set_attributevalue(const void* value, size_t size) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionAddAttribtue::mutable_attributevalue() {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  return attributevalue_;
}
inline ::std::string* ActionAddAttribtue::release_attributevalue() {
  clear_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributevalue_;
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActionAddAttribtue::set_allocated_attributevalue(::std::string* attributevalue) {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (attributevalue) {
    set_has_attributevalue();
    attributevalue_ = attributevalue;
  } else {
    clear_has_attributevalue();
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ActionRemoveAttribtue

// required .protobuf.srl.commands.IdChain shapeId = 1;
inline bool ActionRemoveAttribtue::has_shapeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionRemoveAttribtue::set_has_shapeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionRemoveAttribtue::clear_has_shapeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionRemoveAttribtue::clear_shapeid() {
  if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
  clear_has_shapeid();
}
inline const ::protobuf::srl::commands::IdChain& ActionRemoveAttribtue::shapeid() const {
  return shapeid_ != NULL ? *shapeid_ : *default_instance_->shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionRemoveAttribtue::mutable_shapeid() {
  set_has_shapeid();
  if (shapeid_ == NULL) shapeid_ = new ::protobuf::srl::commands::IdChain;
  return shapeid_;
}
inline ::protobuf::srl::commands::IdChain* ActionRemoveAttribtue::release_shapeid() {
  clear_has_shapeid();
  ::protobuf::srl::commands::IdChain* temp = shapeid_;
  shapeid_ = NULL;
  return temp;
}
inline void ActionRemoveAttribtue::set_allocated_shapeid(::protobuf::srl::commands::IdChain* shapeid) {
  delete shapeid_;
  shapeid_ = shapeid;
  if (shapeid) {
    set_has_shapeid();
  } else {
    clear_has_shapeid();
  }
}

// required string attributeKey = 2;
inline bool ActionRemoveAttribtue::has_attributekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionRemoveAttribtue::set_has_attributekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionRemoveAttribtue::clear_has_attributekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionRemoveAttribtue::clear_attributekey() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    attributekey_->clear();
  }
  clear_has_attributekey();
}
inline const ::std::string& ActionRemoveAttribtue::attributekey() const {
  return *attributekey_;
}
inline void ActionRemoveAttribtue::set_attributekey(const ::std::string& value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void ActionRemoveAttribtue::set_attributekey(const char* value) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(value);
}
inline void ActionRemoveAttribtue::set_attributekey(const char* value, size_t size) {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  attributekey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionRemoveAttribtue::mutable_attributekey() {
  set_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    attributekey_ = new ::std::string;
  }
  return attributekey_;
}
inline ::std::string* ActionRemoveAttribtue::release_attributekey() {
  clear_has_attributekey();
  if (attributekey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributekey_;
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActionRemoveAttribtue::set_allocated_attributekey(::std::string* attributekey) {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributekey) {
    set_has_attributekey();
    attributekey_ = attributekey;
  } else {
    clear_has_attributekey();
    attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes attributeValue = 3;
inline bool ActionRemoveAttribtue::has_attributevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionRemoveAttribtue::set_has_attributevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionRemoveAttribtue::clear_has_attributevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionRemoveAttribtue::clear_attributevalue() {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    attributevalue_->clear();
  }
  clear_has_attributevalue();
}
inline const ::std::string& ActionRemoveAttribtue::attributevalue() const {
  return *attributevalue_;
}
inline void ActionRemoveAttribtue::set_attributevalue(const ::std::string& value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void ActionRemoveAttribtue::set_attributevalue(const char* value) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(value);
}
inline void ActionRemoveAttribtue::set_attributevalue(const void* value, size_t size) {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  attributevalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionRemoveAttribtue::mutable_attributevalue() {
  set_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    attributevalue_ = new ::std::string;
  }
  return attributevalue_;
}
inline ::std::string* ActionRemoveAttribtue::release_attributevalue() {
  clear_has_attributevalue();
  if (attributevalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attributevalue_;
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActionRemoveAttribtue::set_allocated_attributevalue(::std::string* attributevalue) {
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (attributevalue) {
    set_has_attributevalue();
    attributevalue_ = attributevalue;
  } else {
    clear_has_attributevalue();
    attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::commands::Marker_MarkerType>() {
  return ::protobuf::srl::commands::Marker_MarkerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::commands::CommandType>() {
  return ::protobuf::srl::commands::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2fcommands_2eproto__INCLUDED
