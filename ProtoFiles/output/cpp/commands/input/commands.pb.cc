// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace action {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* PackageShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddStroke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStroke_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceInterpretation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceInterpretation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fcommands_2eproto() {
  protobuf_AddDesc_input_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/commands.proto");
  GOOGLE_CHECK(file != NULL);
  PackageShape_descriptor_ = file->message_type(0);
  static const int PackageShape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, newcontainerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, shapestobecontained_),
  };
  PackageShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageShape_descriptor_,
      PackageShape::default_instance_,
      PackageShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageShape));
  AddStroke_descriptor_ = file->message_type(1);
  static const int AddStroke_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStroke, stroke_),
  };
  AddStroke_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddStroke_descriptor_,
      AddStroke::default_instance_,
      AddStroke_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStroke, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStroke, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddStroke));
  RemoveShape_descriptor_ = file->message_type(2);
  static const int RemoveShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveShape, shapetoremoveid_),
  };
  RemoveShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveShape_descriptor_,
      RemoveShape::default_instance_,
      RemoveShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveShape));
  AddShape_descriptor_ = file->message_type(3);
  static const int AddShape_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddShape, shape_),
  };
  AddShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddShape_descriptor_,
      AddShape::default_instance_,
      AddShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddShape));
  ForceInterpretation_descriptor_ = file->message_type(4);
  static const int ForceInterpretation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, interpretation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, shapeid_),
  };
  ForceInterpretation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceInterpretation_descriptor_,
      ForceInterpretation::default_instance_,
      ForceInterpretation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceInterpretation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageShape_descriptor_, &PackageShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddStroke_descriptor_, &AddStroke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveShape_descriptor_, &RemoveShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddShape_descriptor_, &AddShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceInterpretation_descriptor_, &ForceInterpretation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fcommands_2eproto() {
  delete PackageShape::default_instance_;
  delete PackageShape_reflection_;
  delete AddStroke::default_instance_;
  delete AddStroke_reflection_;
  delete RemoveShape::default_instance_;
  delete RemoveShape_reflection_;
  delete AddShape::default_instance_;
  delete AddShape_reflection_;
  delete ForceInterpretation::default_instance_;
  delete ForceInterpretation_reflection_;
}

void protobuf_AddDesc_input_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024input/commands.proto\022\034protobuf.srl.act"
    "ion.commands\"C\n\014PackageShape\022\026\n\016newConta"
    "inerId\030\001 \002(\t\022\033\n\023shapesToBeContained\030\002 \003("
    "\t\"\033\n\tAddStroke\022\016\n\006stroke\030\001 \002(\014\"&\n\013Remove"
    "Shape\022\027\n\017shapeToRemoveId\030\001 \002(\t\"\031\n\010AddSha"
    "pe\022\r\n\005shape\030\001 \002(\014\">\n\023ForceInterpretation"
    "\022\026\n\016interpretation\030\001 \002(\014\022\017\n\007shapeId\030\002 \002("
    "\t", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/commands.proto", &protobuf_RegisterTypes);
  PackageShape::default_instance_ = new PackageShape();
  AddStroke::default_instance_ = new AddStroke();
  RemoveShape::default_instance_ = new RemoveShape();
  AddShape::default_instance_ = new AddShape();
  ForceInterpretation::default_instance_ = new ForceInterpretation();
  PackageShape::default_instance_->InitAsDefaultInstance();
  AddStroke::default_instance_->InitAsDefaultInstance();
  RemoveShape::default_instance_->InitAsDefaultInstance();
  AddShape::default_instance_->InitAsDefaultInstance();
  ForceInterpretation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fcommands_2eproto {
  StaticDescriptorInitializer_input_2fcommands_2eproto() {
    protobuf_AddDesc_input_2fcommands_2eproto();
  }
} static_descriptor_initializer_input_2fcommands_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PackageShape::kNewContainerIdFieldNumber;
const int PackageShape::kShapesToBeContainedFieldNumber;
#endif  // !_MSC_VER

PackageShape::PackageShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageShape::InitAsDefaultInstance() {
}

PackageShape::PackageShape(const PackageShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageShape::SharedCtor() {
  _cached_size_ = 0;
  newcontainerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageShape::~PackageShape() {
  SharedDtor();
}

void PackageShape::SharedDtor() {
  if (newcontainerid_ != &::google::protobuf::internal::kEmptyString) {
    delete newcontainerid_;
  }
  if (this != default_instance_) {
  }
}

void PackageShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageShape_descriptor_;
}

const PackageShape& PackageShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

PackageShape* PackageShape::default_instance_ = NULL;

PackageShape* PackageShape::New() const {
  return new PackageShape;
}

void PackageShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newcontainerid()) {
      if (newcontainerid_ != &::google::protobuf::internal::kEmptyString) {
        newcontainerid_->clear();
      }
    }
  }
  shapestobecontained_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string newContainerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newcontainerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newcontainerid().data(), this->newcontainerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapesToBeContained;
        break;
      }

      // repeated string shapesToBeContained = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapesToBeContained:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shapestobecontained()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shapestobecontained(this->shapestobecontained_size() - 1).data(),
            this->shapestobecontained(this->shapestobecontained_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapesToBeContained;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string newContainerId = 1;
  if (has_newcontainerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newcontainerid().data(), this->newcontainerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newcontainerid(), output);
  }

  // repeated string shapesToBeContained = 2;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shapestobecontained(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string newContainerId = 1;
  if (has_newcontainerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newcontainerid().data(), this->newcontainerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newcontainerid(), target);
  }

  // repeated string shapesToBeContained = 2;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->shapestobecontained(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string newContainerId = 1;
    if (has_newcontainerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newcontainerid());
    }

  }
  // repeated string shapesToBeContained = 2;
  total_size += 1 * this->shapestobecontained_size();
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shapestobecontained(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageShape::MergeFrom(const PackageShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapestobecontained_.MergeFrom(from.shapestobecontained_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newcontainerid()) {
      set_newcontainerid(from.newcontainerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageShape::CopyFrom(const PackageShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PackageShape::Swap(PackageShape* other) {
  if (other != this) {
    std::swap(newcontainerid_, other->newcontainerid_);
    shapestobecontained_.Swap(&other->shapestobecontained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageShape_descriptor_;
  metadata.reflection = PackageShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddStroke::kStrokeFieldNumber;
#endif  // !_MSC_VER

AddStroke::AddStroke()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddStroke::InitAsDefaultInstance() {
}

AddStroke::AddStroke(const AddStroke& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddStroke::SharedCtor() {
  _cached_size_ = 0;
  stroke_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStroke::~AddStroke() {
  SharedDtor();
}

void AddStroke::SharedDtor() {
  if (stroke_ != &::google::protobuf::internal::kEmptyString) {
    delete stroke_;
  }
  if (this != default_instance_) {
  }
}

void AddStroke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStroke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStroke_descriptor_;
}

const AddStroke& AddStroke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

AddStroke* AddStroke::default_instance_ = NULL;

AddStroke* AddStroke::New() const {
  return new AddStroke;
}

void AddStroke::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroke()) {
      if (stroke_ != &::google::protobuf::internal::kEmptyString) {
        stroke_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddStroke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes stroke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddStroke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes stroke = 1;
  if (has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stroke(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddStroke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes stroke = 1;
  if (has_stroke()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stroke(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddStroke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes stroke = 1;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stroke());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStroke::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddStroke* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddStroke*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddStroke::MergeFrom(const AddStroke& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroke()) {
      set_stroke(from.stroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddStroke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStroke::CopyFrom(const AddStroke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStroke::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddStroke::Swap(AddStroke* other) {
  if (other != this) {
    std::swap(stroke_, other->stroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddStroke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStroke_descriptor_;
  metadata.reflection = AddStroke_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveShape::kShapeToRemoveIdFieldNumber;
#endif  // !_MSC_VER

RemoveShape::RemoveShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveShape::InitAsDefaultInstance() {
}

RemoveShape::RemoveShape(const RemoveShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveShape::SharedCtor() {
  _cached_size_ = 0;
  shapetoremoveid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveShape::~RemoveShape() {
  SharedDtor();
}

void RemoveShape::SharedDtor() {
  if (shapetoremoveid_ != &::google::protobuf::internal::kEmptyString) {
    delete shapetoremoveid_;
  }
  if (this != default_instance_) {
  }
}

void RemoveShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveShape_descriptor_;
}

const RemoveShape& RemoveShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

RemoveShape* RemoveShape::default_instance_ = NULL;

RemoveShape* RemoveShape::New() const {
  return new RemoveShape;
}

void RemoveShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapetoremoveid()) {
      if (shapetoremoveid_ != &::google::protobuf::internal::kEmptyString) {
        shapetoremoveid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string shapeToRemoveId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shapetoremoveid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shapetoremoveid().data(), this->shapetoremoveid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string shapeToRemoveId = 1;
  if (has_shapetoremoveid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapetoremoveid().data(), this->shapetoremoveid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->shapetoremoveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string shapeToRemoveId = 1;
  if (has_shapetoremoveid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapetoremoveid().data(), this->shapetoremoveid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shapetoremoveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string shapeToRemoveId = 1;
    if (has_shapetoremoveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shapetoremoveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveShape::MergeFrom(const RemoveShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapetoremoveid()) {
      set_shapetoremoveid(from.shapetoremoveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveShape::CopyFrom(const RemoveShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveShape::Swap(RemoveShape* other) {
  if (other != this) {
    std::swap(shapetoremoveid_, other->shapetoremoveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveShape_descriptor_;
  metadata.reflection = RemoveShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddShape::kShapeFieldNumber;
#endif  // !_MSC_VER

AddShape::AddShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddShape::InitAsDefaultInstance() {
}

AddShape::AddShape(const AddShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddShape::SharedCtor() {
  _cached_size_ = 0;
  shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddShape::~AddShape() {
  SharedDtor();
}

void AddShape::SharedDtor() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (this != default_instance_) {
  }
}

void AddShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddShape_descriptor_;
}

const AddShape& AddShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

AddShape* AddShape::default_instance_ = NULL;

AddShape* AddShape::New() const {
  return new AddShape;
}

void AddShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shape()) {
      if (shape_ != &::google::protobuf::internal::kEmptyString) {
        shape_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes shape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes shape = 1;
  if (has_shape()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddShape::MergeFrom(const AddShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      set_shape(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddShape::CopyFrom(const AddShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddShape::Swap(AddShape* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddShape_descriptor_;
  metadata.reflection = AddShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceInterpretation::kInterpretationFieldNumber;
const int ForceInterpretation::kShapeIdFieldNumber;
#endif  // !_MSC_VER

ForceInterpretation::ForceInterpretation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceInterpretation::InitAsDefaultInstance() {
}

ForceInterpretation::ForceInterpretation(const ForceInterpretation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceInterpretation::SharedCtor() {
  _cached_size_ = 0;
  interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shapeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceInterpretation::~ForceInterpretation() {
  SharedDtor();
}

void ForceInterpretation::SharedDtor() {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    delete interpretation_;
  }
  if (shapeid_ != &::google::protobuf::internal::kEmptyString) {
    delete shapeid_;
  }
  if (this != default_instance_) {
  }
}

void ForceInterpretation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceInterpretation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceInterpretation_descriptor_;
}

const ForceInterpretation& ForceInterpretation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ForceInterpretation* ForceInterpretation::default_instance_ = NULL;

ForceInterpretation* ForceInterpretation::New() const {
  return new ForceInterpretation;
}

void ForceInterpretation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_interpretation()) {
      if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
        interpretation_->clear();
      }
    }
    if (has_shapeid()) {
      if (shapeid_ != &::google::protobuf::internal::kEmptyString) {
        shapeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceInterpretation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes interpretation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interpretation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapeId;
        break;
      }

      // required string shapeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shapeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shapeid().data(), this->shapeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceInterpretation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->interpretation(), output);
  }

  // required string shapeId = 2;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapeid().data(), this->shapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shapeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceInterpretation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->interpretation(), target);
  }

  // required string shapeId = 2;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapeid().data(), this->shapeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shapeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceInterpretation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes interpretation = 1;
    if (has_interpretation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->interpretation());
    }

    // required string shapeId = 2;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shapeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceInterpretation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceInterpretation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceInterpretation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceInterpretation::MergeFrom(const ForceInterpretation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interpretation()) {
      set_interpretation(from.interpretation());
    }
    if (from.has_shapeid()) {
      set_shapeid(from.shapeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceInterpretation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceInterpretation::CopyFrom(const ForceInterpretation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceInterpretation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ForceInterpretation::Swap(ForceInterpretation* other) {
  if (other != this) {
    std::swap(interpretation_, other->interpretation_);
    std::swap(shapeid_, other->shapeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceInterpretation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceInterpretation_descriptor_;
  metadata.reflection = ForceInterpretation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace action
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
