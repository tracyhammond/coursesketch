// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSubshape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSubshape_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceInterpretation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceInterpretation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAttribtue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAttribtue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveAttribtue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveAttribtue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fcommands_2eproto() {
  protobuf_AddDesc_input_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/commands.proto");
  GOOGLE_CHECK(file != NULL);
  Update_descriptor_ = file->message_type(0);
  static const int Update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, commands_),
  };
  Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Update));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, isusercreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, commanddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, commandid_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  IdChain_descriptor_ = file->message_type(2);
  static const int IdChain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, idchain_),
  };
  IdChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdChain_descriptor_,
      IdChain::default_instance_,
      IdChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdChain));
  PackageShape_descriptor_ = file->message_type(3);
  static const int PackageShape_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, oldcontainerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, newcontainerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, shapestobecontained_),
  };
  PackageShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageShape_descriptor_,
      PackageShape::default_instance_,
      PackageShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageShape));
  CreateSubshape_descriptor_ = file->message_type(4);
  static const int CreateSubshape_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSubshape, parentshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSubshape, shape_),
  };
  CreateSubshape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSubshape_descriptor_,
      CreateSubshape::default_instance_,
      CreateSubshape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSubshape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSubshape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSubshape));
  RemoveObject_descriptor_ = file->message_type(5);
  static const int RemoveObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObject, shapeid_),
  };
  RemoveObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveObject_descriptor_,
      RemoveObject::default_instance_,
      RemoveObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveObject));
  ForceInterpretation_descriptor_ = file->message_type(6);
  static const int ForceInterpretation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, interpretation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, shapeid_),
  };
  ForceInterpretation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceInterpretation_descriptor_,
      ForceInterpretation::default_instance_,
      ForceInterpretation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceInterpretation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceInterpretation));
  AddAttribtue_descriptor_ = file->message_type(7);
  static const int AddAttribtue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttribtue, shapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttribtue, attributekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttribtue, attributevalue_),
  };
  AddAttribtue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAttribtue_descriptor_,
      AddAttribtue::default_instance_,
      AddAttribtue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttribtue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttribtue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAttribtue));
  RemoveAttribtue_descriptor_ = file->message_type(8);
  static const int RemoveAttribtue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAttribtue, shapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAttribtue, attributekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAttribtue, attributevalue_),
  };
  RemoveAttribtue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveAttribtue_descriptor_,
      RemoveAttribtue::default_instance_,
      RemoveAttribtue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAttribtue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveAttribtue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveAttribtue));
  CommandType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Update_descriptor_, &Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdChain_descriptor_, &IdChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageShape_descriptor_, &PackageShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSubshape_descriptor_, &CreateSubshape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveObject_descriptor_, &RemoveObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceInterpretation_descriptor_, &ForceInterpretation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAttribtue_descriptor_, &AddAttribtue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveAttribtue_descriptor_, &RemoveAttribtue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fcommands_2eproto() {
  delete Update::default_instance_;
  delete Update_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete IdChain::default_instance_;
  delete IdChain_reflection_;
  delete PackageShape::default_instance_;
  delete PackageShape_reflection_;
  delete CreateSubshape::default_instance_;
  delete CreateSubshape_reflection_;
  delete RemoveObject::default_instance_;
  delete RemoveObject_reflection_;
  delete ForceInterpretation::default_instance_;
  delete ForceInterpretation_reflection_;
  delete AddAttribtue::default_instance_;
  delete AddAttribtue_reflection_;
  delete RemoveAttribtue::default_instance_;
  delete RemoveAttribtue_reflection_;
}

void protobuf_AddDesc_input_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024input/commands.proto\022\025protobuf.srl.com"
    "mands\":\n\006Update\0220\n\010commands\030\001 \003(\0132\036.prot"
    "obuf.srl.commands.Command\"\217\001\n\007Command\0227\n"
    "\013commandType\030\001 \002(\0162\".protobuf.srl.comman"
    "ds.CommandType\022\025\n\risUserCreated\030\002 \002(\010\022\023\n"
    "\013commandData\030\003 \002(\014\022\014\n\004time\030\004 \001(\003\022\021\n\tcomm"
    "andId\030\005 \001(\t\"\032\n\007IdChain\022\017\n\007idChain\030\001 \003(\t\""
    "\233\001\n\014PackageShape\0226\n\016oldContainerId\030\001 \001(\013"
    "2\036.protobuf.srl.commands.IdChain\0226\n\016newC"
    "ontainerId\030\002 \001(\0132\036.protobuf.srl.commands"
    ".IdChain\022\033\n\023shapesToBeContained\030\003 \003(\t\"T\n"
    "\016CreateSubshape\0223\n\013parentShape\030\001 \002(\0132\036.p"
    "rotobuf.srl.commands.IdChain\022\r\n\005shape\030\002 "
    "\002(\014\"\?\n\014RemoveObject\022/\n\007shapeId\030\001 \002(\0132\036.p"
    "rotobuf.srl.commands.IdChain\"^\n\023ForceInt"
    "erpretation\022\026\n\016interpretation\030\001 \002(\014\022/\n\007s"
    "hapeId\030\002 \002(\0132\036.protobuf.srl.commands.IdC"
    "hain\"m\n\014AddAttribtue\022/\n\007shapeId\030\001 \002(\0132\036."
    "protobuf.srl.commands.IdChain\022\024\n\014attribu"
    "teKey\030\002 \002(\t\022\026\n\016attributeValue\030\003 \002(\014\"p\n\017R"
    "emoveAttribtue\022/\n\007shapeId\030\001 \002(\0132\036.protob"
    "uf.srl.commands.IdChain\022\024\n\014attributeKey\030"
    "\002 \002(\t\022\026\n\016attributeValue\030\003 \002(\014*\204\001\n\013Comman"
    "dType\022\016\n\nADD_STROKE\020\000\022\r\n\tADD_SHAPE\020\001\022\021\n\r"
    "PACKAGE_SHAPE\020\002\022\030\n\024FORCE_INTERPRETATION\020"
    "\003\022\023\n\017CREATE_SUBSHAPE\020\004\022\024\n\020ASSIGN_ATTRIBU"
    "TE\020\005", 1044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/commands.proto", &protobuf_RegisterTypes);
  Update::default_instance_ = new Update();
  Command::default_instance_ = new Command();
  IdChain::default_instance_ = new IdChain();
  PackageShape::default_instance_ = new PackageShape();
  CreateSubshape::default_instance_ = new CreateSubshape();
  RemoveObject::default_instance_ = new RemoveObject();
  ForceInterpretation::default_instance_ = new ForceInterpretation();
  AddAttribtue::default_instance_ = new AddAttribtue();
  RemoveAttribtue::default_instance_ = new RemoveAttribtue();
  Update::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  IdChain::default_instance_->InitAsDefaultInstance();
  PackageShape::default_instance_->InitAsDefaultInstance();
  CreateSubshape::default_instance_->InitAsDefaultInstance();
  RemoveObject::default_instance_->InitAsDefaultInstance();
  ForceInterpretation::default_instance_->InitAsDefaultInstance();
  AddAttribtue::default_instance_->InitAsDefaultInstance();
  RemoveAttribtue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fcommands_2eproto {
  StaticDescriptorInitializer_input_2fcommands_2eproto() {
    protobuf_AddDesc_input_2fcommands_2eproto();
  }
} static_descriptor_initializer_input_2fcommands_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kCommandsFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Update::InitAsDefaultInstance() {
}

Update::Update(const Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Update::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  SharedDtor();
}

void Update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.commands.Command commands = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.commands.Command commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.commands.Command commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    commands_.Swap(&other->commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kCommandTypeFieldNumber;
const int Command::kIsUserCreatedFieldNumber;
const int Command::kCommandDataFieldNumber;
const int Command::kTimeFieldNumber;
const int Command::kCommandIdFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = 0;
  isusercreated_ = false;
  commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    delete commanddata_;
  }
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    delete commandid_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = 0;
    isusercreated_ = false;
    if (has_commanddata()) {
      if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
        commanddata_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    if (has_commandid()) {
      if (commandid_ != &::google::protobuf::internal::kEmptyString) {
        commandid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.CommandType commandType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::commands::CommandType_IsValid(value)) {
            set_commandtype(static_cast< ::protobuf::srl::commands::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isUserCreated;
        break;
      }

      // required bool isUserCreated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUserCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusercreated_)));
          set_has_isusercreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commandData;
        break;
      }

      // required bytes commandData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commanddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commandId;
        break;
      }

      // optional string commandId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commandid().data(), this->commandid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.CommandType commandType = 1;
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commandtype(), output);
  }

  // required bool isUserCreated = 2;
  if (has_isusercreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isusercreated(), output);
  }

  // required bytes commandData = 3;
  if (has_commanddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->commanddata(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional string commandId = 5;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandid().data(), this->commandid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->commandid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.CommandType commandType = 1;
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commandtype(), target);
  }

  // required bool isUserCreated = 2;
  if (has_isusercreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isusercreated(), target);
  }

  // required bytes commandData = 3;
  if (has_commanddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->commanddata(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional string commandId = 5;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandid().data(), this->commandid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commandid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.CommandType commandType = 1;
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
    }

    // required bool isUserCreated = 2;
    if (has_isusercreated()) {
      total_size += 1 + 1;
    }

    // required bytes commandData = 3;
    if (has_commanddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->commanddata());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string commandId = 5;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commandid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_isusercreated()) {
      set_isusercreated(from.isusercreated());
    }
    if (from.has_commanddata()) {
      set_commanddata(from.commanddata());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(isusercreated_, other->isusercreated_);
    std::swap(commanddata_, other->commanddata_);
    std::swap(time_, other->time_);
    std::swap(commandid_, other->commandid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdChain::kIdChainFieldNumber;
#endif  // !_MSC_VER

IdChain::IdChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdChain::InitAsDefaultInstance() {
}

IdChain::IdChain(const IdChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdChain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdChain::~IdChain() {
  SharedDtor();
}

void IdChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdChain_descriptor_;
}

const IdChain& IdChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

IdChain* IdChain::default_instance_ = NULL;

IdChain* IdChain::New() const {
  return new IdChain;
}

void IdChain::Clear() {
  idchain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string idChain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_idchain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idchain(this->idchain_size() - 1).data(),
            this->idchain(this->idchain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_idChain;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string idChain = 1;
  for (int i = 0; i < this->idchain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->idchain(i).data(), this->idchain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->idchain(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string idChain = 1;
  for (int i = 0; i < this->idchain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idchain(i).data(), this->idchain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->idchain(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdChain::ByteSize() const {
  int total_size = 0;

  // repeated string idChain = 1;
  total_size += 1 * this->idchain_size();
  for (int i = 0; i < this->idchain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->idchain(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdChain::MergeFrom(const IdChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  idchain_.MergeFrom(from.idchain_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdChain::CopyFrom(const IdChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdChain::IsInitialized() const {

  return true;
}

void IdChain::Swap(IdChain* other) {
  if (other != this) {
    idchain_.Swap(&other->idchain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdChain_descriptor_;
  metadata.reflection = IdChain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageShape::kOldContainerIdFieldNumber;
const int PackageShape::kNewContainerIdFieldNumber;
const int PackageShape::kShapesToBeContainedFieldNumber;
#endif  // !_MSC_VER

PackageShape::PackageShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageShape::InitAsDefaultInstance() {
  oldcontainerid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
  newcontainerid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

PackageShape::PackageShape(const PackageShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageShape::SharedCtor() {
  _cached_size_ = 0;
  oldcontainerid_ = NULL;
  newcontainerid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageShape::~PackageShape() {
  SharedDtor();
}

void PackageShape::SharedDtor() {
  if (this != default_instance_) {
    delete oldcontainerid_;
    delete newcontainerid_;
  }
}

void PackageShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageShape_descriptor_;
}

const PackageShape& PackageShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

PackageShape* PackageShape::default_instance_ = NULL;

PackageShape* PackageShape::New() const {
  return new PackageShape;
}

void PackageShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oldcontainerid()) {
      if (oldcontainerid_ != NULL) oldcontainerid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_newcontainerid()) {
      if (newcontainerid_ != NULL) newcontainerid_->::protobuf::srl::commands::IdChain::Clear();
    }
  }
  shapestobecontained_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldcontainerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newContainerId;
        break;
      }

      // optional .protobuf.srl.commands.IdChain newContainerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newContainerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcontainerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shapesToBeContained;
        break;
      }

      // repeated string shapesToBeContained = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapesToBeContained:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shapestobecontained()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shapestobecontained(this->shapestobecontained_size() - 1).data(),
            this->shapestobecontained(this->shapestobecontained_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shapesToBeContained;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  if (has_oldcontainerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oldcontainerid(), output);
  }

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  if (has_newcontainerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcontainerid(), output);
  }

  // repeated string shapesToBeContained = 3;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shapestobecontained(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  if (has_oldcontainerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oldcontainerid(), target);
  }

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  if (has_newcontainerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcontainerid(), target);
  }

  // repeated string shapesToBeContained = 3;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->shapestobecontained(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
    if (has_oldcontainerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldcontainerid());
    }

    // optional .protobuf.srl.commands.IdChain newContainerId = 2;
    if (has_newcontainerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcontainerid());
    }

  }
  // repeated string shapesToBeContained = 3;
  total_size += 1 * this->shapestobecontained_size();
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shapestobecontained(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageShape::MergeFrom(const PackageShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapestobecontained_.MergeFrom(from.shapestobecontained_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldcontainerid()) {
      mutable_oldcontainerid()->::protobuf::srl::commands::IdChain::MergeFrom(from.oldcontainerid());
    }
    if (from.has_newcontainerid()) {
      mutable_newcontainerid()->::protobuf::srl::commands::IdChain::MergeFrom(from.newcontainerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageShape::CopyFrom(const PackageShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageShape::IsInitialized() const {

  return true;
}

void PackageShape::Swap(PackageShape* other) {
  if (other != this) {
    std::swap(oldcontainerid_, other->oldcontainerid_);
    std::swap(newcontainerid_, other->newcontainerid_);
    shapestobecontained_.Swap(&other->shapestobecontained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageShape_descriptor_;
  metadata.reflection = PackageShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSubshape::kParentShapeFieldNumber;
const int CreateSubshape::kShapeFieldNumber;
#endif  // !_MSC_VER

CreateSubshape::CreateSubshape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSubshape::InitAsDefaultInstance() {
  parentshape_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

CreateSubshape::CreateSubshape(const CreateSubshape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSubshape::SharedCtor() {
  _cached_size_ = 0;
  parentshape_ = NULL;
  shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSubshape::~CreateSubshape() {
  SharedDtor();
}

void CreateSubshape::SharedDtor() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (this != default_instance_) {
    delete parentshape_;
  }
}

void CreateSubshape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSubshape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSubshape_descriptor_;
}

const CreateSubshape& CreateSubshape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

CreateSubshape* CreateSubshape::default_instance_ = NULL;

CreateSubshape* CreateSubshape::New() const {
  return new CreateSubshape;
}

void CreateSubshape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parentshape()) {
      if (parentshape_ != NULL) parentshape_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_shape()) {
      if (shape_ != &::google::protobuf::internal::kEmptyString) {
        shape_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSubshape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain parentShape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parentshape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // required bytes shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSubshape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain parentShape = 1;
  if (has_parentshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parentshape(), output);
  }

  // required bytes shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->shape(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSubshape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain parentShape = 1;
  if (has_parentshape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parentshape(), target);
  }

  // required bytes shape = 2;
  if (has_shape()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->shape(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSubshape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain parentShape = 1;
    if (has_parentshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parentshape());
    }

    // required bytes shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shape());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSubshape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSubshape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSubshape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSubshape::MergeFrom(const CreateSubshape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentshape()) {
      mutable_parentshape()->::protobuf::srl::commands::IdChain::MergeFrom(from.parentshape());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSubshape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSubshape::CopyFrom(const CreateSubshape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSubshape::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateSubshape::Swap(CreateSubshape* other) {
  if (other != this) {
    std::swap(parentshape_, other->parentshape_);
    std::swap(shape_, other->shape_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSubshape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSubshape_descriptor_;
  metadata.reflection = CreateSubshape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveObject::kShapeIdFieldNumber;
#endif  // !_MSC_VER

RemoveObject::RemoveObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveObject::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

RemoveObject::RemoveObject(const RemoveObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveObject::SharedCtor() {
  _cached_size_ = 0;
  shapeid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveObject::~RemoveObject() {
  SharedDtor();
}

void RemoveObject::SharedDtor() {
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void RemoveObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveObject_descriptor_;
}

const RemoveObject& RemoveObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

RemoveObject* RemoveObject::default_instance_ = NULL;

RemoveObject* RemoveObject::New() const {
  return new RemoveObject;
}

void RemoveObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain shapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain shapeId = 1;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveObject::MergeFrom(const RemoveObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveObject::CopyFrom(const RemoveObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveObject::Swap(RemoveObject* other) {
  if (other != this) {
    std::swap(shapeid_, other->shapeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveObject_descriptor_;
  metadata.reflection = RemoveObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceInterpretation::kInterpretationFieldNumber;
const int ForceInterpretation::kShapeIdFieldNumber;
#endif  // !_MSC_VER

ForceInterpretation::ForceInterpretation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceInterpretation::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

ForceInterpretation::ForceInterpretation(const ForceInterpretation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceInterpretation::SharedCtor() {
  _cached_size_ = 0;
  interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shapeid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceInterpretation::~ForceInterpretation() {
  SharedDtor();
}

void ForceInterpretation::SharedDtor() {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    delete interpretation_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void ForceInterpretation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceInterpretation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceInterpretation_descriptor_;
}

const ForceInterpretation& ForceInterpretation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ForceInterpretation* ForceInterpretation::default_instance_ = NULL;

ForceInterpretation* ForceInterpretation::New() const {
  return new ForceInterpretation;
}

void ForceInterpretation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_interpretation()) {
      if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
        interpretation_->clear();
      }
    }
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceInterpretation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes interpretation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interpretation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapeId;
        break;
      }

      // required .protobuf.srl.commands.IdChain shapeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceInterpretation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->interpretation(), output);
  }

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shapeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceInterpretation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->interpretation(), target);
  }

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shapeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceInterpretation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes interpretation = 1;
    if (has_interpretation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->interpretation());
    }

    // required .protobuf.srl.commands.IdChain shapeId = 2;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceInterpretation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceInterpretation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceInterpretation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceInterpretation::MergeFrom(const ForceInterpretation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interpretation()) {
      set_interpretation(from.interpretation());
    }
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceInterpretation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceInterpretation::CopyFrom(const ForceInterpretation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceInterpretation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ForceInterpretation::Swap(ForceInterpretation* other) {
  if (other != this) {
    std::swap(interpretation_, other->interpretation_);
    std::swap(shapeid_, other->shapeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceInterpretation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceInterpretation_descriptor_;
  metadata.reflection = ForceInterpretation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAttribtue::kShapeIdFieldNumber;
const int AddAttribtue::kAttributeKeyFieldNumber;
const int AddAttribtue::kAttributeValueFieldNumber;
#endif  // !_MSC_VER

AddAttribtue::AddAttribtue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddAttribtue::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

AddAttribtue::AddAttribtue(const AddAttribtue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddAttribtue::SharedCtor() {
  _cached_size_ = 0;
  shapeid_ = NULL;
  attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAttribtue::~AddAttribtue() {
  SharedDtor();
}

void AddAttribtue::SharedDtor() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void AddAttribtue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAttribtue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAttribtue_descriptor_;
}

const AddAttribtue& AddAttribtue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

AddAttribtue* AddAttribtue::default_instance_ = NULL;

AddAttribtue* AddAttribtue::New() const {
  return new AddAttribtue;
}

void AddAttribtue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_attributekey()) {
      if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
        attributekey_->clear();
      }
    }
    if (has_attributevalue()) {
      if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
        attributevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAttribtue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain shapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributeKey;
        break;
      }

      // required string attributeKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributekey().data(), this->attributekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributeValue;
        break;
      }

      // required bytes attributeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attributevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddAttribtue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapeid(), output);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attributekey(), output);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->attributevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddAttribtue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapeid(), target);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributekey(), target);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attributevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddAttribtue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain shapeId = 1;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

    // required string attributeKey = 2;
    if (has_attributekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributekey());
    }

    // required bytes attributeValue = 3;
    if (has_attributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attributevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAttribtue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAttribtue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAttribtue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAttribtue::MergeFrom(const AddAttribtue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
    if (from.has_attributekey()) {
      set_attributekey(from.attributekey());
    }
    if (from.has_attributevalue()) {
      set_attributevalue(from.attributevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAttribtue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAttribtue::CopyFrom(const AddAttribtue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttribtue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddAttribtue::Swap(AddAttribtue* other) {
  if (other != this) {
    std::swap(shapeid_, other->shapeid_);
    std::swap(attributekey_, other->attributekey_);
    std::swap(attributevalue_, other->attributevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAttribtue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAttribtue_descriptor_;
  metadata.reflection = AddAttribtue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveAttribtue::kShapeIdFieldNumber;
const int RemoveAttribtue::kAttributeKeyFieldNumber;
const int RemoveAttribtue::kAttributeValueFieldNumber;
#endif  // !_MSC_VER

RemoveAttribtue::RemoveAttribtue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveAttribtue::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

RemoveAttribtue::RemoveAttribtue(const RemoveAttribtue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveAttribtue::SharedCtor() {
  _cached_size_ = 0;
  shapeid_ = NULL;
  attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveAttribtue::~RemoveAttribtue() {
  SharedDtor();
}

void RemoveAttribtue::SharedDtor() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void RemoveAttribtue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveAttribtue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveAttribtue_descriptor_;
}

const RemoveAttribtue& RemoveAttribtue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

RemoveAttribtue* RemoveAttribtue::default_instance_ = NULL;

RemoveAttribtue* RemoveAttribtue::New() const {
  return new RemoveAttribtue;
}

void RemoveAttribtue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_attributekey()) {
      if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
        attributekey_->clear();
      }
    }
    if (has_attributevalue()) {
      if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
        attributevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveAttribtue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain shapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributeKey;
        break;
      }

      // required string attributeKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributekey().data(), this->attributekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributeValue;
        break;
      }

      // required bytes attributeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attributevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveAttribtue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapeid(), output);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attributekey(), output);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->attributevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveAttribtue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapeid(), target);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributekey(), target);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attributevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveAttribtue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain shapeId = 1;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

    // required string attributeKey = 2;
    if (has_attributekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributekey());
    }

    // required bytes attributeValue = 3;
    if (has_attributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attributevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveAttribtue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveAttribtue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveAttribtue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveAttribtue::MergeFrom(const RemoveAttribtue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
    if (from.has_attributekey()) {
      set_attributekey(from.attributekey());
    }
    if (from.has_attributevalue()) {
      set_attributevalue(from.attributevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveAttribtue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAttribtue::CopyFrom(const RemoveAttribtue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAttribtue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RemoveAttribtue::Swap(RemoveAttribtue* other) {
  if (other != this) {
    std::swap(shapeid_, other->shapeid_);
    std::swap(attributekey_, other->attributekey_);
    std::swap(attributevalue_, other->attributevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveAttribtue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveAttribtue_descriptor_;
  metadata.reflection = RemoveAttribtue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
