// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "input/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace commands {

namespace {

const ::google::protobuf::Descriptor* SrlUpdateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlUpdateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SrlCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrlCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Marker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Marker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Marker_MarkerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionPackageShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionPackageShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionForceInterpretation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionForceInterpretation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionAddAttribtue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionAddAttribtue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRemoveAttribtue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRemoveAttribtue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_input_2fcommands_2eproto() {
  protobuf_AddDesc_input_2fcommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "input/commands.proto");
  GOOGLE_CHECK(file != NULL);
  SrlUpdateList_descriptor_ = file->message_type(0);
  static const int SrlUpdateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdateList, list_),
  };
  SrlUpdateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlUpdateList_descriptor_,
      SrlUpdateList::default_instance_,
      SrlUpdateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlUpdateList));
  SrlUpdate_descriptor_ = file->message_type(1);
  static const int SrlUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, updateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, commandnumber_),
  };
  SrlUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlUpdate_descriptor_,
      SrlUpdate::default_instance_,
      SrlUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlUpdate));
  SrlCommand_descriptor_ = file->message_type(2);
  static const int SrlCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, isusercreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, commanddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, commandid_),
  };
  SrlCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SrlCommand_descriptor_,
      SrlCommand::default_instance_,
      SrlCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrlCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SrlCommand));
  IdChain_descriptor_ = file->message_type(3);
  static const int IdChain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, idchain_),
  };
  IdChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdChain_descriptor_,
      IdChain::default_instance_,
      IdChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdChain));
  Marker_descriptor_ = file->message_type(4);
  static const int Marker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, type_),
  };
  Marker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Marker_descriptor_,
      Marker::default_instance_,
      Marker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Marker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Marker));
  Marker_MarkerType_descriptor_ = Marker_descriptor_->enum_type(0);
  ActionPackageShape_descriptor_ = file->message_type(5);
  static const int ActionPackageShape_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPackageShape, oldcontainerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPackageShape, newcontainerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPackageShape, shapestobecontained_),
  };
  ActionPackageShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionPackageShape_descriptor_,
      ActionPackageShape::default_instance_,
      ActionPackageShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPackageShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionPackageShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionPackageShape));
  ActionForceInterpretation_descriptor_ = file->message_type(6);
  static const int ActionForceInterpretation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionForceInterpretation, interpretation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionForceInterpretation, shapeid_),
  };
  ActionForceInterpretation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionForceInterpretation_descriptor_,
      ActionForceInterpretation::default_instance_,
      ActionForceInterpretation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionForceInterpretation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionForceInterpretation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionForceInterpretation));
  ActionAddAttribtue_descriptor_ = file->message_type(7);
  static const int ActionAddAttribtue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionAddAttribtue, shapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionAddAttribtue, attributekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionAddAttribtue, attributevalue_),
  };
  ActionAddAttribtue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionAddAttribtue_descriptor_,
      ActionAddAttribtue::default_instance_,
      ActionAddAttribtue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionAddAttribtue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionAddAttribtue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionAddAttribtue));
  ActionRemoveAttribtue_descriptor_ = file->message_type(8);
  static const int ActionRemoveAttribtue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRemoveAttribtue, shapeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRemoveAttribtue, attributekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRemoveAttribtue, attributevalue_),
  };
  ActionRemoveAttribtue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionRemoveAttribtue_descriptor_,
      ActionRemoveAttribtue::default_instance_,
      ActionRemoveAttribtue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRemoveAttribtue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRemoveAttribtue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRemoveAttribtue));
  CommandType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_input_2fcommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlUpdateList_descriptor_, &SrlUpdateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlUpdate_descriptor_, &SrlUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SrlCommand_descriptor_, &SrlCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdChain_descriptor_, &IdChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Marker_descriptor_, &Marker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionPackageShape_descriptor_, &ActionPackageShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionForceInterpretation_descriptor_, &ActionForceInterpretation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionAddAttribtue_descriptor_, &ActionAddAttribtue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRemoveAttribtue_descriptor_, &ActionRemoveAttribtue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_input_2fcommands_2eproto() {
  delete SrlUpdateList::default_instance_;
  delete SrlUpdateList_reflection_;
  delete SrlUpdate::default_instance_;
  delete SrlUpdate_reflection_;
  delete SrlCommand::default_instance_;
  delete SrlCommand_reflection_;
  delete IdChain::default_instance_;
  delete IdChain_reflection_;
  delete Marker::default_instance_;
  delete Marker_reflection_;
  delete ActionPackageShape::default_instance_;
  delete ActionPackageShape_reflection_;
  delete ActionForceInterpretation::default_instance_;
  delete ActionForceInterpretation_reflection_;
  delete ActionAddAttribtue::default_instance_;
  delete ActionAddAttribtue_reflection_;
  delete ActionRemoveAttribtue::default_instance_;
  delete ActionRemoveAttribtue_reflection_;
}

void protobuf_AddDesc_input_2fcommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024input/commands.proto\022\025protobuf.srl.com"
    "mands\"\?\n\rSrlUpdateList\022.\n\004list\030\001 \003(\0132 .p"
    "rotobuf.srl.commands.SrlUpdate\"w\n\tSrlUpd"
    "ate\022\020\n\010updateId\030\001 \002(\t\022\014\n\004time\030\002 \001(\003\0223\n\010c"
    "ommands\030\003 \003(\0132!.protobuf.srl.commands.Sr"
    "lCommand\022\025\n\rcommandNumber\030\004 \001(\005\"\204\001\n\nSrlC"
    "ommand\0227\n\013commandType\030\001 \002(\0162\".protobuf.s"
    "rl.commands.CommandType\022\025\n\risUserCreated"
    "\030\002 \002(\010\022\023\n\013commandData\030\003 \001(\014\022\021\n\tcommandId"
    "\030\004 \001(\t\"\032\n\007IdChain\022\017\n\007idChain\030\001 \003(\t\"\214\001\n\006M"
    "arker\022\n\n\002id\030\001 \002(\t\0226\n\004type\030\002 \002(\0162(.protob"
    "uf.srl.commands.Marker.MarkerType\">\n\nMar"
    "kerType\022\016\n\nSUBMISSION\020\000\022\014\n\010FEEDBACK\020\001\022\010\n"
    "\004SAVE\020\002\022\010\n\004LOAD\020\003\"\241\001\n\022ActionPackageShape"
    "\0226\n\016oldContainerId\030\001 \001(\0132\036.protobuf.srl."
    "commands.IdChain\0226\n\016newContainerId\030\002 \001(\013"
    "2\036.protobuf.srl.commands.IdChain\022\033\n\023shap"
    "esToBeContained\030\003 \003(\t\"d\n\031ActionForceInte"
    "rpretation\022\026\n\016interpretation\030\001 \002(\014\022/\n\007sh"
    "apeId\030\002 \002(\0132\036.protobuf.srl.commands.IdCh"
    "ain\"s\n\022ActionAddAttribtue\022/\n\007shapeId\030\001 \002"
    "(\0132\036.protobuf.srl.commands.IdChain\022\024\n\014at"
    "tributeKey\030\002 \002(\t\022\026\n\016attributeValue\030\003 \002(\014"
    "\"v\n\025ActionRemoveAttribtue\022/\n\007shapeId\030\001 \002"
    "(\0132\036.protobuf.srl.commands.IdChain\022\024\n\014at"
    "tributeKey\030\002 \002(\t\022\026\n\016attributeValue\030\003 \002(\014"
    "*\365\001\n\013CommandType\022\016\n\nADD_STROKE\020\000\022\r\n\tADD_"
    "SHAPE\020\001\022\021\n\rPACKAGE_SHAPE\020\002\022\021\n\rREMOVE_OBJ"
    "ECT\020\003\022\024\n\020ASSIGN_ATTRIBUTE\020\004\022\024\n\020REMOVE_AT"
    "TRIBUTE\020\005\022\n\n\006MARKER\020\006\022\030\n\024FORCE_INTERPRET"
    "ATION\020\n\022\010\n\004UNDO\020\013\022\010\n\004REDO\020\014\022\013\n\007REWRITE\020\r"
    "\022\017\n\013CLEAR_STACK\020\016\022\r\n\tOPEN_SYNC\020\017\022\016\n\nCLOS"
    "E_SYNC\020\020", 1288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "input/commands.proto", &protobuf_RegisterTypes);
  SrlUpdateList::default_instance_ = new SrlUpdateList();
  SrlUpdate::default_instance_ = new SrlUpdate();
  SrlCommand::default_instance_ = new SrlCommand();
  IdChain::default_instance_ = new IdChain();
  Marker::default_instance_ = new Marker();
  ActionPackageShape::default_instance_ = new ActionPackageShape();
  ActionForceInterpretation::default_instance_ = new ActionForceInterpretation();
  ActionAddAttribtue::default_instance_ = new ActionAddAttribtue();
  ActionRemoveAttribtue::default_instance_ = new ActionRemoveAttribtue();
  SrlUpdateList::default_instance_->InitAsDefaultInstance();
  SrlUpdate::default_instance_->InitAsDefaultInstance();
  SrlCommand::default_instance_->InitAsDefaultInstance();
  IdChain::default_instance_->InitAsDefaultInstance();
  Marker::default_instance_->InitAsDefaultInstance();
  ActionPackageShape::default_instance_->InitAsDefaultInstance();
  ActionForceInterpretation::default_instance_->InitAsDefaultInstance();
  ActionAddAttribtue::default_instance_->InitAsDefaultInstance();
  ActionRemoveAttribtue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_input_2fcommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_input_2fcommands_2eproto {
  StaticDescriptorInitializer_input_2fcommands_2eproto() {
    protobuf_AddDesc_input_2fcommands_2eproto();
  }
} static_descriptor_initializer_input_2fcommands_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SrlUpdateList::kListFieldNumber;
#endif  // !_MSC_VER

SrlUpdateList::SrlUpdateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlUpdateList::InitAsDefaultInstance() {
}

SrlUpdateList::SrlUpdateList(const SrlUpdateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlUpdateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlUpdateList::~SrlUpdateList() {
  SharedDtor();
}

void SrlUpdateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SrlUpdateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlUpdateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlUpdateList_descriptor_;
}

const SrlUpdateList& SrlUpdateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

SrlUpdateList* SrlUpdateList::default_instance_ = NULL;

SrlUpdateList* SrlUpdateList::New() const {
  return new SrlUpdateList;
}

void SrlUpdateList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlUpdateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.srl.commands.SrlUpdate list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlUpdateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.srl.commands.SrlUpdate list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlUpdateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.srl.commands.SrlUpdate list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlUpdateList::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.srl.commands.SrlUpdate list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlUpdateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlUpdateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlUpdateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlUpdateList::MergeFrom(const SrlUpdateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlUpdateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlUpdateList::CopyFrom(const SrlUpdateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlUpdateList::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void SrlUpdateList::Swap(SrlUpdateList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlUpdateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlUpdateList_descriptor_;
  metadata.reflection = SrlUpdateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlUpdate::kUpdateIdFieldNumber;
const int SrlUpdate::kTimeFieldNumber;
const int SrlUpdate::kCommandsFieldNumber;
const int SrlUpdate::kCommandNumberFieldNumber;
#endif  // !_MSC_VER

SrlUpdate::SrlUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlUpdate::InitAsDefaultInstance() {
}

SrlUpdate::SrlUpdate(const SrlUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlUpdate::SharedCtor() {
  _cached_size_ = 0;
  updateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  commandnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlUpdate::~SrlUpdate() {
  SharedDtor();
}

void SrlUpdate::SharedDtor() {
  if (updateid_ != &::google::protobuf::internal::kEmptyString) {
    delete updateid_;
  }
  if (this != default_instance_) {
  }
}

void SrlUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlUpdate_descriptor_;
}

const SrlUpdate& SrlUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

SrlUpdate* SrlUpdate::default_instance_ = NULL;

SrlUpdate* SrlUpdate::New() const {
  return new SrlUpdate;
}

void SrlUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updateid()) {
      if (updateid_ != &::google::protobuf::internal::kEmptyString) {
        updateid_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    commandnumber_ = 0;
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string updateId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updateid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updateid().data(), this->updateid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        break;
      }

      // repeated .protobuf.srl.commands.SrlCommand commands = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commands;
        if (input->ExpectTag(32)) goto parse_commandNumber;
        break;
      }

      // optional int32 commandNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commandnumber_)));
          set_has_commandnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string updateId = 1;
  if (has_updateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updateid().data(), this->updateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->updateid(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // repeated .protobuf.srl.commands.SrlCommand commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commands(i), output);
  }

  // optional int32 commandNumber = 4;
  if (has_commandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->commandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string updateId = 1;
  if (has_updateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updateid().data(), this->updateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->updateid(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // repeated .protobuf.srl.commands.SrlCommand commands = 3;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commands(i), target);
  }

  // optional int32 commandNumber = 4;
  if (has_commandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->commandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string updateId = 1;
    if (has_updateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updateid());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 commandNumber = 4;
    if (has_commandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commandnumber());
    }

  }
  // repeated .protobuf.srl.commands.SrlCommand commands = 3;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlUpdate::MergeFrom(const SrlUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updateid()) {
      set_updateid(from.updateid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_commandnumber()) {
      set_commandnumber(from.commandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlUpdate::CopyFrom(const SrlUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  return true;
}

void SrlUpdate::Swap(SrlUpdate* other) {
  if (other != this) {
    std::swap(updateid_, other->updateid_);
    std::swap(time_, other->time_);
    commands_.Swap(&other->commands_);
    std::swap(commandnumber_, other->commandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlUpdate_descriptor_;
  metadata.reflection = SrlUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SrlCommand::kCommandTypeFieldNumber;
const int SrlCommand::kIsUserCreatedFieldNumber;
const int SrlCommand::kCommandDataFieldNumber;
const int SrlCommand::kCommandIdFieldNumber;
#endif  // !_MSC_VER

SrlCommand::SrlCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SrlCommand::InitAsDefaultInstance() {
}

SrlCommand::SrlCommand(const SrlCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SrlCommand::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = 0;
  isusercreated_ = false;
  commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SrlCommand::~SrlCommand() {
  SharedDtor();
}

void SrlCommand::SharedDtor() {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    delete commanddata_;
  }
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    delete commandid_;
  }
  if (this != default_instance_) {
  }
}

void SrlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrlCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrlCommand_descriptor_;
}

const SrlCommand& SrlCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

SrlCommand* SrlCommand::default_instance_ = NULL;

SrlCommand* SrlCommand::New() const {
  return new SrlCommand;
}

void SrlCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = 0;
    isusercreated_ = false;
    if (has_commanddata()) {
      if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
        commanddata_->clear();
      }
    }
    if (has_commandid()) {
      if (commandid_ != &::google::protobuf::internal::kEmptyString) {
        commandid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SrlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.CommandType commandType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::commands::CommandType_IsValid(value)) {
            set_commandtype(static_cast< ::protobuf::srl::commands::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isUserCreated;
        break;
      }

      // required bool isUserCreated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUserCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusercreated_)));
          set_has_isusercreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commandData;
        break;
      }

      // optional bytes commandData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commanddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commandId;
        break;
      }

      // optional string commandId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commandid().data(), this->commandid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SrlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.CommandType commandType = 1;
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->commandtype(), output);
  }

  // required bool isUserCreated = 2;
  if (has_isusercreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isusercreated(), output);
  }

  // optional bytes commandData = 3;
  if (has_commanddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->commanddata(), output);
  }

  // optional string commandId = 4;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandid().data(), this->commandid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->commandid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SrlCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.CommandType commandType = 1;
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->commandtype(), target);
  }

  // required bool isUserCreated = 2;
  if (has_isusercreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isusercreated(), target);
  }

  // optional bytes commandData = 3;
  if (has_commanddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->commanddata(), target);
  }

  // optional string commandId = 4;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandid().data(), this->commandid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->commandid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SrlCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.CommandType commandType = 1;
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
    }

    // required bool isUserCreated = 2;
    if (has_isusercreated()) {
      total_size += 1 + 1;
    }

    // optional bytes commandData = 3;
    if (has_commanddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->commanddata());
    }

    // optional string commandId = 4;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commandid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrlCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SrlCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SrlCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrlCommand::MergeFrom(const SrlCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_isusercreated()) {
      set_isusercreated(from.isusercreated());
    }
    if (from.has_commanddata()) {
      set_commanddata(from.commanddata());
    }
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SrlCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrlCommand::CopyFrom(const SrlCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SrlCommand::Swap(SrlCommand* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(isusercreated_, other->isusercreated_);
    std::swap(commanddata_, other->commanddata_);
    std::swap(commandid_, other->commandid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SrlCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrlCommand_descriptor_;
  metadata.reflection = SrlCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdChain::kIdChainFieldNumber;
#endif  // !_MSC_VER

IdChain::IdChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdChain::InitAsDefaultInstance() {
}

IdChain::IdChain(const IdChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdChain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdChain::~IdChain() {
  SharedDtor();
}

void IdChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdChain_descriptor_;
}

const IdChain& IdChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

IdChain* IdChain::default_instance_ = NULL;

IdChain* IdChain::New() const {
  return new IdChain;
}

void IdChain::Clear() {
  idchain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string idChain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idChain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_idchain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idchain(this->idchain_size() - 1).data(),
            this->idchain(this->idchain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_idChain;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string idChain = 1;
  for (int i = 0; i < this->idchain_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->idchain(i).data(), this->idchain(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->idchain(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string idChain = 1;
  for (int i = 0; i < this->idchain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idchain(i).data(), this->idchain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->idchain(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdChain::ByteSize() const {
  int total_size = 0;

  // repeated string idChain = 1;
  total_size += 1 * this->idchain_size();
  for (int i = 0; i < this->idchain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->idchain(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdChain::MergeFrom(const IdChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  idchain_.MergeFrom(from.idchain_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdChain::CopyFrom(const IdChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdChain::IsInitialized() const {

  return true;
}

void IdChain::Swap(IdChain* other) {
  if (other != this) {
    idchain_.Swap(&other->idchain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdChain_descriptor_;
  metadata.reflection = IdChain_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Marker_MarkerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marker_MarkerType_descriptor_;
}
bool Marker_MarkerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Marker_MarkerType Marker::SUBMISSION;
const Marker_MarkerType Marker::FEEDBACK;
const Marker_MarkerType Marker::SAVE;
const Marker_MarkerType Marker::LOAD;
const Marker_MarkerType Marker::MarkerType_MIN;
const Marker_MarkerType Marker::MarkerType_MAX;
const int Marker::MarkerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Marker::kIdFieldNumber;
const int Marker::kTypeFieldNumber;
#endif  // !_MSC_VER

Marker::Marker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Marker::InitAsDefaultInstance() {
}

Marker::Marker(const Marker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Marker::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Marker::~Marker() {
  SharedDtor();
}

void Marker::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Marker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Marker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Marker_descriptor_;
}

const Marker& Marker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

Marker* Marker::default_instance_ = NULL;

Marker* Marker::New() const {
  return new Marker;
}

void Marker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Marker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .protobuf.srl.commands.Marker.MarkerType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::srl::commands::Marker_MarkerType_IsValid(value)) {
            set_type(static_cast< ::protobuf::srl::commands::Marker_MarkerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Marker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required .protobuf.srl.commands.Marker.MarkerType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Marker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .protobuf.srl.commands.Marker.MarkerType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Marker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .protobuf.srl.commands.Marker.MarkerType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Marker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Marker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Marker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Marker::MergeFrom(const Marker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Marker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marker::CopyFrom(const Marker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Marker::Swap(Marker* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Marker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Marker_descriptor_;
  metadata.reflection = Marker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionPackageShape::kOldContainerIdFieldNumber;
const int ActionPackageShape::kNewContainerIdFieldNumber;
const int ActionPackageShape::kShapesToBeContainedFieldNumber;
#endif  // !_MSC_VER

ActionPackageShape::ActionPackageShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionPackageShape::InitAsDefaultInstance() {
  oldcontainerid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
  newcontainerid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

ActionPackageShape::ActionPackageShape(const ActionPackageShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionPackageShape::SharedCtor() {
  _cached_size_ = 0;
  oldcontainerid_ = NULL;
  newcontainerid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionPackageShape::~ActionPackageShape() {
  SharedDtor();
}

void ActionPackageShape::SharedDtor() {
  if (this != default_instance_) {
    delete oldcontainerid_;
    delete newcontainerid_;
  }
}

void ActionPackageShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionPackageShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionPackageShape_descriptor_;
}

const ActionPackageShape& ActionPackageShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ActionPackageShape* ActionPackageShape::default_instance_ = NULL;

ActionPackageShape* ActionPackageShape::New() const {
  return new ActionPackageShape;
}

void ActionPackageShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_oldcontainerid()) {
      if (oldcontainerid_ != NULL) oldcontainerid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_newcontainerid()) {
      if (newcontainerid_ != NULL) newcontainerid_->::protobuf::srl::commands::IdChain::Clear();
    }
  }
  shapestobecontained_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionPackageShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldcontainerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newContainerId;
        break;
      }

      // optional .protobuf.srl.commands.IdChain newContainerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newContainerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcontainerid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shapesToBeContained;
        break;
      }

      // repeated string shapesToBeContained = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapesToBeContained:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_shapestobecontained()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shapestobecontained(this->shapestobecontained_size() - 1).data(),
            this->shapestobecontained(this->shapestobecontained_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shapesToBeContained;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionPackageShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  if (has_oldcontainerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oldcontainerid(), output);
  }

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  if (has_newcontainerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcontainerid(), output);
  }

  // repeated string shapesToBeContained = 3;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shapestobecontained(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionPackageShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
  if (has_oldcontainerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->oldcontainerid(), target);
  }

  // optional .protobuf.srl.commands.IdChain newContainerId = 2;
  if (has_newcontainerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcontainerid(), target);
  }

  // repeated string shapesToBeContained = 3;
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shapestobecontained(i).data(), this->shapestobecontained(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->shapestobecontained(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionPackageShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.srl.commands.IdChain oldContainerId = 1;
    if (has_oldcontainerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldcontainerid());
    }

    // optional .protobuf.srl.commands.IdChain newContainerId = 2;
    if (has_newcontainerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcontainerid());
    }

  }
  // repeated string shapesToBeContained = 3;
  total_size += 1 * this->shapestobecontained_size();
  for (int i = 0; i < this->shapestobecontained_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->shapestobecontained(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionPackageShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionPackageShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionPackageShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionPackageShape::MergeFrom(const ActionPackageShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapestobecontained_.MergeFrom(from.shapestobecontained_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldcontainerid()) {
      mutable_oldcontainerid()->::protobuf::srl::commands::IdChain::MergeFrom(from.oldcontainerid());
    }
    if (from.has_newcontainerid()) {
      mutable_newcontainerid()->::protobuf::srl::commands::IdChain::MergeFrom(from.newcontainerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionPackageShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionPackageShape::CopyFrom(const ActionPackageShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionPackageShape::IsInitialized() const {

  return true;
}

void ActionPackageShape::Swap(ActionPackageShape* other) {
  if (other != this) {
    std::swap(oldcontainerid_, other->oldcontainerid_);
    std::swap(newcontainerid_, other->newcontainerid_);
    shapestobecontained_.Swap(&other->shapestobecontained_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionPackageShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionPackageShape_descriptor_;
  metadata.reflection = ActionPackageShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionForceInterpretation::kInterpretationFieldNumber;
const int ActionForceInterpretation::kShapeIdFieldNumber;
#endif  // !_MSC_VER

ActionForceInterpretation::ActionForceInterpretation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionForceInterpretation::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

ActionForceInterpretation::ActionForceInterpretation(const ActionForceInterpretation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionForceInterpretation::SharedCtor() {
  _cached_size_ = 0;
  interpretation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shapeid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionForceInterpretation::~ActionForceInterpretation() {
  SharedDtor();
}

void ActionForceInterpretation::SharedDtor() {
  if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
    delete interpretation_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void ActionForceInterpretation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionForceInterpretation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionForceInterpretation_descriptor_;
}

const ActionForceInterpretation& ActionForceInterpretation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ActionForceInterpretation* ActionForceInterpretation::default_instance_ = NULL;

ActionForceInterpretation* ActionForceInterpretation::New() const {
  return new ActionForceInterpretation;
}

void ActionForceInterpretation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_interpretation()) {
      if (interpretation_ != &::google::protobuf::internal::kEmptyString) {
        interpretation_->clear();
      }
    }
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionForceInterpretation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes interpretation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_interpretation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shapeId;
        break;
      }

      // required .protobuf.srl.commands.IdChain shapeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionForceInterpretation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->interpretation(), output);
  }

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shapeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionForceInterpretation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes interpretation = 1;
  if (has_interpretation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->interpretation(), target);
  }

  // required .protobuf.srl.commands.IdChain shapeId = 2;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shapeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionForceInterpretation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes interpretation = 1;
    if (has_interpretation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->interpretation());
    }

    // required .protobuf.srl.commands.IdChain shapeId = 2;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionForceInterpretation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionForceInterpretation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionForceInterpretation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionForceInterpretation::MergeFrom(const ActionForceInterpretation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interpretation()) {
      set_interpretation(from.interpretation());
    }
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionForceInterpretation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionForceInterpretation::CopyFrom(const ActionForceInterpretation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionForceInterpretation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActionForceInterpretation::Swap(ActionForceInterpretation* other) {
  if (other != this) {
    std::swap(interpretation_, other->interpretation_);
    std::swap(shapeid_, other->shapeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionForceInterpretation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionForceInterpretation_descriptor_;
  metadata.reflection = ActionForceInterpretation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionAddAttribtue::kShapeIdFieldNumber;
const int ActionAddAttribtue::kAttributeKeyFieldNumber;
const int ActionAddAttribtue::kAttributeValueFieldNumber;
#endif  // !_MSC_VER

ActionAddAttribtue::ActionAddAttribtue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionAddAttribtue::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

ActionAddAttribtue::ActionAddAttribtue(const ActionAddAttribtue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionAddAttribtue::SharedCtor() {
  _cached_size_ = 0;
  shapeid_ = NULL;
  attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionAddAttribtue::~ActionAddAttribtue() {
  SharedDtor();
}

void ActionAddAttribtue::SharedDtor() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void ActionAddAttribtue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionAddAttribtue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionAddAttribtue_descriptor_;
}

const ActionAddAttribtue& ActionAddAttribtue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ActionAddAttribtue* ActionAddAttribtue::default_instance_ = NULL;

ActionAddAttribtue* ActionAddAttribtue::New() const {
  return new ActionAddAttribtue;
}

void ActionAddAttribtue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_attributekey()) {
      if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
        attributekey_->clear();
      }
    }
    if (has_attributevalue()) {
      if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
        attributevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionAddAttribtue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain shapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributeKey;
        break;
      }

      // required string attributeKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributekey().data(), this->attributekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributeValue;
        break;
      }

      // required bytes attributeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attributevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionAddAttribtue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapeid(), output);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attributekey(), output);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->attributevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionAddAttribtue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapeid(), target);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributekey(), target);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attributevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionAddAttribtue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain shapeId = 1;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

    // required string attributeKey = 2;
    if (has_attributekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributekey());
    }

    // required bytes attributeValue = 3;
    if (has_attributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attributevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionAddAttribtue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionAddAttribtue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionAddAttribtue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionAddAttribtue::MergeFrom(const ActionAddAttribtue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
    if (from.has_attributekey()) {
      set_attributekey(from.attributekey());
    }
    if (from.has_attributevalue()) {
      set_attributevalue(from.attributevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionAddAttribtue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionAddAttribtue::CopyFrom(const ActionAddAttribtue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionAddAttribtue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActionAddAttribtue::Swap(ActionAddAttribtue* other) {
  if (other != this) {
    std::swap(shapeid_, other->shapeid_);
    std::swap(attributekey_, other->attributekey_);
    std::swap(attributevalue_, other->attributevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionAddAttribtue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionAddAttribtue_descriptor_;
  metadata.reflection = ActionAddAttribtue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionRemoveAttribtue::kShapeIdFieldNumber;
const int ActionRemoveAttribtue::kAttributeKeyFieldNumber;
const int ActionRemoveAttribtue::kAttributeValueFieldNumber;
#endif  // !_MSC_VER

ActionRemoveAttribtue::ActionRemoveAttribtue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionRemoveAttribtue::InitAsDefaultInstance() {
  shapeid_ = const_cast< ::protobuf::srl::commands::IdChain*>(&::protobuf::srl::commands::IdChain::default_instance());
}

ActionRemoveAttribtue::ActionRemoveAttribtue(const ActionRemoveAttribtue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionRemoveAttribtue::SharedCtor() {
  _cached_size_ = 0;
  shapeid_ = NULL;
  attributekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRemoveAttribtue::~ActionRemoveAttribtue() {
  SharedDtor();
}

void ActionRemoveAttribtue::SharedDtor() {
  if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
    delete attributekey_;
  }
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (this != default_instance_) {
    delete shapeid_;
  }
}

void ActionRemoveAttribtue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRemoveAttribtue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRemoveAttribtue_descriptor_;
}

const ActionRemoveAttribtue& ActionRemoveAttribtue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_input_2fcommands_2eproto();
  return *default_instance_;
}

ActionRemoveAttribtue* ActionRemoveAttribtue::default_instance_ = NULL;

ActionRemoveAttribtue* ActionRemoveAttribtue::New() const {
  return new ActionRemoveAttribtue;
}

void ActionRemoveAttribtue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shapeid()) {
      if (shapeid_ != NULL) shapeid_->::protobuf::srl::commands::IdChain::Clear();
    }
    if (has_attributekey()) {
      if (attributekey_ != &::google::protobuf::internal::kEmptyString) {
        attributekey_->clear();
      }
    }
    if (has_attributevalue()) {
      if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
        attributevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRemoveAttribtue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.srl.commands.IdChain shapeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shapeid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attributeKey;
        break;
      }

      // required string attributeKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributekey().data(), this->attributekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attributeValue;
        break;
      }

      // required bytes attributeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attributevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionRemoveAttribtue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapeid(), output);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attributekey(), output);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->attributevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionRemoveAttribtue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.srl.commands.IdChain shapeId = 1;
  if (has_shapeid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapeid(), target);
  }

  // required string attributeKey = 2;
  if (has_attributekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributekey().data(), this->attributekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributekey(), target);
  }

  // required bytes attributeValue = 3;
  if (has_attributevalue()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attributevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionRemoveAttribtue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.srl.commands.IdChain shapeId = 1;
    if (has_shapeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shapeid());
    }

    // required string attributeKey = 2;
    if (has_attributekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributekey());
    }

    // required bytes attributeValue = 3;
    if (has_attributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attributevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRemoveAttribtue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRemoveAttribtue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionRemoveAttribtue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRemoveAttribtue::MergeFrom(const ActionRemoveAttribtue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapeid()) {
      mutable_shapeid()->::protobuf::srl::commands::IdChain::MergeFrom(from.shapeid());
    }
    if (from.has_attributekey()) {
      set_attributekey(from.attributekey());
    }
    if (from.has_attributevalue()) {
      set_attributevalue(from.attributevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRemoveAttribtue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRemoveAttribtue::CopyFrom(const ActionRemoveAttribtue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRemoveAttribtue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActionRemoveAttribtue::Swap(ActionRemoveAttribtue* other) {
  if (other != this) {
    std::swap(shapeid_, other->shapeid_);
    std::swap(attributekey_, other->attributekey_);
    std::swap(attributevalue_, other->attributevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionRemoveAttribtue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRemoveAttribtue_descriptor_;
  metadata.reflection = ActionRemoveAttribtue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace srl
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
