// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input/action.proto

#ifndef PROTOBUF_input_2faction_2eproto__INCLUDED
#define PROTOBUF_input_2faction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace srl {
namespace action {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2faction_2eproto();
void protobuf_AssignDesc_input_2faction_2eproto();
void protobuf_ShutdownFile_input_2faction_2eproto();

class Update;
class Command;

enum CommandType {
  ADD_STROKE = 0,
  ADD_SHAPE = 1,
  REPACKAGE_SHAPE = 2,
  FORCE_INTERPRETATION = 3
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ADD_STROKE;
const CommandType CommandType_MAX = FORCE_INTERPRETATION;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class Update : public ::google::protobuf::Message {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Update& default_instance();

  void Swap(Update* other);

  // implements Message ----------------------------------------------

  Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.srl.action.Command commands = 1;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 1;
  inline const ::protobuf::srl::action::Command& commands(int index) const;
  inline ::protobuf::srl::action::Command* mutable_commands(int index);
  inline ::protobuf::srl::action::Command* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::action::Command >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::action::Command >*
      mutable_commands();

  // @@protoc_insertion_point(class_scope:protobuf.srl.action.Update)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::srl::action::Command > commands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_input_2faction_2eproto();
  friend void protobuf_AssignDesc_input_2faction_2eproto();
  friend void protobuf_ShutdownFile_input_2faction_2eproto();

  void InitAsDefaultInstance();
  static Update* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.srl.action.CommandType commandType = 1;
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::protobuf::srl::action::CommandType commandtype() const;
  inline void set_commandtype(::protobuf::srl::action::CommandType value);

  // required bool isUserCreated = 2;
  inline bool has_isusercreated() const;
  inline void clear_isusercreated();
  static const int kIsUserCreatedFieldNumber = 2;
  inline bool isusercreated() const;
  inline void set_isusercreated(bool value);

  // required bytes commandData = 3;
  inline bool has_commanddata() const;
  inline void clear_commanddata();
  static const int kCommandDataFieldNumber = 3;
  inline const ::std::string& commanddata() const;
  inline void set_commanddata(const ::std::string& value);
  inline void set_commanddata(const char* value);
  inline void set_commanddata(const void* value, size_t size);
  inline ::std::string* mutable_commanddata();
  inline ::std::string* release_commanddata();
  inline void set_allocated_commanddata(::std::string* commanddata);

  // optional int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string commandId = 5;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIdFieldNumber = 5;
  inline const ::std::string& commandid() const;
  inline void set_commandid(const ::std::string& value);
  inline void set_commandid(const char* value);
  inline void set_commandid(const char* value, size_t size);
  inline ::std::string* mutable_commandid();
  inline ::std::string* release_commandid();
  inline void set_allocated_commandid(::std::string* commandid);

  // @@protoc_insertion_point(class_scope:protobuf.srl.action.Command)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_isusercreated();
  inline void clear_has_isusercreated();
  inline void set_has_commanddata();
  inline void clear_has_commanddata();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_commandid();
  inline void clear_has_commandid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int commandtype_;
  bool isusercreated_;
  ::std::string* commanddata_;
  ::google::protobuf::int64 time_;
  ::std::string* commandid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_input_2faction_2eproto();
  friend void protobuf_AssignDesc_input_2faction_2eproto();
  friend void protobuf_ShutdownFile_input_2faction_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Update

// repeated .protobuf.srl.action.Command commands = 1;
inline int Update::commands_size() const {
  return commands_.size();
}
inline void Update::clear_commands() {
  commands_.Clear();
}
inline const ::protobuf::srl::action::Command& Update::commands(int index) const {
  return commands_.Get(index);
}
inline ::protobuf::srl::action::Command* Update::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::protobuf::srl::action::Command* Update::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::srl::action::Command >&
Update::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::srl::action::Command >*
Update::mutable_commands() {
  return &commands_;
}

// -------------------------------------------------------------------

// Command

// required .protobuf.srl.action.CommandType commandType = 1;
inline bool Command::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_commandtype() {
  commandtype_ = 0;
  clear_has_commandtype();
}
inline ::protobuf::srl::action::CommandType Command::commandtype() const {
  return static_cast< ::protobuf::srl::action::CommandType >(commandtype_);
}
inline void Command::set_commandtype(::protobuf::srl::action::CommandType value) {
  assert(::protobuf::srl::action::CommandType_IsValid(value));
  set_has_commandtype();
  commandtype_ = value;
}

// required bool isUserCreated = 2;
inline bool Command::has_isusercreated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_isusercreated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_isusercreated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_isusercreated() {
  isusercreated_ = false;
  clear_has_isusercreated();
}
inline bool Command::isusercreated() const {
  return isusercreated_;
}
inline void Command::set_isusercreated(bool value) {
  set_has_isusercreated();
  isusercreated_ = value;
}

// required bytes commandData = 3;
inline bool Command::has_commanddata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_commanddata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_commanddata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_commanddata() {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    commanddata_->clear();
  }
  clear_has_commanddata();
}
inline const ::std::string& Command::commanddata() const {
  return *commanddata_;
}
inline void Command::set_commanddata(const ::std::string& value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void Command::set_commanddata(const char* value) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(value);
}
inline void Command::set_commanddata(const void* value, size_t size) {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  commanddata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_commanddata() {
  set_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    commanddata_ = new ::std::string;
  }
  return commanddata_;
}
inline ::std::string* Command::release_commanddata() {
  clear_has_commanddata();
  if (commanddata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commanddata_;
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_commanddata(::std::string* commanddata) {
  if (commanddata_ != &::google::protobuf::internal::kEmptyString) {
    delete commanddata_;
  }
  if (commanddata) {
    set_has_commanddata();
    commanddata_ = commanddata;
  } else {
    clear_has_commanddata();
    commanddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 time = 4;
inline bool Command::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Command::time() const {
  return time_;
}
inline void Command::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string commandId = 5;
inline bool Command::has_commandid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_commandid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_commandid() {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    commandid_->clear();
  }
  clear_has_commandid();
}
inline const ::std::string& Command::commandid() const {
  return *commandid_;
}
inline void Command::set_commandid(const ::std::string& value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void Command::set_commandid(const char* value) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(value);
}
inline void Command::set_commandid(const char* value, size_t size) {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  commandid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_commandid() {
  set_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    commandid_ = new ::std::string;
  }
  return commandid_;
}
inline ::std::string* Command::release_commandid() {
  clear_has_commandid();
  if (commandid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commandid_;
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_commandid(::std::string* commandid) {
  if (commandid_ != &::google::protobuf::internal::kEmptyString) {
    delete commandid_;
  }
  if (commandid) {
    set_has_commandid();
    commandid_ = commandid;
  } else {
    clear_has_commandid();
    commandid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace action
}  // namespace srl
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::srl::action::CommandType>() {
  return ::protobuf::srl::action::CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2faction_2eproto__INCLUDED
