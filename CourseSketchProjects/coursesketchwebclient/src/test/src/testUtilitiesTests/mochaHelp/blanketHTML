<div id="blanket-main"><div class="blanket bl-title"><div class="bl-cl bl-file"><a href="http://alex-seville.github.com/blanket/" target="_blank" class="bl-logo">Blanket.js</a> results</div><div class="bl-cl rs">Coverage (%)</div><div class="bl-cl rs">Covered/Total Smts.</div><div style="clear:both;"></div></div><div class="blanket bl-error"><div class="bl-cl bl-file"><span class="bl-nb">1.</span><a href='javascript:blanket_toggleSource("file-1")'>http://localhost:8080/src/utilities/persistantData/coursesketch.database.database.js</a></div><div class="bl-cl rs">41.23 %</div><div class="bl-cl rs">47/114</div><div id="file-1" class="bl-source" style="display: block;"> <div class=""><span class="">1</span>/**</div> <div class=""><span class="">2</span> * Creates a coursesketch.database.database with a specific name, and has a callback after being</div> <div class=""><span class="">3</span> * opened.</div> <div class=""><span class="">4</span> *</div> <div class=""><span class="">5</span> * It will also create all the functions needed for the specific coursesketch.database.database.</div> <div class=""><span class="">6</span> * @class ProtoDatabase</div> <div class=""><span class="">7</span> */</div> <div class="hit"><span class="">8</span>function ProtoDatabase(databaseName, version, openCallback) {</div> <div class="hit"><span class="">9</span>    CourseSketch = CourseSketch || {};</div> <div class=""><span class="">10</span>    /*</div> <div class=""><span class="">11</span>      Right now this is permanently set to true.</div> <div class=""><span class="">12</span>      This is because caching is causing lots of problems with developing.</div> <div class=""><span class="">13</span>      When the website is stable we can start to optimize and turn on caching.</div> <div class=""><span class="">14</span>     */</div> <div class="hit"><span class="">15</span>    CourseSketch.noCache = true;</div> <div class="hit"><span class="">16</span>    var databaseSupported = true;</div> <div class="hit"><span class="">17</span>    if (!window.indexedDB || typeof window.indexedDB === 'undefined') {</div> <div class="miss"><span class="">18</span>        databaseSupported = false;</div> <div class="miss"><span class="">19</span>        console.log('Your browser does not support a stable version of IndexedDB. So storing your data will not be possible');</div> <div class=""><span class="">20</span>    }</div> <div class="hit"><span class="">21</span>    var localScope = this;</div> <div class="hit"><span class="">22</span>    var dbNameSpace = {};</div> <div class="hit"><span class="">23</span>    if (databaseSupported) {</div> <div class="hit"><span class="">24</span>        dbNameSpace.indexedDB = window.indexedDB;</div> <div class=""><span class="">25</span>    } else {</div> <div class="miss"><span class="">26</span>        dbNameSpace.indexedDB = undefined;</div> <div class=""><span class="">27</span>    }</div> <div class=""><span class="">28</span></div> <div class="hit"><span class="">29</span>    var upgradeTables = null;</div> <div class=""><span class="">30</span>    /**</div> <div class=""><span class="">31</span>     * Sets the upgrade table to the input table.</div> <div class=""><span class="">32</span>     *</div> <div class=""><span class="">33</span>     * @param {Table} tables A list of tables that are being stored in the coursesketch.database.database.</div> <div class=""><span class="">34</span>     */</div> <div class="hit"><span class="">35</span>    this.setTables = function(tables) {</div> <div class="hit"><span class="">36</span>        upgradeTables = tables;</div> <div class=""><span class="">37</span>    };</div> <div class=""><span class="">38</span></div> <div class=""><span class="">39</span>    /**</div> <div class=""><span class="">40</span>     * Returns an object that can be converted to a table.</div> <div class=""><span class="">41</span>     *</div> <div class=""><span class="">42</span>     * The table contains an addingFunction (other) and a generic callback.&lt;br&gt;</div> <div class=""><span class="">43</span>     * example addingFunction&lt;br&gt;</div> <div class=""><span class="">44</span>     * &lt;code&gt;</div> <div class=""><span class="">45</span>     * function adding(store, todoText) {</div> <div class=""><span class="">46</span>     *         return store.put({</div> <div class=""><span class="">47</span>     *             'text': todoText,</div> <div class=""><span class="">48</span>     *             'timeStamp' : new Date().getTime()</div> <div class=""><span class="">49</span>     *         });</div> <div class=""><span class="">50</span>     * }</div> <div class=""><span class="">51</span>     * &lt;/code&gt;</div> <div class=""><span class="">52</span>     *</div> <div class=""><span class="">53</span>     * @param {String} tableName</div> <div class=""><span class="">54</span>     *            The name of the specific table to be created.</div> <div class=""><span class="">55</span>     * @param {String} keyValue</div> <div class=""><span class="">56</span>     *            This is the key for that specific table</div> <div class=""><span class="">57</span>     * @param {Function} addingFunction</div> <div class=""><span class="">58</span>     *            Takes in a store and then creates and returns a request see</div> <div class=""><span class="">59</span>     *            sample above.</div> <div class=""><span class="">60</span>     */</div> <div class="hit"><span class="">61</span>    this.createTable = function(tableName, keyValue, addingFunction) {</div> <div class="hit"><span class="">62</span>        return {</div> <div class=""><span class="">63</span>            name: tableName,</div> <div class=""><span class="">64</span>            key: keyValue,</div> <div class=""><span class="">65</span>            add: addingFunction</div> <div class=""><span class="">66</span>        };</div> <div class=""><span class="">67</span>    };</div> <div class=""><span class="">68</span></div> <div class=""><span class="">69</span>    /**</div> <div class=""><span class="">70</span>     * Called to open the coursesketch.database.database.</div> <div class=""><span class="">71</span>     */</div> <div class="hit"><span class="">72</span>    this.open = function() {</div> <div class="hit"><span class="">73</span>        var tableCreationCalled = false;</div> <div class="hit"><span class="">74</span>        try {</div> <div class=""><span class="">75</span>            // Lets do browser checking for compatability.</div> <div class="hit"><span class="">76</span>            var request = indexedDB.open(databaseName, version);</div> <div class=""><span class="">77</span></div> <div class=""><span class="">78</span>            // We can only create Object stores in a version change transaction.</div> <div class=""><span class="">79</span>            /**</div> <div class=""><span class="">80</span>             * Called if an upgrade is required</div> <div class=""><span class="">81</span>             *</div> <div class=""><span class="">82</span>             * @param {Event} e An upgrade event.</div> <div class=""><span class="">83</span>             */</div> <div class="hit"><span class="">84</span>            request.onupgradeneeded = function(e) {</div> <div class="miss"><span class="">85</span>                var db = e.target.result;</div> <div class=""><span class="">86</span>                // A versionchange transaction is started automatically.</div> <div class="miss"><span class="">87</span>                e.target.transaction.onerror = dbNameSpace.indexedDB.onerror;</div> <div class="miss"><span class="">88</span>                for (var i = 0; i &lt; upgradeTables.length; i++) {</div> <div class="miss"><span class="">89</span>                    table = upgradeTables[i];</div> <div class=""><span class="">90</span>                    // delete existing table</div> <div class="miss"><span class="">91</span>                    if (db.objectStoreNames.contains(table.name)) {</div> <div class="miss"><span class="">92</span>                        db.deleteObjectStore(table.name);</div> <div class=""><span class="">93</span>                    }</div> <div class="miss"><span class="">94</span>                    var store = db.createObjectStore(table.name, { keyPath: table.key });</div> <div class=""><span class="">95</span>                }</div> <div class=""><span class="">96</span>            };</div> <div class=""><span class="">97</span>            /**</div> <div class=""><span class="">98</span>             * Called when the coursesketch.database.database is succesfuly upgraded.</div> <div class=""><span class="">99</span>             *</div> <div class=""><span class="">100</span>             * @param {Event} e A success event.</div> <div class=""><span class="">101</span>             */</div> <div class="hit"><span class="">102</span>            request.onsuccess = function(e) {</div> <div class="hit"><span class="">103</span>                console.log('Database has opened');</div> <div class="hit"><span class="">104</span>                dbNameSpace.indexedDB.db = e.target.result;</div> <div class="hit"><span class="">105</span>                if (!tableCreationCalled) {</div> <div class="hit"><span class="">106</span>                    tableCreationCalled = true;</div> <div class="hit"><span class="">107</span>                    createTableFunctions();</div> <div class=""><span class="">108</span>                }</div> <div class=""><span class="">109</span>            };</div> <div class=""><span class="">110</span>            /**</div> <div class=""><span class="">111</span>             * Called if there is an error in opening the coursesketch.database.database.</div> <div class=""><span class="">112</span>             *</div> <div class=""><span class="">113</span>             * @param {Event} e An error event.</div> <div class=""><span class="">114</span>             */</div> <div class="hit"><span class="">115</span>            request.onerror = function(e) {</div> <div class="miss"><span class="">116</span>                console.log(e);</div> <div class="miss"><span class="">117</span>                console.log('Exception has occured when getting data');</div> <div class=""><span class="">118</span>                // if there is an exception then we should continue</div> <div class="miss"><span class="">119</span>                dbNameSpace.indexedDB = null;</div> <div class="miss"><span class="">120</span>                if (!tableCreationCalled) {</div> <div class="miss"><span class="">121</span>                    tableCreationCalled = true;</div> <div class="miss"><span class="">122</span>                    createTableFunctions();</div> <div class=""><span class="">123</span>                }</div> <div class=""><span class="">124</span>            };</div> <div class=""><span class="">125</span>        } catch (exception) {</div> <div class="hit"><span class="">126</span>            console.error(exception);</div> <div class=""><span class="">127</span>            // if there is an exception then we should continue</div> <div class="hit"><span class="">128</span>            dbNameSpace.indexedDB = null;</div> <div class="hit"><span class="">129</span>            if (!tableCreationCalled) {</div> <div class="hit"><span class="">130</span>                tableCreationCalled = true;</div> <div class="hit"><span class="">131</span>                createTableFunctions();</div> <div class=""><span class="">132</span>            }</div> <div class=""><span class="">133</span>        }</div> <div class=""><span class="">134</span>    };</div> <div class=""><span class="">135</span></div> <div class=""><span class="">136</span>    /**</div> <div class=""><span class="">137</span>     * creates a bunch of functions for the table which are created upon successful coursesketch.database.database creation.</div> <div class=""><span class="">138</span>     */</div> <div class="hit"><span class="">139</span>    function createTableFunctions() {</div> <div class="hit"><span class="">140</span>        if (upgradeTables === null) {</div> <div class="hit"><span class="">141</span>            if (openCallback) {</div> <div class="hit"><span class="">142</span>                openCallback();</div> <div class=""><span class="">143</span>            }</div> <div class="hit"><span class="">144</span>            return;</div> <div class=""><span class="">145</span>        }</div> <div class="hit"><span class="">146</span>        for (var i = 0; i &lt; upgradeTables.length; i++) {</div> <div class="hit"><span class="">147</span>            table = upgradeTables[i];</div> <div class="hit"><span class="">148</span>            (function(localTable) {</div> <div class="hit"><span class="">149</span>                var dataMap = {};</div> <div class=""><span class="">150</span>                /**</div> <div class=""><span class="">151</span>                 * Creates a function for adding items to the coursesketch.database.database.</div> <div class=""><span class="">152</span>                 *</div> <div class=""><span class="">153</span>                 * @param {String} objectId the Key of the object when added to the coursesketch.database.database.</div> <div class=""><span class="">154</span>                 * @param {String} objectToAdd A string representing the object in the coursesketch.database.database.</div> <div class=""><span class="">155</span>                 * @param {Function} callback Called when the object is successfully added to the coursesketch.database.database.</div> <div class=""><span class="">156</span>                 */</div> <div class="hit"><span class="">157</span>                localScope[ 'putIn' + localTable.name ] = function(objectId, objectToAdd, callback) {</div> <div class="miss"><span class="">158</span>                    if (!databaseSupported || !dbNameSpace.indexedDB || !dbNameSpace.indexedDB.db || CourseSketch.noCache) {</div> <div class="miss"><span class="">159</span>                        dataMap[objectId] = objectToAdd;</div> <div class="miss"><span class="">160</span>                        if (!isUndefined(callback)) {</div> <div class="miss"><span class="">161</span>                            callback({}, {});</div> <div class=""><span class="">162</span>                        }</div> <div class="miss"><span class="">163</span>                        return;</div> <div class=""><span class="">164</span>                    }</div> <div class=""><span class="">165</span></div> <div class="miss"><span class="">166</span>                    var db = dbNameSpace.indexedDB.db;</div> <div class="miss"><span class="">167</span>                    var trans = db.transaction([ localTable.name ], 'readwrite');</div> <div class="miss"><span class="">168</span>                    var store = trans.objectStore(localTable.name);</div> <div class="miss"><span class="">169</span>                    var request = localTable.add(store, objectId, objectToAdd);</div> <div class=""><span class="">170</span>                    /**</div> <div class=""><span class="">171</span>                     * Called when the transaction is complete.</div> <div class=""><span class="">172</span>                     *</div> <div class=""><span class="">173</span>                     * @param {Event} e A success event.</div> <div class=""><span class="">174</span>                     */</div> <div class="miss"><span class="">175</span>                    trans.oncomplete = function(e) {</div> <div class="miss"><span class="">176</span>                        if (!isUndefined(callback)) {</div> <div class="miss"><span class="">177</span>                            callback(e, request);</div> <div class=""><span class="">178</span>                        }</div> <div class=""><span class="">179</span>                    };</div> <div class=""><span class="">180</span></div> <div class=""><span class="">181</span>                    /**</div> <div class=""><span class="">182</span>                     * Called if there is an error during the transaction.</div> <div class=""><span class="">183</span>                     *</div> <div class=""><span class="">184</span>                     * @param {Event} e An error event.</div> <div class=""><span class="">185</span>                     */</div> <div class="miss"><span class="">186</span>                    request.onerror = function(e) {</div> <div class="miss"><span class="">187</span>                        console.log(e.value);</div> <div class=""><span class="">188</span>                    };</div> <div class=""><span class="">189</span>                };</div> <div class=""><span class="">190</span></div> <div class=""><span class="">191</span>                /**</div> <div class=""><span class="">192</span>                 * Creates a function for deleting items from the coursesketch.database.database.</div> <div class=""><span class="">193</span>                 *</div> <div class=""><span class="">194</span>                 * @param {String} objectId The id of the object we are trying to delete from the coursesketch.database.database.</div> <div class=""><span class="">195</span>                 * @param {Function} callback The function that is called after deleting the item.</div> <div class=""><span class="">196</span>                 */</div> <div class="hit"><span class="">197</span>                localScope[ 'deleteFrom' + localTable.name ] = function(objectId, callback) {</div> <div class="miss"><span class="">198</span>                    if (!databaseSupported || !dbNameSpace.indexedDB || !dbNameSpace.indexedDB.db || CourseSketch.noCache) {</div> <div class="miss"><span class="">199</span>                        dataMap[objectId] = undefined;</div> <div class="miss"><span class="">200</span>                        callback(undefined, undefined);</div> <div class="miss"><span class="">201</span>                        return;</div> <div class=""><span class="">202</span>                    }</div> <div class=""><span class="">203</span></div> <div class="miss"><span class="">204</span>                    var db = dbNameSpace.indexedDB.db;</div> <div class="miss"><span class="">205</span>                    var trans = db.transaction([ localTable.name ], 'readwrite');</div> <div class="miss"><span class="">206</span>                    var store = trans.objectStore(localTable.name);</div> <div class="miss"><span class="">207</span>                    var request = store.delete(objectId);</div> <div class=""><span class="">208</span>                    /**</div> <div class=""><span class="">209</span>                     * Called when the transaction is complete.</div> <div class=""><span class="">210</span>                     * @param {Event} e A success event.</div> <div class=""><span class="">211</span>                     */</div> <div class="miss"><span class="">212</span>                    trans.oncomplete = function(e) {</div> <div class="miss"><span class="">213</span>                        if (!isUndefined(callback)) {</div> <div class="miss"><span class="">214</span>                            callback(e, request);</div> <div class=""><span class="">215</span>                        }</div> <div class=""><span class="">216</span>                    };</div> <div class=""><span class="">217</span></div> <div class=""><span class="">218</span>                    /**</div> <div class=""><span class="">219</span>                     * Called if there is an error during the transaction.</div> <div class=""><span class="">220</span>                     * @param {Event} e An error event.</div> <div class=""><span class="">221</span>                     */</div> <div class="miss"><span class="">222</span>                    request.onerror = function(e) {</div> <div class="miss"><span class="">223</span>                        console.log(e.value);</div> <div class=""><span class="">224</span>                    };</div> <div class=""><span class="">225</span>                };</div> <div class=""><span class="">226</span></div> <div class=""><span class="">227</span>                /**</div> <div class=""><span class="">228</span>                 * Creates a function for deleting items from the coursesketch.database.database.</div> <div class=""><span class="">229</span>                 *</div> <div class=""><span class="">230</span>                 * @param {String} objectId The id of the object we are trying to get from the coursesketch.database.database.</div> <div class=""><span class="">231</span>                 * @param {Function} callback The function that is called after retrieving the item.</div> <div class=""><span class="">232</span>                 */</div> <div class="hit"><span class="">233</span>                localScope[ 'getFrom' + localTable.name ] = function(objectId, callback) {</div> <div class="miss"><span class="">234</span>                    if (!databaseSupported || !dbNameSpace.indexedDB || !dbNameSpace.indexedDB.db || CourseSketch.noCache) {</div> <div class="miss"><span class="">235</span>                        var request = {</div> <div class=""><span class="">236</span>                            result: {</div> <div class=""><span class="">237</span>                                id: objectId,</div> <div class=""><span class="">238</span>                                data: dataMap[objectId]</div> <div class=""><span class="">239</span>                            }</div> <div class=""><span class="">240</span>                        };</div> <div class="miss"><span class="">241</span>                        callback(undefined, request, request.result);</div> <div class="miss"><span class="">242</span>                        return;</div> <div class=""><span class="">243</span>                    }</div> <div class=""><span class="">244</span></div> <div class="miss"><span class="">245</span>                    var db = dbNameSpace.indexedDB.db;</div> <div class="miss"><span class="">246</span>                    var trans = db.transaction([ localTable.name ]);</div> <div class="miss"><span class="">247</span>                    var store = trans.objectStore(localTable.name);</div> <div class="miss"><span class="">248</span>                    var request = store.get(objectId);</div> <div class=""><span class="">249</span>                    /**</div> <div class=""><span class="">250</span>                     * Called when the transaction is complete.</div> <div class=""><span class="">251</span>                     * @param {Event} e A success event.</div> <div class=""><span class="">252</span>                     */</div> <div class="miss"><span class="">253</span>                    request.onsuccess = function(e) {</div> <div class="miss"><span class="">254</span>                        if (callback) {</div> <div class="miss"><span class="">255</span>                            callback(e, request, request.result);</div> <div class=""><span class="">256</span>                        }</div> <div class=""><span class="">257</span>                    };</div> <div class=""><span class="">258</span></div> <div class=""><span class="">259</span>                    /**</div> <div class=""><span class="">260</span>                     * Called if there is an error during the transaction.</div> <div class=""><span class="">261</span>                     * @param {Event} e An error event.</div> <div class=""><span class="">262</span>                     */</div> <div class="miss"><span class="">263</span>                    request.onerror = function(e) {</div> <div class="miss"><span class="">264</span>                        console.log(e.value);</div> <div class=""><span class="">265</span>                    };</div> <div class=""><span class="">266</span>                };</div> <div class=""><span class="">267</span>            })(table);</div> <div class=""><span class="">268</span>        }</div> <div class="hit"><span class="">269</span>        if (openCallback) {</div> <div class="hit"><span class="">270</span>            openCallback();</div> <div class=""><span class="">271</span>        }</div> <div class=""><span class="">272</span>    }</div> <div class=""><span class="">273</span></div> <div class=""><span class="">274</span>    /**</div> <div class=""><span class="">275</span>     * This is supposed to empty out the coursesketch.database.database.</div> <div class=""><span class="">276</span>     *</div> <div class=""><span class="">277</span>     * Currently does not work.</div> <div class=""><span class="">278</span>     */</div> <div class="hit"><span class="">279</span>    this.emptySelf = function() {</div> <div class="miss"><span class="">280</span>        emptyDB(databaseName);</div> <div class=""><span class="">281</span>    };</div> <div class=""><span class="">282</span></div> <div class=""><span class="">283</span>    /**</div> <div class=""><span class="">284</span>     * This is supposed to empty out the coursesketch.database.database.</div> <div class=""><span class="">285</span>     *</div> <div class=""><span class="">286</span>     * Currently does not work.</div> <div class=""><span class="">287</span>     */</div> <div class="hit"><span class="">288</span>    function emptyDB(databaseName) {</div> <div class="miss"><span class="">289</span>        try {</div> <div class="miss"><span class="">290</span>            var result = confirm('Do you want to empty all of the local data?');</div> <div class="miss"><span class="">291</span>            if (result === true) {</div> <div class="miss"><span class="">292</span>                var dbreq = dbNameSpace.indexedDB.deleteDatabase(databaseName);</div> <div class=""><span class="">293</span>                /**</div> <div class=""><span class="">294</span>                 * Called if emptying is succesful.</div> <div class=""><span class="">295</span>                 *</div> <div class=""><span class="">296</span>                 * @param {Event} event A success event.</div> <div class=""><span class="">297</span>                 */</div> <div class="miss"><span class="">298</span>                dbreq.onsuccess = function(event) {</div> <div class="miss"><span class="">299</span>                    output_trace('indexedDB: ' + databaseName + ' deleted');</div> <div class=""><span class="">300</span>                };</div> <div class=""><span class="">301</span>                /**</div> <div class=""><span class="">302</span>                 * Called if there is an error emptying the coursesketch.database.database.</div> <div class=""><span class="">303</span>                 *</div> <div class=""><span class="">304</span>                 * @param {Event} event An error event.</div> <div class=""><span class="">305</span>                 */</div> <div class="miss"><span class="">306</span>                dbreq.onerror = function(event) {</div> <div class="miss"><span class="">307</span>                    output_trace('indexedDB.delete Error: ' + event.message);</div> <div class=""><span class="">308</span>                };</div> <div class=""><span class="">309</span>            } else {</div> <div class="miss"><span class="">310</span>                alert('The local data was not emptied');</div> <div class=""><span class="">311</span>            }</div> <div class=""><span class="">312</span>        } catch (e) {</div> <div class="miss"><span class="">313</span>            output_trace('Error: ' + e.message);</div> <div class=""><span class="">314</span>        }</div> <div class=""><span class="">315</span>    }</div> <div class=""><span class="">316</span>}</div> <div class=""><span class="">317</span></div></div><div style="clear:both;"></div></div><div class="blanket grand-total bl-error"><div class="bl-cl">Global total</div><div class="bl-cl rs">41.23 %</div><div class="bl-cl rs">47/114</div><div style="clear:both;"></div></div></div>
