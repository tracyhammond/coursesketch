import "util.proto";

package protobuf.srl.grading;

// Represents the grading policy for a course.
message ProtoGradingPolicy {
    required string courseId = 1;                           // CourseId that the gradingPolicy belongs to.
    optional PolicyType policyType = 2 [default = PERCENT]; // Tells if the gradingPolicy is percent or point based.
    repeated PolicyCategory gradeCategories = 3;            // A list of the categories in a gradingPolicy.
    repeated DroppedProblems droppedProblems = 4;           // A list of dropped problems for a course.
    repeated DroppedAssignment droppedAssignments = 5;      // A list of dropped assignments for a course.

    enum PolicyType {
        PERCENT = 1; // Percent based grading policy
        POINT = 2;   // Point based grading policy
    }
}

// Represents a dropped assignment for a course.
message DroppedAssignment {
    required string assignmentId = 1;                       // The Id of the assignment that is dropped.
    optional DropType dropType = 2 [default = NO_COUNT];    // Determines if the dropped assignment counts for no points or is awarded full credit.
}

// Represents a dropped problem for a course.
// TODO: Make a map with key assignmentId and list value of problems once protojs supports maps.
message DroppedProblems {
    required string assignmentId = 1;       // The Id of the assignment that the problem is a part of.
    repeated SingleProblem problems = 2;    // Represents a single problem that is dropped for the assignment.

    message SingleProblem {
        required string problemId = 1;                          // The Id of the problem that is being dropped.
        optional DropType dropType = 2 [default = NO_COUNT];    // Determines if the dropped problem counts for no points or is awarded full credit.
    }
}

// Determines if a dropped problem is worth no points or counts as full credit.
enum DropType {
    CORRECT = 1;    // Counts as full credit
    NO_COUNT = 2;   // Worth 0 points or 0 weight
}

// Represents a grading policy category.
message PolicyCategory {
    required string name = 1;
    optional float weight = 2;
    optional LatePolicy latePolicy = 3; // This serves as a default late policy for all assignments in a category
}

// Represents a late policy for an assignment or for a grading policy category.
message LatePolicy {
    required FunctionType functionType = 1 [default = STEPPING_FUNCTION];
    optional TimeFrame timeFrameType = 2 [default = DAY];           // Because this is what people are used to.
    optional float rate = 3;
    optional SubtractionType subtractionType = 4 [default = CAP];   // How we are subtracting the grade.
    optional bool applyOnlyToLateProblems = 5;                      // Determines if the late policy only applies to problems submitted late.

    enum FunctionType {
        STEPPING_FUNCTION = 0;
        LINE = 1;
        EXPONENTIAL = 2;
    }

    /**
     * The numbers are reversed because of how the client loads and saves data for options.
     *
     * Specifically this is used in the advance edit panel.
     */
    enum TimeFrame {
        DAY = 3;
        HOUR = 2;
        MINUTE = 1;
        CONSTANT = 0;
    }

    enum SubtractionType {
        CAP = 0;
        PERCENT = 1;
    }
}

// Represents a grade. This can be a course grade, assignment grade, or problem grade dpeending on what Ids are given.
message ProtoGrade {
    required string courseId = 1;           // Id of the course the grade is for.
    required string userId = 2;             // Id of the user the grade belongs to.
    optional string assignmentId = 3;       // Id of the assignment the grade belongs to if it is an assignment grade.
    optional string problemId = 4;          // Id of the problem the grade belongs to if it is a problem grade.
    optional float currentGrade = 5;        // Current value of the grade.
    repeated GradeHistory gradeHistory = 6; // List containing data about the history of the grade.
    optional bool externalGrade = 7;        // True if the grade was input manually by someone. False if the grade was generated by auto grading.
}

// Represents the history of a single grade. This can apply to any type of grade.
message GradeHistory {
    optional float gradeValue = 1;                          // The value of the grade at this point in its history.
    optional string comment = 2;                            // Any comment associated with the grade.
    optional protobuf.srl.utils.DateTime gradedDate = 3;    // If this is the original submission, it is the date the user submitted
    optional string whoChanged = 4;                         // UserId of the person who changed the grade
}
