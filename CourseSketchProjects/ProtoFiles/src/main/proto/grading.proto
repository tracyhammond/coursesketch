syntax = "proto3";

import "util.proto";

package protobuf.srl.grading;

message ProtoGradingPolicy {
    string courseId = 1; // CourseId that the gradingPolicy belongs to.
    PolicyType policyType = 2; // Tells if the gradingPolicy is percent or point based.
    repeated PolicyCategory gradeCategories = 3; // A list of the categories in a gradingPolicy.
    map<string, DroppedProblems> droppedProblems = 4; // A map of assignmentId = drop type
    map<string, DropType> droppedAssignments = 5; // A map of assignment ids to drop type

    enum PolicyType {
        UNKOWN = 0;
        PERCENT = 1; // Percent based grading policy
        POINT = 2; // Point based grading policy
    }
}

// Represents a dropped problem for a course.
// TODO: Make a map with key assignmentId and list value of problems once protojs supports maps.
message DroppedProblems {
    map<string, DropType> problem = 1;
}

// Determines if a dropped problem is worth no points or counts as full credit.
enum DropType {
    UNKOWN = 0;
    NO_COUNT = 1; // Worth 0 points or 0 weight
    CORRECT = 2; // Counts as full credit
}

// Represents a grading policy category.
message PolicyCategory {
    string name = 1; // Name of the category set by the instructor. EX: Homework, Quizzes, Exam 1.
    double weight = 2; // Weight that the category has in the overall policy.
    LatePolicy latePolicy = 3; // This serves as a default late policy for all assignments in a category
}

// Represents a late policy for an assignment or for a grading policy category.
message LatePolicy {
    FunctionType functionType = 1;
    TimeFrame timeFrameType = 2; // Because this is what people are used to.
    double rate = 3; // Rate of subtraction.
    SubtractionType subtractionType = 4; // How we are subtracting the grade.
    // If the user submits some problems problems on time then this will only apply to problems that were submitted late.
    bool applyOnlyToLateProblems = 5;

    // Determines what late policy function type is being used.
    enum FunctionType {
        STEPPING_FUNCTION = 0;
        LINE = 1;
        EXPONENTIAL = 2;
    }

    /**
     */
    enum TimeFrame {
        CONSTANT = 0;
        MINUTE = 1;
        HOUR = 2;
        DAY = 3;
    }

    // Determines if the subtraction results in a capped grade or is a percent reduction. The cap type is nicer on the student.
    // If a student got a 75 with 20 points late, under the cap policy they still have a 75 (80 is max). Under percent, they get a 55.
    enum SubtractionType {
        CAP = 0; // This type caps the users maximum grade. EX: User can make a max of 80. Getting a 81 or a 100 results in getting an 80.
        PERCENT = 1; // This type subtracts a percent from the users grade after it is graded. EX: User gets an 80 then loses 20 points from late.
    }
}

// Represents a grade. This can be a course grade, assignment grade, or problem grade dpeending on what Ids are given.
message ProtoGrade {
    string courseId = 1; // Id of the course the grade is for.
    string userId = 2; // Id of the user the grade belongs to.
    string assignmentId = 3; // Id of the assignment the grade belongs to if it is an assignment grade.
    string problemId = 4; // Id of the problem the grade belongs to if it is a problem grade.
    float currentGrade = 5; // Current value of the grade.
    repeated GradeHistory gradeHistory = 6; // List containing data about the history of the grade.
    bool externalGrade = 7; // True if the grade was input manually by someone. False if the grade was generated by auto grading.
}

// Represents the history of a single grade. This can apply to any type of grade.
message GradeHistory {
    float gradeValue = 1; // The value of the grade at this point in its history.
    string comment = 2; // Any comment associated with the grade.
    protobuf.srl.utils.DateTime gradedDate = 3; // If this is the original submission, it is the date the user submitted
    string whoChanged = 4; // UserId of the person who changed the grade
}

message GradingQuery {
    PermissionLevel permissionLevel = 1; // This indicates the permission level of the requester.
    SearchType searchType = 2; // This indicates the request type.

    enum PermissionLevel {
        STUDENT = 0; // Requester is a student.
        INSTRUCTOR = 1; // Requester is an instructor.
    }

    enum SearchType {
        SINGLE_GRADE = 0; // Request is for a single grade.
        ALL_GRADES = 1; // Request is for all grades.
    }
}
