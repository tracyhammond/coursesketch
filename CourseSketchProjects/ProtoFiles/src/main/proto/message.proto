syntax = "proto3";

import "google/protobuf/any.proto";

package protobuf.srl.request;

option java_generic_services = true;

// Always sent and is filled out properly.
message Request {
    MessageType requestType = 1;
    /**
     * This is ued to uniquely identify a request accross a single session.
     * Request from different sessions are expected to be repeated.
     */
    string requestId = 2;
    google.protobuf.Any otherData = 3;
    string responseText = 4;
    string sessionInfo = 5; // This may be separated out more.
    string serversideId = 6; // This is the authenticationId
    int64 messageTime = 7; // This is the time that the message is received by the server
    string serverUserId = 8; // This is the identificationId

    enum MessageType {
        LOGIN = 0;
        DATA_REQUEST = 1;
        DATA_INSERT = 2;
        DATA_UPDATE = 3;
        DATA_REMOVE = 4;
        RECOGNITION = 5;
        LOADING = 6; // this is for when the client is loading.
        SUBMISSION = 7; // sent to just the answer checker server (Answer checking)
        FEEDBACK = 8; // answer checking feedback!
        CLOSE = 9; // sent to tell the server to close the connection rs
        ERROR = 10;
        TIME = 11; // used for synchronizing the time between the servers.
    }
}

message LoginInformation {
    string username = 1;
    string password = 2;
    bool isLoggedIn = 3;
    bool isInstructor = 4;
    bool isRegistering = 5;
    string email = 6;
    string userId = 7;
}

/**
 * Creates a protobuf object that inherits the properties of an exception.
 */
message ProtoException {
    string mssg = 1; // The message that the exception has.
    repeated string stackTrace = 2; // The stacktrace of the exception.
    string exceptionType = 3; // This will be the class name in java.
    ProtoException cause = 4; // The stackTrace might have a cause that is another protoException.
}

/**
 * This is the default response to return from rpc calls if a more detailed response is not needed.
 */
message DefaultResponse {
    bool successful = 1;
    ProtoException exception = 2;
}

service RequestService {
    rpc sendMessage (Request) returns (Request);
    rpc sendTimeRequest (Request) returns (Request);
}
