import "util.proto";
import "grading.proto";
import "commands.proto";

package protobuf.srl.school;

message SrlCourse {
    required string id = 1; // This must be globally unique.
    optional string name = 2;
    optional protobuf.srl.utils.SrlPermission accessPermission= 3;
    optional Accessibility access = 4 [default=PROTECTED];
    optional string description = 5;
    optional string semester = 6; //should be in format '_F13' (_F = Fall, Sp = Spring, Su = Summer)
    optional string imageUrl = 7;
    optional float grade = 8; //Calculated grade for all Assignments in this course
    optional protobuf.srl.utils.DateTime accessDate = 9; //Date course can be accessed
    optional protobuf.srl.utils.DateTime closeDate = 10; //Date course can no longer be accessed
    optional State state = 11;
    repeated string assignmentList = 12;
    repeated string lectureList = 13;
    optional string registrationKey = 14;

    enum Accessibility {
        SUPER_PUBLIC = 0; // no registration check is needed for this course.  (you do still have to register)
        PUBLIC = 1; //Any student can access course without approval.
        PROTECTED = 2; //Any student can request access for course and public information it is searchable, requires instructor approval
        PROTECTED_NOSEARCH = 3; //No students can see course without a special link, it is not searchable, requires instructor approval
        PRIVATE = 4; //No students can see course without instructor invitation, invitation only
    }
}

message SrlAssignment {
    optional string courseId = 1; // To know who the parent is.
    required string id = 2; // This must be unique within a course. We will strive for global uniqueness.
    optional string name = 3;
    optional AssignmentType assignmentType = 4 [default=HOMEWORK]; // used for grading purposes (and may change how it is displayed)
    optional string other = 5; // Name of an Instructor-defined assignment type
    optional string description = 6;
    repeated string links = 7; // external links/resources. Field needs improvement.
    optional protobuf.srl.grading.LatePolicy latePolicy = 8;
    optional string gradeWeight = 9; // Percentage of Assignment Category's total grade
    optional float grade = 10; // Calculated grade for whole Assignment
    optional protobuf.srl.utils.DateTime accessDate = 11; // Date that a student can access/view/begin an assignment
    optional protobuf.srl.utils.DateTime dueDate = 12; // Date that the late policy goes into affect
    optional protobuf.srl.utils.DateTime closeDate = 13; // Date that the assignment closes and can no longer be accessed
    optional State state = 14;
    optional string imageUrl = 15;
    repeated string problemList = 16;
    optional protobuf.srl.utils.SrlPermission accessPermission = 17;

    enum AssignmentType {
        HOMEWORK = 0;
        QUIZ = 1;
        LAB = 2;
        EXAM = 3;
        SURVEY = 4; // not for a grade!
        GAME = 5;
        OTHER = 6; // Allows instructors to create unique assignment types
    }
}


/**
 * Specifies the type of item something is.
 *
 * NOTE: the names are used for the collection name for some databases.
 */
enum ItemType {
    COURSE = 0;
    ASSIGNMENT = 1;
    COURSE_PROBLEM = 2;
    BANK_PROBLEM = 3;
    LECTURE = 4;
}

message SrlProblem {
    required string id = 1; // This must be unique within an assignment.
    optional string courseId = 2; // To know who the grandParent is.
    optional string assignmentId = 3; // To know who the parent is.
    optional string problemBankId = 4;
    optional string name = 5;
    optional SrlBankProblem problemInfo = 6;
    optional string gradeWeight = 7; // Percentage of assignment grade
    optional float grade = 8; // Calculated grade of all subproblems for this problem
    optional State state = 9;
    optional protobuf.srl.utils.SrlPermission accessPermission = 10;
    optional int32 problemNumber = 11; // the order in which the problem appears in the assignment.
}

message SrlBankProblem {
    required string id = 1;
    optional string questionText = 2;
    optional protobuf.srl.utils.QuestionType questionType = 3 [default=SKETCH];
    optional string image = 4;
    optional string solutionId = 5;
    optional string courseTopic = 6;
    optional string subTopic = 7;
    optional string source = 8;
    repeated string otherKeywords = 9;
    optional protobuf.srl.utils.SrlPermission accessPermission = 10;
    optional string script = 11; // a script string that is used for custom setups in experiments
    optional protobuf.srl.commands.SrlUpdateList baseSketch = 12; // the base sketch the instructor will make for assignments
    optional string registrationKey = 13;
}

message SrlGrade {
    required string id = 1;
    required string problemId = 2;
    required float grade = 3;
    optional string comment = 4;

    //optional string subTopic = 7;
    //optional string source = 8;
    //repeated string otherKeywords = 9;

}

message State {
    optional bool published = 1; // Instructor has finished construction of school item
    optional bool accessible = 2; // Has been made the school item available to be viewed and worked on
    optional bool pastDue = 3; // Due Date has passed. 'Late' if also not completed. 'Closed' if also no long accessible.
    optional bool started = 4; // Student has viewed or begun the school item
    optional bool completed = 5; // Student has saved/submitted work on all parts of school item
    optional bool graded = 6; // Instructor has finished grading the school item
}

message SrlUser {
    required string username = 1; // Must be globally unique
    optional string email = 2;
    repeated string courseList = 3;
    optional string schoolIdentity = 4;
    optional string firstName = 5;
    optional string lastName = 6;
    optional string password = 7;
}

enum UserType {
    ADMIN = 1;
    INSTRUCTOR = 2;
    TEACHING_ASSISTANT = 3;
    STUDENT = 4;
    GUEST = 5;
}

message SrlGroup {
    repeated string userId = 1;
    required string groupId = 2;
    optional string groupName = 3;
    repeated string admin = 4; // this is the only group of people who are allowed to use this group.
    //(and see it outside the database)
}
