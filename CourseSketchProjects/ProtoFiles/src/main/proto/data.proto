syntax = "proto3";

import "google/protobuf/any.proto";

package protobuf.srl.query;

message DataRequest {
    repeated ItemRequest items = 1;
}

message ItemRequest {
    ItemQuery query = 1;
    repeated string itemId = 2; // to pull multiple of the same item
    google.protobuf.Any advanceQuery = 3;
    int32 page = 4; // used to prevent loading to many at once.
    // This is interpreted differently by each request and some may ignore it completely.
}

/**
 * Used when sending/updating results.
 */
message DataSend {
    repeated ItemSend items = 1;
}

message ItemSend {
    ItemQuery query = 1;
    google.protobuf.Any data = 2;
}

/**
 * Returned upon any request/send from the database.
 */
message DataResult {
    repeated ItemResult results = 1;
}

message ItemResult {
    ItemQuery query = 1;
    string returnText = 2;
    repeated google.protobuf.Any data = 3;
    bool noData = 4; // if there is no data to return then this flag is set to true.
    string errorMessage = 5; // if noData is true then this may contain why.
    google.protobuf.Any advanceQuery = 6; // if additional items need to be queried.
}

enum ItemQuery {
    UNKOWN = 0;
    NO_OP = -2; // no operation happens.
    ERROR = -1;
    COURSE = 1;
    ASSIGNMENT = 2;
    COURSE_PROBLEM = 3;
    BANK_PROBLEM = 4;
    USERGROUP = 5;
    CLASS_GRADE = 6;
    USER_INFO = 7;
    SOLUTION = 8;
    EXPERIMENT = 9;
    SCHOOL = 10; // used to get the list of courses for a specific user, returns text if there are no courses.
    COURSE_SEARCH = 11;
    BANK_SEARCH = 12;
    REGISTER = 13; // userId = 0 courseId = 1
    COURSE_ROSTER = 14; // returns a list of user Ids
    UPDATE = 15; // polls the database for any updates/changes that have happened.
    LECTURE = 16; // used to get the lectures for a course
    LECTURESLIDE = 17; // used to get the lecture slides for a course
    GRADE = 18; // used to handle grades for a course
    GRADING_POLICY = 19; // used to handle grading policies for a course
}

/**
 * ExperimentReview is the advance query that is sent when an instructor is reviewing a students work.
 *
 * By default the work is sorted by problems
 * When it is sorted by student (??? happens to determine the next student)
 */
message ExperimentReview {
    bool allowEditing = 1;
    bool showUserNames = 2;
    SortType retrieveType = 3;
    repeated string userName = 4; // this only works when the sort type == user
    enum SortType {
        UNKOWN = 0;
        USER = 1;
        PROBELM = 2;
    }
}
