package protobuf.srl.query;

message DataRequest {
    repeated ItemRequest items = 1;
}

message ItemRequest {
    required ItemQuery query = 1;
    repeated string itemId = 2; // to pull multiple of the same item
    optional bytes advanceQuery = 3;
    optional int32 page = 4; // used to prevent loading to many at once.
    // This is interpreted differently by each request and some may ignore it completely.
}

/**
 * Used when sending/updating results.
 */
message DataSend {
    repeated ItemSend items = 1;
}

message ItemSend {
    optional ItemQuery query = 1;
    optional bytes data = 2;
}

/**
 * Returned upon any request/send from the database.
 */
message DataResult {
    repeated ItemResult results = 1;
}

message ItemResult {
    optional ItemQuery query = 1;
    optional string returnText = 2;
    repeated bytes data = 3;
    optional bool noData = 4; // if there is no data to return then this flag is set to true.
    optional string errorMessage = 5; // if noData is true then this may contain why.
    optional bytes advanceQuery = 6; // if additional items need to be queried.
}

enum ItemQuery {
    NO_OP = -2; // no operation happens.
    ERROR = -1;
    COURSE = 0;
    ASSIGNMENT = 1;
    COURSE_PROBLEM = 2;
    BANK_PROBLEM = 3;
    USERGROUP = 4;
    CLASS_GRADE = 5;
    USER_INFO = 6;
    SOLUTION = 7;
    EXPERIMENT = 8;
    SCHOOL = 9; // used to get the list of courses for a specific user, returns text if there are no courses.
    COURSE_SEARCH = 10;
    BANK_SEARCH = 11;
    REGISTER = 12; // userId = 0 courseId = 1
    COURSE_LIST = 13; // returns a list of Ids
    UPDATE = 14; // polls the database for any updates/changes that have happened.
    LECTURE = 15; // used to get the lectures for a course
    LECTURESLIDE = 16; // used to get the lecture slides for a course
    GRADE = 17; // used to handle grades for a course
    GRADING_POLICY = 18; // used to handle grading policies for a course
}

/**
 * ExperimentReview is the advance query that is sent when an instructor is reviewing a students work.
 *
 * By default the work is sorted by problems
 * When it is sorted by student (??? happens to determine the next student)
 */
message ExperimentReview {
    optional bool allowEditing = 1;
    optional bool showUserNames = 2;
    optional SortType retrieveType = 3;
    repeated string userName = 4; // this only works when the sort type == user
    enum SortType {
        USER = 1;
        PROBELM = 2;
    }
}
