syntax = "proto3";

import "util.proto";
import "grading.proto";

package protobuf.srl.school;

message SrlAssignment {
    string courseId = 1; // To know who the parent is.
    string id = 2; // This must be unique within a course. We will strive for global uniqueness.

    // Display information is 3- 9
    string name = 3;
    string description = 4;
    repeated string links = 5; // external links/resources. Field needs improvement.
    string imageUrl = 6;

    // Dates are 10 - 19
    protobuf.srl.utils.DateTime accessDate = 10; // Date that a student can access/view/begin an assignment
    protobuf.srl.utils.DateTime dueDate = 11; // Date that the late policy goes into affect
    protobuf.srl.utils.DateTime closeDate = 12; // Date that the assignment closes and can no longer be accessed
    protobuf.srl.utils.DateTime reviewOpenDate = 13; // Date that the assignment review opens so students can view answers again.

    // Grading 20 - 29
    string assignmentCatagory = 20; // Name of an Instructor-defined assignment type
    protobuf.srl.grading.LatePolicy latePolicy = 21;
    string gradeWeight = 22; // Percentage of Assignment Category's total grade
    float grade = 23; // Calculated grade for whole Assignment

    // State and Types 30 - 39
    protobuf.srl.utils.State state = 30;
    AssignmentType assignmentType = 31;
    NavigationType navigationType = 32;

    repeated string problemGroups = 50; // a list of Ids that point to the different problem groups
}

enum AssignmentType {
    GRADED = 0; // (this is the default students can not see any answers till the assignment is closed)
    FLASHCARD = 1; // (this means infinite questions in random order)
    LECTURE = 2; // (this means it will look like a lecture)
    PRACTICE = 3; // (this allows students to see the correct answer immediately)
}

enum NavigationType {
    DEFAULT = 0; // (chooses what the default type is for the specific assignmentType
    LOOPING = 1; // (this means the question order loops when the end is reached)
    NO_BACK_TRAVEL = 2; // (what it sounds like, as soon as they progress they can not navigate backwards [this one might require server navigation])
    RANDOM = 3; // (pulls the next one at a random order)
}
