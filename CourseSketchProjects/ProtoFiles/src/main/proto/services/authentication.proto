package protobuf.srl.services.authentication;

import "school.proto";
import "message.proto";

option java_generic_services = true;


/**
 * A list of Authentication options.
 * Compares against values in {@link AuthenticationData}.
 *
 * Works on the principle of accumalitive permissions.  So if you check for admin it will checker for all permissions below it.
 * but if you check for user it will not checker for any permissions above it.
 * @author gigemjt
 */
message AuthType {
    /**
     * If true then it checks against the userList in {@link AuthenticationData}.
     */
    optional bool checkingUser = 1;

    /**
     * If true then it checks against the userList in {@link AuthenticationData}.
     */
    optional bool checkingPeerTeacher = 2;

    /**
     * If true then it checks against the modlist in {@link AuthenticationData}.
     */
    optional bool checkingMod = 3;

    /**
     * If true then it checks against the adminlist in {@link AuthenticationData}.
     */
    optional bool checkingAdmin = 4;

    /**
     * If true then it checks that the dates in {@link AuthenticationData}.
     */
    optional bool checkDate = 5;

    /**
     * If true then it passes if either mod, admin, or user exist. {@link AuthenticationData}.
     * Or if the class does not require registration
     */
    optional bool checkAccess = 6;

    /**
     * If true then it checks if the course is published.
     */
    optional bool checkIsPublished = 7;

    /**
     * If true then it checks if the course requires registration.
     */
    optional bool checkIsRegistrationRequired = 8;

}

/**
 * Used when creating a new group
 */
message AuthCreationRequest {
    // contains all of the information about the item being created
    required AuthRequest itemRequest = 1;
    // contains the id of the parent of this item.
    // NOTE: If the bank problem is being created for use with a course then it will automatically add itself to the list of valid users!
    optional string parentItemId = 2;
    optional string registrationKey = 3;
}

/**
 * Used when creating adding a user to a course.
 */
message UserRegistration {
    // contains all of the information about the item being created
    required AuthRequest itemRequest = 1;
    // contains the registration key if it is needed
    optional string registrationKey = 3;
}

message AuthRequest {
    required string authId = 1;
    required string itemId = 2;
    required protobuf.srl.school.ItemType itemType = 3;
    optional AuthType authParams = 4;
}

/**
 * Returns the result of the authentication request.
 * NOTE: values are only returned true for data that is checked.
 * For example if you do not ask to check if they are a student and nothing else they will only return that they are a student.
 */
message AuthResponse {
    // This is true if they have a value greater than NO_PERMISSION
    // or if the item is published and registration is not required.
    // dates are handled separately from having access.
    optional bool hasAccess = 1;

    optional PermissionLevel permissionLevel = 2 [default = NO_PERMISSION];

    // True if the item is currently open during the time the check was performed.
    optional bool isItemOpen = 3;

    // true if the item requires registration to access
    // if explicitly set to false then hasAccess will almost always be true even if they have NO_PERMISSION
    optional bool isRegistrationRequired = 4 [default=true];

    // true if the item is published, false otherwise
    optional bool isItemPublished = 5;

    // ASSUMPTION LARGER PERMISSIONS HAVE LARGER NUMBERS
    enum PermissionLevel {
        NO_PERMISSION = 0;
        STUDENT = 100;
        PEER_TEACHER = 200;
        MODERATOR = 300;
        TEACHER = 400;
    }
}

service AuthenticationService {
    /**
     * Authorizes the user to have permissions to the item detailed in the AuthRequest.
     */
    rpc authorizeUser(AuthRequest) returns (AuthResponse);

    /**
     * Creates a new set of item permissions.
     */
    rpc createNewItem(AuthCreationRequest) returns (protobuf.srl.request.DefaultResponse);

    /**
     * Registers the user in the item.
     */
    rpc registerUser(UserRegistration) returns (protobuf.srl.request.DefaultResponse);
}
