syntax = "proto3";

package protobuf.srl.services.authentication;

import "util.proto";
import "message.proto";

option java_generic_services = true;

/**
 * A list of Authentication options.
 * Compares against values in {@link AuthenticationData}.
 *
 * Works on the principle of accumalitive permissions.  So if you check for admin it will check for all permissions below it.
 * But if you check for user it will not checker for any permissions above it.
 * @author gigemjt
 */
message AuthType {
    /**
     * If true then it checks against the userList in {@link AuthenticationData}.
     */
    bool checkingUser = 1;

    /**
     * If true then it checks against the peerTeacherList in {@link AuthenticationData}.
     */
    bool checkingPeerTeacher = 2;

    /**
     * If true then it checks against the modList in {@link AuthenticationData}.
     */
    bool checkingMod = 3;

    /**
     * If true then it checks against the adminList in {@link AuthenticationData}.
     */
    bool checkingAdmin = 4;

    /**
     * If true then it checks that the dates are within the open and close datae in {@link AuthenticationData}.
     */
    bool checkDate = 5;

    /**
     * If true then it passes if either mod, admin, or user exist. {@link AuthenticationData}.
     * Or if the class does not require registration.
     */
    bool checkAccess = 6;

    /**
     * If true then it checks if the course is published.
     */
    bool checkIsPublished = 7;

    /**
     * If true then it checks if the course requires registration.
     */
    bool checkIsRegistrationRequired = 8;

}

/**
 * The default data used for authentication request
 * Used when creating a new group
 */
message AuthCreationRequest {
    // contains all of the information about the item being created
    AuthRequest itemRequest = 1;
    // contains the id of the parent of this item.
    // NOTE: If the bank problem is being created for use with a course then it will automatically add itself to the list of valid users!
    string parentItemId = 2;
    string registrationKey = 3;
}

/**
 * Used when adding a user to a course.
 */
message UserRegistration {
    // Contains all of the information about the registration.
    AuthRequest itemRequest = 1;

    // Contains the registration key that is used to authenticate registration.
    string registrationKey = 2;
}

message AuthRequest {
    string authId = 1;
    string itemId = 2;
    protobuf.srl.utils.ItemType itemType = 3;
    AuthType authParams = 4;
}

/**
 * Returns the result of the authentication request.
 * NOTE: values are only returned true for data that is checked.
 * For example if you ask to check if they are a student and nothing else they will only return that they are a student.
 */
message AuthResponse {
    // This is true if they have a value greater than NO_PERMISSION
    // or if the item is published and registration is not required.
    // Dates are handled separately from having access.
    bool hasAccess = 1;

    PermissionLevel permissionLevel = 2;

    // True if the item is currently open during the time the check was performed.
    bool isItemOpen = 3;

    // False if the item does not require registration to access.
    // If explicitly set to True then hasAccess will almost always be true even if they have NO_PERMISSION.
    bool isNoRegistrationRequired = 4;

    // True if the item is published, false otherwise.
    bool isItemPublished = 5;

    // ASSUMPTION: LARGER PERMISSIONS HAVE LARGER NUMBERS
    enum PermissionLevel {
        NO_PERMISSION = 0;
        STUDENT = 100;
        PEER_TEACHER = 200;
        MODERATOR = 300;
        TEACHER = 400;
    }
}

service AuthenticationService {
    /**
     * Authorizes the user to have permissions to the item detailed in the AuthRequest.
     */
    rpc authorizeUser (AuthRequest) returns (AuthResponse);

    /**
     * Creates a new set of item permissions.
     */
    rpc createNewItem (AuthCreationRequest) returns (protobuf.srl.request.DefaultResponse);

    /**
     * Registers the user in the item.
     */
    rpc registerUser (UserRegistration) returns (protobuf.srl.request.DefaultResponse);
}
